
RP3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b024  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  0800b1b4  0800b1b4  0000c1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b548  0800b548  0000d06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b548  0800b548  0000c548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b550  0800b550  0000d06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b550  0800b550  0000c550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b558  0800b558  0000c558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800b55c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009780  2000006c  0800b5c8  0000d06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200097ec  0800b5c8  0000d7ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002adcc  00000000  00000000  0000d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053ed  00000000  00000000  00037e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002498  00000000  00000000  0003d258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c97  00000000  00000000  0003f6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000907c  00000000  00000000  00041387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029ca3  00000000  00000000  0004a403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d4b1  00000000  00000000  000740a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181557  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a6bc  00000000  00000000  0018159c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  0018bc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b19c 	.word	0x0800b19c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800b19c 	.word	0x0800b19c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <HelloWorldTask>:
/* USER CODE BEGIN PV */


osThreadId_t helloTaskHandle;
void HelloWorldTask(void *argument)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b087      	sub	sp, #28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	osDelay(3000);
 80005b4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005b8:	f006 f944 	bl	8006844 <osDelay>
    char msg[] = "Hello World!\r\n";
 80005bc:	4b0e      	ldr	r3, [pc, #56]	@ (80005f8 <HelloWorldTask+0x4c>)
 80005be:	f107 0408 	add.w	r4, r7, #8
 80005c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005c4:	c407      	stmia	r4!, {r0, r1, r2}
 80005c6:	8023      	strh	r3, [r4, #0]
 80005c8:	3402      	adds	r4, #2
 80005ca:	0c1b      	lsrs	r3, r3, #16
 80005cc:	7023      	strb	r3, [r4, #0]

    for(;;)
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff fdfc 	bl	80001d0 <strlen>
 80005d8:	4603      	mov	r3, r0
 80005da:	b29a      	uxth	r2, r3
 80005dc:	f107 0108 	add.w	r1, r7, #8
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
 80005e4:	4805      	ldr	r0, [pc, #20]	@ (80005fc <HelloWorldTask+0x50>)
 80005e6:	f004 fd63 	bl	80050b0 <HAL_UART_Transmit>
        osDelay(1000); // 1 Sekunde warten
 80005ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ee:	f006 f929 	bl	8006844 <osDelay>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005f2:	bf00      	nop
 80005f4:	e7eb      	b.n	80005ce <HelloWorldTask+0x22>
 80005f6:	bf00      	nop
 80005f8:	0800b1c0 	.word	0x0800b1c0
 80005fc:	20000220 	.word	0x20000220

08000600 <StartWiFiTask>:



osThreadId_t wifiTaskHandle;
void StartWiFiTask(void *argument)
{
 8000600:	b5b0      	push	{r4, r5, r7, lr}
 8000602:	b0a4      	sub	sp, #144	@ 0x90
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    char msg[128] = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2280      	movs	r2, #128	@ 0x80
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f009 fe19 	bl	800a248 <memset>
    const char *command = "P4=2000\r" ;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <StartWiFiTask+0xcc>)
 8000618:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    // 1. Initialisierung
    strcpy(msg, "Starte Initialisierung...\r\n");
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	4a2b      	ldr	r2, [pc, #172]	@ (80006d0 <StartWiFiTask+0xd0>)
 8000622:	461c      	mov	r4, r3
 8000624:	4615      	mov	r5, r2
 8000626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff fdca 	bl	80001d0 <strlen>
 800063c:	4603      	mov	r3, r0
 800063e:	b29a      	uxth	r2, r3
 8000640:	f107 010c 	add.w	r1, r7, #12
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	4822      	ldr	r0, [pc, #136]	@ (80006d4 <StartWiFiTask+0xd4>)
 800064a:	f004 fd31 	bl	80050b0 <HAL_UART_Transmit>

    if (osMutexAcquire(spiMutexHandle, HAL_MAX_DELAY) == osOK)
 800064e:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <StartWiFiTask+0xd8>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f04f 31ff 	mov.w	r1, #4294967295
 8000656:	4618      	mov	r0, r3
 8000658:	f006 f995 	bl	8006986 <osMutexAcquire>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d106      	bne.n	8000670 <StartWiFiTask+0x70>
    {
        wifi_init();
 8000662:	f005 ff89 	bl	8006578 <wifi_init>
        osMutexRelease(spiMutexHandle);
 8000666:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <StartWiFiTask+0xd8>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4618      	mov	r0, r3
 800066c:	f006 f9d6 	bl	8006a1c <osMutexRelease>

    // 2. Periodisches Senden alle 5 Sekunden
    for (;;)
    {
        // SPI-Mutex sichern
        osMutexAcquire(spiMutexHandle, HAL_MAX_DELAY);
 8000670:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <StartWiFiTask+0xd8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f04f 31ff 	mov.w	r1, #4294967295
 8000678:	4618      	mov	r0, r3
 800067a:	f006 f984 	bl	8006986 <osMutexAcquire>
        wifi_send_command(command, 1000);
 800067e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000682:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000686:	f005 ff95 	bl	80065b4 <wifi_send_command>

        snprintf(msg, sizeof(msg), "sende Command: %s\r\n", command);
 800068a:	f107 000c 	add.w	r0, r7, #12
 800068e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000692:	4a12      	ldr	r2, [pc, #72]	@ (80006dc <StartWiFiTask+0xdc>)
 8000694:	2180      	movs	r1, #128	@ 0x80
 8000696:	f009 fcc9 	bl	800a02c <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fd96 	bl	80001d0 <strlen>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	f107 010c 	add.w	r1, r7, #12
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295
 80006b0:	4808      	ldr	r0, [pc, #32]	@ (80006d4 <StartWiFiTask+0xd4>)
 80006b2:	f004 fcfd 	bl	80050b0 <HAL_UART_Transmit>

        osMutexRelease(spiMutexHandle);
 80006b6:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <StartWiFiTask+0xd8>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f006 f9ae 	bl	8006a1c <osMutexRelease>

        osDelay(5000);
 80006c0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80006c4:	f006 f8be 	bl	8006844 <osDelay>
        osMutexAcquire(spiMutexHandle, HAL_MAX_DELAY);
 80006c8:	bf00      	nop
 80006ca:	e7d1      	b.n	8000670 <StartWiFiTask+0x70>
 80006cc:	0800b21c 	.word	0x0800b21c
 80006d0:	0800b228 	.word	0x0800b228
 80006d4:	20000220 	.word	0x20000220
 80006d8:	2000081c 	.word	0x2000081c
 80006dc:	0800b244 	.word	0x0800b244

080006e0 <WiFiReceiveTask>:
}

osThreadId_t wifiReceiveTaskHandle;

void WiFiReceiveTask(void *argument)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80006ec:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80006f0:	6018      	str	r0, [r3, #0]
    uint8_t response[256];

    for (;;)
    {
        if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == 1)
 80006f2:	2102      	movs	r1, #2
 80006f4:	4820      	ldr	r0, [pc, #128]	@ (8000778 <WiFiReceiveTask+0x98>)
 80006f6:	f001 fd35 	bl	8002164 <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d136      	bne.n	800076e <WiFiReceiveTask+0x8e>
        {
            if (osMutexAcquire(spiMutexHandle, 0) == osOK)
 8000700:	4b1e      	ldr	r3, [pc, #120]	@ (800077c <WiFiReceiveTask+0x9c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f006 f93d 	bl	8006986 <osMutexAcquire>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d12d      	bne.n	800076e <WiFiReceiveTask+0x8e>
            {
                int received = wifi_read_data(response, sizeof(response), 1000);
 8000712:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000716:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800071a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800071e:	4618      	mov	r0, r3
 8000720:	f005 ff34 	bl	800658c <wifi_read_data>
 8000724:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
                osMutexRelease(spiMutexHandle);
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <WiFiReceiveTask+0x9c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4618      	mov	r0, r3
 800072e:	f006 f975 	bl	8006a1c <osMutexRelease>

                if (received > 0)
 8000732:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000736:	2b00      	cmp	r3, #0
 8000738:	dd19      	ble.n	800076e <WiFiReceiveTask+0x8e>
                {
                    WiFiMessage_t message;
                    memcpy(message.data, response, received);
 800073a:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 800073e:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	4618      	mov	r0, r3
 8000748:	f009 fe6b 	bl	800a422 <memcpy>
                    message.length = received;
 800074c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000750:	b29a      	uxth	r2, r3
 8000752:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000756:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800075a:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100

                    osMessageQueuePut(wifiMessageQueueHandle, &message, 0, 0);
 800075e:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <WiFiReceiveTask+0xa0>)
 8000760:	6818      	ldr	r0, [r3, #0]
 8000762:	f107 0108 	add.w	r1, r7, #8
 8000766:	2300      	movs	r3, #0
 8000768:	2200      	movs	r2, #0
 800076a:	f006 fa07 	bl	8006b7c <osMessageQueuePut>
                }
            }
        }

        osDelay(10);
 800076e:	200a      	movs	r0, #10
 8000770:	f006 f868 	bl	8006844 <osDelay>
        if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == 1)
 8000774:	e7bd      	b.n	80006f2 <WiFiReceiveTask+0x12>
 8000776:	bf00      	nop
 8000778:	48001000 	.word	0x48001000
 800077c:	2000081c 	.word	0x2000081c
 8000780:	20000820 	.word	0x20000820

08000784 <WiFiOutputTask>:


osThreadId_t wifiOutputTaskHandle;

void WiFiOutputTask(void *argument)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b0c4      	sub	sp, #272	@ 0x110
 8000788:	af00      	add	r7, sp, #0
 800078a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800078e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000792:	6018      	str	r0, [r3, #0]
	WiFiMessage_t receivedMessage;


    for (;;)
    {
        if (osMessageQueueGet(wifiMessageQueueHandle, &receivedMessage, NULL, osWaitForever) == osOK)
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <WiFiOutputTask+0x44>)
 8000796:	6818      	ldr	r0, [r3, #0]
 8000798:	f107 010c 	add.w	r1, r7, #12
 800079c:	f04f 33ff 	mov.w	r3, #4294967295
 80007a0:	2200      	movs	r2, #0
 80007a2:	f006 fa4b 	bl	8006c3c <osMessageQueueGet>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1f3      	bne.n	8000794 <WiFiOutputTask+0x10>
        {
        	HAL_UART_Transmit(&huart1, receivedMessage.data, receivedMessage.length, HAL_MAX_DELAY);
 80007ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80007b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80007b4:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 80007b8:	f107 010c 	add.w	r1, r7, #12
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295
 80007c0:	4802      	ldr	r0, [pc, #8]	@ (80007cc <WiFiOutputTask+0x48>)
 80007c2:	f004 fc75 	bl	80050b0 <HAL_UART_Transmit>
        if (osMessageQueueGet(wifiMessageQueueHandle, &receivedMessage, NULL, osWaitForever) == osOK)
 80007c6:	e7e5      	b.n	8000794 <WiFiOutputTask+0x10>
 80007c8:	20000820 	.word	0x20000820
 80007cc:	20000220 	.word	0x20000220

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d4:	f001 f8d1 	bl	800197a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d8:	f000 f87c 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007dc:	f000 fa84 	bl	8000ce8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80007e0:	f000 f8da 	bl	8000998 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80007e4:	f000 f910 	bl	8000a08 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80007e8:	f000 f94e 	bl	8000a88 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80007ec:	f000 f9b0 	bl	8000b50 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80007f0:	f000 f9ec 	bl	8000bcc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80007f4:	f000 fa1a 	bl	8000c2c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007f8:	f000 fa48 	bl	8000c8c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80007fc:	f000 f96a 	bl	8000ad4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000800:	f005 ff44 	bl	800668c <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  spiMutexHandle = osMutexNew(&spiMutex_attributes);
 8000804:	4820      	ldr	r0, [pc, #128]	@ (8000888 <main+0xb8>)
 8000806:	f006 f838 	bl	800687a <osMutexNew>
 800080a:	4603      	mov	r3, r0
 800080c:	4a1f      	ldr	r2, [pc, #124]	@ (800088c <main+0xbc>)
 800080e:	6013      	str	r3, [r2, #0]
  if (spiMutexHandle == NULL) {
 8000810:	4b1e      	ldr	r3, [pc, #120]	@ (800088c <main+0xbc>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d102      	bne.n	800081e <main+0x4e>
      printf("Fehler: SPI-Mutex konnte nicht erstellt werden!\r\n");
 8000818:	481d      	ldr	r0, [pc, #116]	@ (8000890 <main+0xc0>)
 800081a:	f009 fbff 	bl	800a01c <puts>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  wifiMessageQueueHandle = osMessageQueueNew(10, sizeof(WiFiMessage_t), NULL);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000824:	200a      	movs	r0, #10
 8000826:	f006 f936 	bl	8006a96 <osMessageQueueNew>
 800082a:	4603      	mov	r3, r0
 800082c:	4a19      	ldr	r2, [pc, #100]	@ (8000894 <main+0xc4>)
 800082e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000830:	4a19      	ldr	r2, [pc, #100]	@ (8000898 <main+0xc8>)
 8000832:	2100      	movs	r1, #0
 8000834:	4819      	ldr	r0, [pc, #100]	@ (800089c <main+0xcc>)
 8000836:	f005 ff73 	bl	8006720 <osThreadNew>
 800083a:	4603      	mov	r3, r0
 800083c:	4a18      	ldr	r2, [pc, #96]	@ (80008a0 <main+0xd0>)
 800083e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  helloTaskHandle = osThreadNew(HelloWorldTask, NULL, &helloTask_attributes);
 8000840:	4a18      	ldr	r2, [pc, #96]	@ (80008a4 <main+0xd4>)
 8000842:	2100      	movs	r1, #0
 8000844:	4818      	ldr	r0, [pc, #96]	@ (80008a8 <main+0xd8>)
 8000846:	f005 ff6b 	bl	8006720 <osThreadNew>
 800084a:	4603      	mov	r3, r0
 800084c:	4a17      	ldr	r2, [pc, #92]	@ (80008ac <main+0xdc>)
 800084e:	6013      	str	r3, [r2, #0]
  wifiTaskHandle = osThreadNew(StartWiFiTask, NULL, &wifiTask_attributes);
 8000850:	4a17      	ldr	r2, [pc, #92]	@ (80008b0 <main+0xe0>)
 8000852:	2100      	movs	r1, #0
 8000854:	4817      	ldr	r0, [pc, #92]	@ (80008b4 <main+0xe4>)
 8000856:	f005 ff63 	bl	8006720 <osThreadNew>
 800085a:	4603      	mov	r3, r0
 800085c:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <main+0xe8>)
 800085e:	6013      	str	r3, [r2, #0]
  wifiReceiveTaskHandle = osThreadNew(WiFiReceiveTask, NULL, &wifiReceiveTask_attributes);
 8000860:	4a16      	ldr	r2, [pc, #88]	@ (80008bc <main+0xec>)
 8000862:	2100      	movs	r1, #0
 8000864:	4816      	ldr	r0, [pc, #88]	@ (80008c0 <main+0xf0>)
 8000866:	f005 ff5b 	bl	8006720 <osThreadNew>
 800086a:	4603      	mov	r3, r0
 800086c:	4a15      	ldr	r2, [pc, #84]	@ (80008c4 <main+0xf4>)
 800086e:	6013      	str	r3, [r2, #0]
  wifiOutputTaskHandle = osThreadNew(WiFiOutputTask, NULL, &wifiOutputTask_attributes);
 8000870:	4a15      	ldr	r2, [pc, #84]	@ (80008c8 <main+0xf8>)
 8000872:	2100      	movs	r1, #0
 8000874:	4815      	ldr	r0, [pc, #84]	@ (80008cc <main+0xfc>)
 8000876:	f005 ff53 	bl	8006720 <osThreadNew>
 800087a:	4603      	mov	r3, r0
 800087c:	4a14      	ldr	r2, [pc, #80]	@ (80008d0 <main+0x100>)
 800087e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000880:	f005 ff28 	bl	80066d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <main+0xb4>
 8000888:	0800b4bc 	.word	0x0800b4bc
 800088c:	2000081c 	.word	0x2000081c
 8000890:	0800b2b0 	.word	0x0800b2b0
 8000894:	20000820 	.word	0x20000820
 8000898:	0800b408 	.word	0x0800b408
 800089c:	08001025 	.word	0x08001025
 80008a0:	20000814 	.word	0x20000814
 80008a4:	0800b498 	.word	0x0800b498
 80008a8:	080005ad 	.word	0x080005ad
 80008ac:	20000818 	.word	0x20000818
 80008b0:	0800b42c 	.word	0x0800b42c
 80008b4:	08000601 	.word	0x08000601
 80008b8:	20000824 	.word	0x20000824
 80008bc:	0800b450 	.word	0x0800b450
 80008c0:	080006e1 	.word	0x080006e1
 80008c4:	20000828 	.word	0x20000828
 80008c8:	0800b474 	.word	0x0800b474
 80008cc:	08000785 	.word	0x08000785
 80008d0:	2000082c 	.word	0x2000082c

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b096      	sub	sp, #88	@ 0x58
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	2244      	movs	r2, #68	@ 0x44
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f009 fcb0 	bl	800a248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	463b      	mov	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008fa:	f001 ff09 	bl	8002710 <HAL_PWREx_ControlVoltageScaling>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000904:	f000 fba8 	bl	8001058 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000908:	f001 fee4 	bl	80026d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800090c:	4b21      	ldr	r3, [pc, #132]	@ (8000994 <SystemClock_Config+0xc0>)
 800090e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000912:	4a20      	ldr	r2, [pc, #128]	@ (8000994 <SystemClock_Config+0xc0>)
 8000914:	f023 0318 	bic.w	r3, r3, #24
 8000918:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800091c:	2314      	movs	r3, #20
 800091e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000920:	2301      	movs	r3, #1
 8000922:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000924:	2301      	movs	r3, #1
 8000926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800092c:	2360      	movs	r3, #96	@ 0x60
 800092e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000930:	2302      	movs	r3, #2
 8000932:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000934:	2301      	movs	r3, #1
 8000936:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000938:	2301      	movs	r3, #1
 800093a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800093c:	2328      	movs	r3, #40	@ 0x28
 800093e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000940:	2307      	movs	r3, #7
 8000942:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000944:	2302      	movs	r3, #2
 8000946:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000948:	2302      	movs	r3, #2
 800094a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4618      	mov	r0, r3
 8000952:	f001 ffff 	bl	8002954 <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800095c:	f000 fb7c 	bl	8001058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000960:	230f      	movs	r3, #15
 8000962:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000964:	2303      	movs	r3, #3
 8000966:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000974:	463b      	mov	r3, r7
 8000976:	2104      	movs	r1, #4
 8000978:	4618      	mov	r0, r3
 800097a:	f002 fbc7 	bl	800310c <HAL_RCC_ClockConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000984:	f000 fb68 	bl	8001058 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000988:	f003 f900 	bl	8003b8c <HAL_RCCEx_EnableMSIPLLMode>
}
 800098c:	bf00      	nop
 800098e:	3758      	adds	r7, #88	@ 0x58
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40021000 	.word	0x40021000

08000998 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800099c:	4b18      	ldr	r3, [pc, #96]	@ (8000a00 <MX_DFSDM1_Init+0x68>)
 800099e:	4a19      	ldr	r2, [pc, #100]	@ (8000a04 <MX_DFSDM1_Init+0x6c>)
 80009a0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80009a2:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <MX_DFSDM1_Init+0x68>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80009a8:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <MX_DFSDM1_Init+0x68>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80009ae:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <MX_DFSDM1_Init+0x68>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <MX_DFSDM1_Init+0x68>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009ba:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <MX_DFSDM1_Init+0x68>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <MX_DFSDM1_Init+0x68>)
 80009c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009c6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80009c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a00 <MX_DFSDM1_Init+0x68>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80009ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <MX_DFSDM1_Init+0x68>)
 80009d0:	2204      	movs	r2, #4
 80009d2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a00 <MX_DFSDM1_Init+0x68>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80009da:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <MX_DFSDM1_Init+0x68>)
 80009dc:	2201      	movs	r2, #1
 80009de:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80009e0:	4b07      	ldr	r3, [pc, #28]	@ (8000a00 <MX_DFSDM1_Init+0x68>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <MX_DFSDM1_Init+0x68>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80009ec:	4804      	ldr	r0, [pc, #16]	@ (8000a00 <MX_DFSDM1_Init+0x68>)
 80009ee:	f001 f903 	bl	8001bf8 <HAL_DFSDM_ChannelInit>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80009f8:	f000 fb2e 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000088 	.word	0x20000088
 8000a04:	40016020 	.word	0x40016020

08000a08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a80 <MX_I2C2_Init+0x78>)
 8000a10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a14:	4a1b      	ldr	r2, [pc, #108]	@ (8000a84 <MX_I2C2_Init+0x7c>)
 8000a16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a18:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a24:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a42:	480e      	ldr	r0, [pc, #56]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a44:	f001 fbe1 	bl	800220a <HAL_I2C_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a4e:	f000 fb03 	bl	8001058 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4809      	ldr	r0, [pc, #36]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a56:	f001 fc73 	bl	8002340 <HAL_I2CEx_ConfigAnalogFilter>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a60:	f000 fafa 	bl	8001058 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a68:	f001 fcb5 	bl	80023d6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a72:	f000 faf1 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200000c0 	.word	0x200000c0
 8000a80:	40005800 	.word	0x40005800
 8000a84:	10d19ce4 	.word	0x10d19ce4

08000a88 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <MX_QUADSPI_Init+0x44>)
 8000a8e:	4a10      	ldr	r2, [pc, #64]	@ (8000ad0 <MX_QUADSPI_Init+0x48>)
 8000a90:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <MX_QUADSPI_Init+0x44>)
 8000a94:	2202      	movs	r2, #2
 8000a96:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <MX_QUADSPI_Init+0x44>)
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <MX_QUADSPI_Init+0x44>)
 8000aa0:	2210      	movs	r2, #16
 8000aa2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <MX_QUADSPI_Init+0x44>)
 8000aa6:	2217      	movs	r2, #23
 8000aa8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <MX_QUADSPI_Init+0x44>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <MX_QUADSPI_Init+0x44>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	@ (8000acc <MX_QUADSPI_Init+0x44>)
 8000ab8:	f001 fe90 	bl	80027dc <HAL_QSPI_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000ac2:	f000 fac9 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000114 	.word	0x20000114
 8000ad0:	a0001000 	.word	0xa0001000

08000ad4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <MX_SPI1_Init+0x74>)
 8000ada:	4a1c      	ldr	r2, [pc, #112]	@ (8000b4c <MX_SPI1_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <MX_SPI1_Init+0x74>)
 8000ae0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ae4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <MX_SPI1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000aec:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <MX_SPI1_Init+0x74>)
 8000aee:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000af2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af4:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <MX_SPI1_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000afa:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <MX_SPI1_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_SPI1_Init+0x74>)
 8000b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_SPI1_Init+0x74>)
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_SPI1_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <MX_SPI1_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <MX_SPI1_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b20:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_SPI1_Init+0x74>)
 8000b22:	2207      	movs	r2, #7
 8000b24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <MX_SPI1_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_SPI1_Init+0x74>)
 8000b2e:	2208      	movs	r2, #8
 8000b30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_SPI1_Init+0x74>)
 8000b34:	f003 fa0c 	bl	8003f50 <HAL_SPI_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f000 fa8b 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000158 	.word	0x20000158
 8000b4c:	40013000 	.word	0x40013000

08000b50 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b56:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc8 <MX_SPI3_Init+0x78>)
 8000b58:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b60:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b62:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b68:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b6a:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000b6e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b70:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b76:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b82:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b86:	2208      	movs	r2, #8
 8000b88:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000baa:	2208      	movs	r2, #8
 8000bac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000bb0:	f003 f9ce 	bl	8003f50 <HAL_SPI_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000bba:	f000 fa4d 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200001bc 	.word	0x200001bc
 8000bc8:	40003c00 	.word	0x40003c00

08000bcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <MX_USART1_UART_Init+0x58>)
 8000bd2:	4a15      	ldr	r2, [pc, #84]	@ (8000c28 <MX_USART1_UART_Init+0x5c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <MX_USART1_UART_Init+0x58>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <MX_USART1_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <MX_USART1_UART_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <MX_USART1_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <MX_USART1_UART_Init+0x58>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <MX_USART1_UART_Init+0x58>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <MX_USART1_UART_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <MX_USART1_UART_Init+0x58>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <MX_USART1_UART_Init+0x58>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <MX_USART1_UART_Init+0x58>)
 8000c10:	f004 fa00 	bl	8005014 <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c1a:	f000 fa1d 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000220 	.word	0x20000220
 8000c28:	40013800 	.word	0x40013800

08000c2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c32:	4a15      	ldr	r2, [pc, #84]	@ (8000c88 <MX_USART3_UART_Init+0x5c>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c36:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c70:	f004 f9d0 	bl	8005014 <HAL_UART_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c7a:	f000 f9ed 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200002a8 	.word	0x200002a8
 8000c88:	40004800 	.word	0x40004800

08000c8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c90:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c92:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c9a:	2206      	movs	r2, #6
 8000c9c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cd0:	f001 fbcd 	bl	800246e <HAL_PCD_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000cda:	f000 f9bd 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000330 	.word	0x20000330

08000ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	@ 0x28
 8000cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cfe:	4bbd      	ldr	r3, [pc, #756]	@ (8000ff4 <MX_GPIO_Init+0x30c>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	4abc      	ldr	r2, [pc, #752]	@ (8000ff4 <MX_GPIO_Init+0x30c>)
 8000d04:	f043 0310 	orr.w	r3, r3, #16
 8000d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0a:	4bba      	ldr	r3, [pc, #744]	@ (8000ff4 <MX_GPIO_Init+0x30c>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	f003 0310 	and.w	r3, r3, #16
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	4bb7      	ldr	r3, [pc, #732]	@ (8000ff4 <MX_GPIO_Init+0x30c>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	4ab6      	ldr	r2, [pc, #728]	@ (8000ff4 <MX_GPIO_Init+0x30c>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d22:	4bb4      	ldr	r3, [pc, #720]	@ (8000ff4 <MX_GPIO_Init+0x30c>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4bb1      	ldr	r3, [pc, #708]	@ (8000ff4 <MX_GPIO_Init+0x30c>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	4ab0      	ldr	r2, [pc, #704]	@ (8000ff4 <MX_GPIO_Init+0x30c>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3a:	4bae      	ldr	r3, [pc, #696]	@ (8000ff4 <MX_GPIO_Init+0x30c>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4bab      	ldr	r3, [pc, #684]	@ (8000ff4 <MX_GPIO_Init+0x30c>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	4aaa      	ldr	r2, [pc, #680]	@ (8000ff4 <MX_GPIO_Init+0x30c>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d52:	4ba8      	ldr	r3, [pc, #672]	@ (8000ff4 <MX_GPIO_Init+0x30c>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5e:	4ba5      	ldr	r3, [pc, #660]	@ (8000ff4 <MX_GPIO_Init+0x30c>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	4aa4      	ldr	r2, [pc, #656]	@ (8000ff4 <MX_GPIO_Init+0x30c>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6a:	4ba2      	ldr	r3, [pc, #648]	@ (8000ff4 <MX_GPIO_Init+0x30c>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000d7c:	489e      	ldr	r0, [pc, #632]	@ (8000ff8 <MX_GPIO_Init+0x310>)
 8000d7e:	f001 fa09 	bl	8002194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8c:	f001 fa02 	bl	8002194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d90:	2200      	movs	r2, #0
 8000d92:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000d96:	4899      	ldr	r0, [pc, #612]	@ (8000ffc <MX_GPIO_Init+0x314>)
 8000d98:	f001 f9fc 	bl	8002194 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000da2:	4897      	ldr	r0, [pc, #604]	@ (8001000 <MX_GPIO_Init+0x318>)
 8000da4:	f001 f9f6 	bl	8002194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dae:	4894      	ldr	r0, [pc, #592]	@ (8001000 <MX_GPIO_Init+0x318>)
 8000db0:	f001 f9f0 	bl	8002194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000dba:	4892      	ldr	r0, [pc, #584]	@ (8001004 <MX_GPIO_Init+0x31c>)
 8000dbc:	f001 f9ea 	bl	8002194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2120      	movs	r1, #32
 8000dc4:	488d      	ldr	r0, [pc, #564]	@ (8000ffc <MX_GPIO_Init+0x314>)
 8000dc6:	f001 f9e5 	bl	8002194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2101      	movs	r1, #1
 8000dce:	488a      	ldr	r0, [pc, #552]	@ (8000ff8 <MX_GPIO_Init+0x310>)
 8000dd0:	f001 f9e0 	bl	8002194 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000dd4:	f240 1315 	movw	r3, #277	@ 0x115
 8000dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4882      	ldr	r0, [pc, #520]	@ (8000ff8 <MX_GPIO_Init+0x310>)
 8000dee:	f001 f80f 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000df2:	236a      	movs	r3, #106	@ 0x6a
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	487c      	ldr	r0, [pc, #496]	@ (8000ff8 <MX_GPIO_Init+0x310>)
 8000e08:	f001 f802 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000e0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e12:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	4878      	ldr	r0, [pc, #480]	@ (8001004 <MX_GPIO_Init+0x31c>)
 8000e24:	f000 fff4 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000e28:	233f      	movs	r3, #63	@ 0x3f
 8000e2a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e2c:	230b      	movs	r3, #11
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4872      	ldr	r0, [pc, #456]	@ (8001004 <MX_GPIO_Init+0x31c>)
 8000e3c:	f000 ffe8 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000e40:	2303      	movs	r3, #3
 8000e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e50:	2308      	movs	r3, #8
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5e:	f000 ffd7 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000e62:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7e:	f000 ffc7 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000e82:	2308      	movs	r3, #8
 8000e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e92:	2301      	movs	r3, #1
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea0:	f000 ffb6 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000ea4:	2310      	movs	r3, #16
 8000ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ea8:	230b      	movs	r3, #11
 8000eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eba:	f000 ffa9 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	484a      	ldr	r0, [pc, #296]	@ (8000ffc <MX_GPIO_Init+0x314>)
 8000ed4:	f000 ff9c 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000edc:	230b      	movs	r3, #11
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4844      	ldr	r0, [pc, #272]	@ (8000ffc <MX_GPIO_Init+0x314>)
 8000eec:	f000 ff90 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ef0:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000ef4:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	483c      	ldr	r0, [pc, #240]	@ (8000ffc <MX_GPIO_Init+0x314>)
 8000f0a:	f000 ff81 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000f0e:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000f12:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f14:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	4836      	ldr	r0, [pc, #216]	@ (8001000 <MX_GPIO_Init+0x318>)
 8000f26:	f000 ff73 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000f2a:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	482f      	ldr	r0, [pc, #188]	@ (8001000 <MX_GPIO_Init+0x318>)
 8000f44:	f000 ff64 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000f48:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4828      	ldr	r0, [pc, #160]	@ (8001004 <MX_GPIO_Init+0x31c>)
 8000f62:	f000 ff55 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000f66:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4821      	ldr	r0, [pc, #132]	@ (8001004 <MX_GPIO_Init+0x31c>)
 8000f7e:	f000 ff47 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000f82:	2302      	movs	r3, #2
 8000f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f92:	2305      	movs	r3, #5
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4818      	ldr	r0, [pc, #96]	@ (8001000 <MX_GPIO_Init+0x318>)
 8000f9e:	f000 ff37 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000fa2:	2378      	movs	r3, #120	@ 0x78
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4810      	ldr	r0, [pc, #64]	@ (8001000 <MX_GPIO_Init+0x318>)
 8000fbe:	f000 ff27 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000fc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc8:	2312      	movs	r3, #18
 8000fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4807      	ldr	r0, [pc, #28]	@ (8000ffc <MX_GPIO_Init+0x314>)
 8000fe0:	f000 ff16 	bl	8001e10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2105      	movs	r1, #5
 8000fe8:	2017      	movs	r0, #23
 8000fea:	f000 fddb 	bl	8001ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fee:	2017      	movs	r0, #23
 8000ff0:	e00a      	b.n	8001008 <MX_GPIO_Init+0x320>
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	48001000 	.word	0x48001000
 8000ffc:	48000400 	.word	0x48000400
 8001000:	48000c00 	.word	0x48000c00
 8001004:	48000800 	.word	0x48000800
 8001008:	f000 fde8 	bl	8001bdc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	2105      	movs	r1, #5
 8001010:	2028      	movs	r0, #40	@ 0x28
 8001012:	f000 fdc7 	bl	8001ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001016:	2028      	movs	r0, #40	@ 0x28
 8001018:	f000 fde0 	bl	8001bdc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800101c:	bf00      	nop
 800101e:	3728      	adds	r7, #40	@ 0x28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800102c:	2001      	movs	r0, #1
 800102e:	f005 fc09 	bl	8006844 <osDelay>
 8001032:	e7fb      	b.n	800102c <StartDefaultTask+0x8>

08001034 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d101      	bne.n	800104a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001046:	f000 fcb1 	bl	80019ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40001000 	.word	0x40001000

08001058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
}
 800105e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <Error_Handler+0x8>

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <HAL_MspInit+0x4c>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800106e:	4a10      	ldr	r2, [pc, #64]	@ (80010b0 <HAL_MspInit+0x4c>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6613      	str	r3, [r2, #96]	@ 0x60
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <HAL_MspInit+0x4c>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <HAL_MspInit+0x4c>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <HAL_MspInit+0x4c>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800108c:	6593      	str	r3, [r2, #88]	@ 0x58
 800108e:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <HAL_MspInit+0x4c>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	210f      	movs	r1, #15
 800109e:	f06f 0001 	mvn.w	r0, #1
 80010a2:	f000 fd7f 	bl	8001ba4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000

080010b4 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0ac      	sub	sp, #176	@ 0xb0
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2288      	movs	r2, #136	@ 0x88
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f009 f8b7 	bl	800a248 <memset>
  if(DFSDM1_Init == 0)
 80010da:	4b25      	ldr	r3, [pc, #148]	@ (8001170 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d142      	bne.n	8001168 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80010e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4618      	mov	r0, r3
 80010f4:	f002 fa60 	bl	80035b8 <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80010fe:	f7ff ffab 	bl	8001058 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001106:	4a1b      	ldr	r2, [pc, #108]	@ (8001174 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001108:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800110c:	6613      	str	r3, [r2, #96]	@ 0x60
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001112:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800111a:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	4a15      	ldr	r2, [pc, #84]	@ (8001174 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001120:	f043 0310 	orr.w	r3, r3, #16
 8001124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001126:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001132:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001136:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800114c:	2306      	movs	r3, #6
 800114e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001152:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001156:	4619      	mov	r1, r3
 8001158:	4807      	ldr	r0, [pc, #28]	@ (8001178 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800115a:	f000 fe59 	bl	8001e10 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800115e:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	3301      	adds	r3, #1
 8001164:	4a02      	ldr	r2, [pc, #8]	@ (8001170 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001166:	6013      	str	r3, [r2, #0]
  }

}
 8001168:	bf00      	nop
 800116a:	37b0      	adds	r7, #176	@ 0xb0
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000830 	.word	0x20000830
 8001174:	40021000 	.word	0x40021000
 8001178:	48001000 	.word	0x48001000

0800117c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b0ac      	sub	sp, #176	@ 0xb0
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2288      	movs	r2, #136	@ 0x88
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f009 f853 	bl	800a248 <memset>
  if(hi2c->Instance==I2C2)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a21      	ldr	r2, [pc, #132]	@ (800122c <HAL_I2C_MspInit+0xb0>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d13b      	bne.n	8001224 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011ac:	2380      	movs	r3, #128	@ 0x80
 80011ae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 f9fd 	bl	80035b8 <HAL_RCCEx_PeriphCLKConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011c4:	f7ff ff48 	bl	8001058 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c8:	4b19      	ldr	r3, [pc, #100]	@ (8001230 <HAL_I2C_MspInit+0xb4>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011cc:	4a18      	ldr	r2, [pc, #96]	@ (8001230 <HAL_I2C_MspInit+0xb4>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d4:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <HAL_I2C_MspInit+0xb4>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80011e0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e8:	2312      	movs	r3, #18
 80011ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011fa:	2304      	movs	r3, #4
 80011fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001200:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001204:	4619      	mov	r1, r3
 8001206:	480b      	ldr	r0, [pc, #44]	@ (8001234 <HAL_I2C_MspInit+0xb8>)
 8001208:	f000 fe02 	bl	8001e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800120c:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <HAL_I2C_MspInit+0xb4>)
 800120e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001210:	4a07      	ldr	r2, [pc, #28]	@ (8001230 <HAL_I2C_MspInit+0xb4>)
 8001212:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001216:	6593      	str	r3, [r2, #88]	@ 0x58
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <HAL_I2C_MspInit+0xb4>)
 800121a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001224:	bf00      	nop
 8001226:	37b0      	adds	r7, #176	@ 0xb0
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40005800 	.word	0x40005800
 8001230:	40021000 	.word	0x40021000
 8001234:	48000400 	.word	0x48000400

08001238 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	@ 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a17      	ldr	r2, [pc, #92]	@ (80012b4 <HAL_QSPI_MspInit+0x7c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d128      	bne.n	80012ac <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <HAL_QSPI_MspInit+0x80>)
 800125c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800125e:	4a16      	ldr	r2, [pc, #88]	@ (80012b8 <HAL_QSPI_MspInit+0x80>)
 8001260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001264:	6513      	str	r3, [r2, #80]	@ 0x50
 8001266:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <HAL_QSPI_MspInit+0x80>)
 8001268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800126a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001272:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <HAL_QSPI_MspInit+0x80>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	4a10      	ldr	r2, [pc, #64]	@ (80012b8 <HAL_QSPI_MspInit+0x80>)
 8001278:	f043 0310 	orr.w	r3, r3, #16
 800127c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <HAL_QSPI_MspInit+0x80>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800128a:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800128e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800129c:	230a      	movs	r3, #10
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4805      	ldr	r0, [pc, #20]	@ (80012bc <HAL_QSPI_MspInit+0x84>)
 80012a8:	f000 fdb2 	bl	8001e10 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	@ 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	a0001000 	.word	0xa0001000
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48001000 	.word	0x48001000

080012c0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08c      	sub	sp, #48	@ 0x30
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a2f      	ldr	r2, [pc, #188]	@ (800139c <HAL_SPI_MspInit+0xdc>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d129      	bne.n	8001336 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012e2:	4b2f      	ldr	r3, [pc, #188]	@ (80013a0 <HAL_SPI_MspInit+0xe0>)
 80012e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e6:	4a2e      	ldr	r2, [pc, #184]	@ (80013a0 <HAL_SPI_MspInit+0xe0>)
 80012e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ee:	4b2c      	ldr	r3, [pc, #176]	@ (80013a0 <HAL_SPI_MspInit+0xe0>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012f6:	61bb      	str	r3, [r7, #24]
 80012f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b29      	ldr	r3, [pc, #164]	@ (80013a0 <HAL_SPI_MspInit+0xe0>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	4a28      	ldr	r2, [pc, #160]	@ (80013a0 <HAL_SPI_MspInit+0xe0>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001306:	4b26      	ldr	r3, [pc, #152]	@ (80013a0 <HAL_SPI_MspInit+0xe0>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001312:	23e0      	movs	r3, #224	@ 0xe0
 8001314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001322:	2305      	movs	r3, #5
 8001324:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001330:	f000 fd6e 	bl	8001e10 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001334:	e02d      	b.n	8001392 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a1a      	ldr	r2, [pc, #104]	@ (80013a4 <HAL_SPI_MspInit+0xe4>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d128      	bne.n	8001392 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001340:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <HAL_SPI_MspInit+0xe0>)
 8001342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001344:	4a16      	ldr	r2, [pc, #88]	@ (80013a0 <HAL_SPI_MspInit+0xe0>)
 8001346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800134a:	6593      	str	r3, [r2, #88]	@ 0x58
 800134c:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <HAL_SPI_MspInit+0xe0>)
 800134e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001350:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <HAL_SPI_MspInit+0xe0>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135c:	4a10      	ldr	r2, [pc, #64]	@ (80013a0 <HAL_SPI_MspInit+0xe0>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001364:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <HAL_SPI_MspInit+0xe0>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001370:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001382:	2306      	movs	r3, #6
 8001384:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	4619      	mov	r1, r3
 800138c:	4806      	ldr	r0, [pc, #24]	@ (80013a8 <HAL_SPI_MspInit+0xe8>)
 800138e:	f000 fd3f 	bl	8001e10 <HAL_GPIO_Init>
}
 8001392:	bf00      	nop
 8001394:	3730      	adds	r7, #48	@ 0x30
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40013000 	.word	0x40013000
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40003c00 	.word	0x40003c00
 80013a8:	48000800 	.word	0x48000800

080013ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b0ae      	sub	sp, #184	@ 0xb8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	2288      	movs	r2, #136	@ 0x88
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f008 ff3b 	bl	800a248 <memset>
  if(huart->Instance==USART1)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a42      	ldr	r2, [pc, #264]	@ (80014e0 <HAL_UART_MspInit+0x134>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d13b      	bne.n	8001454 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013dc:	2301      	movs	r3, #1
 80013de:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013e0:	2300      	movs	r3, #0
 80013e2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 f8e5 	bl	80035b8 <HAL_RCCEx_PeriphCLKConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013f4:	f7ff fe30 	bl	8001058 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f8:	4b3a      	ldr	r3, [pc, #232]	@ (80014e4 <HAL_UART_MspInit+0x138>)
 80013fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013fc:	4a39      	ldr	r2, [pc, #228]	@ (80014e4 <HAL_UART_MspInit+0x138>)
 80013fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001402:	6613      	str	r3, [r2, #96]	@ 0x60
 8001404:	4b37      	ldr	r3, [pc, #220]	@ (80014e4 <HAL_UART_MspInit+0x138>)
 8001406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001408:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140c:	61bb      	str	r3, [r7, #24]
 800140e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	4b34      	ldr	r3, [pc, #208]	@ (80014e4 <HAL_UART_MspInit+0x138>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001414:	4a33      	ldr	r2, [pc, #204]	@ (80014e4 <HAL_UART_MspInit+0x138>)
 8001416:	f043 0302 	orr.w	r3, r3, #2
 800141a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800141c:	4b31      	ldr	r3, [pc, #196]	@ (80014e4 <HAL_UART_MspInit+0x138>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001428:	23c0      	movs	r3, #192	@ 0xc0
 800142a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001440:	2307      	movs	r3, #7
 8001442:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800144a:	4619      	mov	r1, r3
 800144c:	4826      	ldr	r0, [pc, #152]	@ (80014e8 <HAL_UART_MspInit+0x13c>)
 800144e:	f000 fcdf 	bl	8001e10 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001452:	e040      	b.n	80014d6 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a24      	ldr	r2, [pc, #144]	@ (80014ec <HAL_UART_MspInit+0x140>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d13b      	bne.n	80014d6 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800145e:	2304      	movs	r3, #4
 8001460:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001462:	2300      	movs	r3, #0
 8001464:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	4618      	mov	r0, r3
 800146c:	f002 f8a4 	bl	80035b8 <HAL_RCCEx_PeriphCLKConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001476:	f7ff fdef 	bl	8001058 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800147a:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <HAL_UART_MspInit+0x138>)
 800147c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147e:	4a19      	ldr	r2, [pc, #100]	@ (80014e4 <HAL_UART_MspInit+0x138>)
 8001480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001484:	6593      	str	r3, [r2, #88]	@ 0x58
 8001486:	4b17      	ldr	r3, [pc, #92]	@ (80014e4 <HAL_UART_MspInit+0x138>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001492:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <HAL_UART_MspInit+0x138>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	4a13      	ldr	r2, [pc, #76]	@ (80014e4 <HAL_UART_MspInit+0x138>)
 8001498:	f043 0308 	orr.w	r3, r3, #8
 800149c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <HAL_UART_MspInit+0x138>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80014aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014c4:	2307      	movs	r3, #7
 80014c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ca:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4807      	ldr	r0, [pc, #28]	@ (80014f0 <HAL_UART_MspInit+0x144>)
 80014d2:	f000 fc9d 	bl	8001e10 <HAL_GPIO_Init>
}
 80014d6:	bf00      	nop
 80014d8:	37b8      	adds	r7, #184	@ 0xb8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40013800 	.word	0x40013800
 80014e4:	40021000 	.word	0x40021000
 80014e8:	48000400 	.word	0x48000400
 80014ec:	40004800 	.word	0x40004800
 80014f0:	48000c00 	.word	0x48000c00

080014f4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b0ac      	sub	sp, #176	@ 0xb0
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2288      	movs	r2, #136	@ 0x88
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f008 fe97 	bl	800a248 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001522:	d17c      	bne.n	800161e <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001524:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001528:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800152a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800152e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001532:	2301      	movs	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001536:	2301      	movs	r3, #1
 8001538:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800153a:	2318      	movs	r3, #24
 800153c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800153e:	2307      	movs	r3, #7
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001542:	2302      	movs	r3, #2
 8001544:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001546:	2302      	movs	r3, #2
 8001548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800154a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800154e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4618      	mov	r0, r3
 8001556:	f002 f82f 	bl	80035b8 <HAL_RCCEx_PeriphCLKConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001560:	f7ff fd7a 	bl	8001058 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	4b30      	ldr	r3, [pc, #192]	@ (8001628 <HAL_PCD_MspInit+0x134>)
 8001566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001568:	4a2f      	ldr	r2, [pc, #188]	@ (8001628 <HAL_PCD_MspInit+0x134>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001570:	4b2d      	ldr	r3, [pc, #180]	@ (8001628 <HAL_PCD_MspInit+0x134>)
 8001572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800157c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001580:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001594:	4619      	mov	r1, r3
 8001596:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800159a:	f000 fc39 	bl	8001e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800159e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80015a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015b8:	230a      	movs	r3, #10
 80015ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015c2:	4619      	mov	r1, r3
 80015c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c8:	f000 fc22 	bl	8001e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <HAL_PCD_MspInit+0x134>)
 80015ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d0:	4a15      	ldr	r2, [pc, #84]	@ (8001628 <HAL_PCD_MspInit+0x134>)
 80015d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <HAL_PCD_MspInit+0x134>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e4:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <HAL_PCD_MspInit+0x134>)
 80015e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d114      	bne.n	800161a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <HAL_PCD_MspInit+0x134>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001628 <HAL_PCD_MspInit+0x134>)
 80015f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80015fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <HAL_PCD_MspInit+0x134>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001608:	f001 f8d8 	bl	80027bc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_PCD_MspInit+0x134>)
 800160e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001610:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <HAL_PCD_MspInit+0x134>)
 8001612:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001616:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001618:	e001      	b.n	800161e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800161a:	f001 f8cf 	bl	80027bc <HAL_PWREx_EnableVddUSB>
}
 800161e:	bf00      	nop
 8001620:	37b0      	adds	r7, #176	@ 0xb0
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000

0800162c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08e      	sub	sp, #56	@ 0x38
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800163a:	4b34      	ldr	r3, [pc, #208]	@ (800170c <HAL_InitTick+0xe0>)
 800163c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163e:	4a33      	ldr	r2, [pc, #204]	@ (800170c <HAL_InitTick+0xe0>)
 8001640:	f043 0310 	orr.w	r3, r3, #16
 8001644:	6593      	str	r3, [r2, #88]	@ 0x58
 8001646:	4b31      	ldr	r3, [pc, #196]	@ (800170c <HAL_InitTick+0xe0>)
 8001648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001652:	f107 0210 	add.w	r2, r7, #16
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f001 ff19 	bl	8003494 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001668:	2b00      	cmp	r3, #0
 800166a:	d103      	bne.n	8001674 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800166c:	f001 fee6 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 8001670:	6378      	str	r0, [r7, #52]	@ 0x34
 8001672:	e004      	b.n	800167e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001674:	f001 fee2 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 8001678:	4603      	mov	r3, r0
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800167e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001680:	4a23      	ldr	r2, [pc, #140]	@ (8001710 <HAL_InitTick+0xe4>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	0c9b      	lsrs	r3, r3, #18
 8001688:	3b01      	subs	r3, #1
 800168a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800168c:	4b21      	ldr	r3, [pc, #132]	@ (8001714 <HAL_InitTick+0xe8>)
 800168e:	4a22      	ldr	r2, [pc, #136]	@ (8001718 <HAL_InitTick+0xec>)
 8001690:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001692:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <HAL_InitTick+0xe8>)
 8001694:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001698:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800169a:	4a1e      	ldr	r2, [pc, #120]	@ (8001714 <HAL_InitTick+0xe8>)
 800169c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800169e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001714 <HAL_InitTick+0xe8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <HAL_InitTick+0xe8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ac:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <HAL_InitTick+0xe8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016b2:	4818      	ldr	r0, [pc, #96]	@ (8001714 <HAL_InitTick+0xe8>)
 80016b4:	f003 f9e8 	bl	8004a88 <HAL_TIM_Base_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d11b      	bne.n	80016fe <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016c6:	4813      	ldr	r0, [pc, #76]	@ (8001714 <HAL_InitTick+0xe8>)
 80016c8:	f003 fa40 	bl	8004b4c <HAL_TIM_Base_Start_IT>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d111      	bne.n	80016fe <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016da:	2036      	movs	r0, #54	@ 0x36
 80016dc:	f000 fa7e 	bl	8001bdc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b0f      	cmp	r3, #15
 80016e4:	d808      	bhi.n	80016f8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016e6:	2200      	movs	r2, #0
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	2036      	movs	r0, #54	@ 0x36
 80016ec:	f000 fa5a 	bl	8001ba4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016f0:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <HAL_InitTick+0xf0>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e002      	b.n	80016fe <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016fe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001702:	4618      	mov	r0, r3
 8001704:	3738      	adds	r7, #56	@ 0x38
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000
 8001710:	431bde83 	.word	0x431bde83
 8001714:	20000834 	.word	0x20000834
 8001718:	40001000 	.word	0x40001000
 800171c:	20000004 	.word	0x20000004

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <NMI_Handler+0x4>

08001728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <MemManage_Handler+0x4>

08001738 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <BusFault_Handler+0x4>

08001740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <UsageFault_Handler+0x4>

08001748 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800175a:	2020      	movs	r0, #32
 800175c:	f000 fd32 	bl	80021c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001760:	2040      	movs	r0, #64	@ 0x40
 8001762:	f000 fd2f 	bl	80021c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001766:	2080      	movs	r0, #128	@ 0x80
 8001768:	f000 fd2c 	bl	80021c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800176c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001770:	f000 fd28 	bl	80021c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}

08001778 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800177c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001780:	f000 fd20 	bl	80021c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001784:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001788:	f000 fd1c 	bl	80021c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800178c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001790:	f000 fd18 	bl	80021c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001794:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001798:	f000 fd14 	bl	80021c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800179c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80017a0:	f000 fd10 	bl	80021c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017ac:	4802      	ldr	r0, [pc, #8]	@ (80017b8 <TIM6_DAC_IRQHandler+0x10>)
 80017ae:	f003 fa3d 	bl	8004c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000834 	.word	0x20000834

080017bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	e00a      	b.n	80017e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ce:	f3af 8000 	nop.w
 80017d2:	4601      	mov	r1, r0
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	60ba      	str	r2, [r7, #8]
 80017da:	b2ca      	uxtb	r2, r1
 80017dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dbf0      	blt.n	80017ce <_read+0x12>
  }

  return len;
 80017ec:	687b      	ldr	r3, [r7, #4]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	e009      	b.n	800181c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	60ba      	str	r2, [r7, #8]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3301      	adds	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	dbf1      	blt.n	8001808 <_write+0x12>
  }
  return len;
 8001824:	687b      	ldr	r3, [r7, #4]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_close>:

int _close(int file)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001856:	605a      	str	r2, [r3, #4]
  return 0;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <_isatty>:

int _isatty(int file)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a0:	4a14      	ldr	r2, [pc, #80]	@ (80018f4 <_sbrk+0x5c>)
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <_sbrk+0x60>)
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ac:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b4:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <_sbrk+0x64>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	@ (8001900 <_sbrk+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ba:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d207      	bcs.n	80018d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c8:	f008 fd7e 	bl	800a3c8 <__errno>
 80018cc:	4603      	mov	r3, r0
 80018ce:	220c      	movs	r2, #12
 80018d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	e009      	b.n	80018ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018de:	4b07      	ldr	r3, [pc, #28]	@ (80018fc <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <_sbrk+0x64>)
 80018e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ea:	68fb      	ldr	r3, [r7, #12]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20018000 	.word	0x20018000
 80018f8:	00000400 	.word	0x00000400
 80018fc:	20000880 	.word	0x20000880
 8001900:	200097f0 	.word	0x200097f0

08001904 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <SystemInit+0x20>)
 800190a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800190e:	4a05      	ldr	r2, [pc, #20]	@ (8001924 <SystemInit+0x20>)
 8001910:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001914:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001928:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001960 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800192c:	f7ff ffea 	bl	8001904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001930:	480c      	ldr	r0, [pc, #48]	@ (8001964 <LoopForever+0x6>)
  ldr r1, =_edata
 8001932:	490d      	ldr	r1, [pc, #52]	@ (8001968 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001934:	4a0d      	ldr	r2, [pc, #52]	@ (800196c <LoopForever+0xe>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001938:	e002      	b.n	8001940 <LoopCopyDataInit>

0800193a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800193c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193e:	3304      	adds	r3, #4

08001940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001944:	d3f9      	bcc.n	800193a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001946:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001948:	4c0a      	ldr	r4, [pc, #40]	@ (8001974 <LoopForever+0x16>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800194c:	e001      	b.n	8001952 <LoopFillZerobss>

0800194e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001950:	3204      	adds	r2, #4

08001952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001954:	d3fb      	bcc.n	800194e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001956:	f008 fd3d 	bl	800a3d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800195a:	f7fe ff39 	bl	80007d0 <main>

0800195e <LoopForever>:

LoopForever:
    b LoopForever
 800195e:	e7fe      	b.n	800195e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001960:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001968:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800196c:	0800b55c 	.word	0x0800b55c
  ldr r2, =_sbss
 8001970:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001974:	200097ec 	.word	0x200097ec

08001978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC1_2_IRQHandler>

0800197a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001984:	2003      	movs	r0, #3
 8001986:	f000 f902 	bl	8001b8e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800198a:	200f      	movs	r0, #15
 800198c:	f7ff fe4e 	bl	800162c <HAL_InitTick>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	71fb      	strb	r3, [r7, #7]
 800199a:	e001      	b.n	80019a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800199c:	f7ff fb62 	bl	8001064 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019a0:	79fb      	ldrb	r3, [r7, #7]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_IncTick+0x20>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <HAL_IncTick+0x24>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	4a04      	ldr	r2, [pc, #16]	@ (80019d0 <HAL_IncTick+0x24>)
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000008 	.word	0x20000008
 80019d0:	20000884 	.word	0x20000884

080019d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return uwTick;
 80019d8:	4b03      	ldr	r3, [pc, #12]	@ (80019e8 <HAL_GetTick+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000884 	.word	0x20000884

080019ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f4:	f7ff ffee 	bl	80019d4 <HAL_GetTick>
 80019f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a04:	d005      	beq.n	8001a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a06:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <HAL_Delay+0x44>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4413      	add	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a12:	bf00      	nop
 8001a14:	f7ff ffde 	bl	80019d4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d8f7      	bhi.n	8001a14 <HAL_Delay+0x28>
  {
  }
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000008 	.word	0x20000008

08001a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a50:	4013      	ands	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a66:	4a04      	ldr	r2, [pc, #16]	@ (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	60d3      	str	r3, [r2, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a80:	4b04      	ldr	r3, [pc, #16]	@ (8001a94 <__NVIC_GetPriorityGrouping+0x18>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 0307 	and.w	r3, r3, #7
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	db0b      	blt.n	8001ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	f003 021f 	and.w	r2, r3, #31
 8001ab0:	4907      	ldr	r1, [pc, #28]	@ (8001ad0 <__NVIC_EnableIRQ+0x38>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	2001      	movs	r0, #1
 8001aba:	fa00 f202 	lsl.w	r2, r0, r2
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000e100 	.word	0xe000e100

08001ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	db0a      	blt.n	8001afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	490c      	ldr	r1, [pc, #48]	@ (8001b20 <__NVIC_SetPriority+0x4c>)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	0112      	lsls	r2, r2, #4
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	440b      	add	r3, r1
 8001af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001afc:	e00a      	b.n	8001b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4908      	ldr	r1, [pc, #32]	@ (8001b24 <__NVIC_SetPriority+0x50>)
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	3b04      	subs	r3, #4
 8001b0c:	0112      	lsls	r2, r2, #4
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	440b      	add	r3, r1
 8001b12:	761a      	strb	r2, [r3, #24]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000e100 	.word	0xe000e100
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	@ 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f1c3 0307 	rsb	r3, r3, #7
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	bf28      	it	cs
 8001b46:	2304      	movcs	r3, #4
 8001b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d902      	bls.n	8001b58 <NVIC_EncodePriority+0x30>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3b03      	subs	r3, #3
 8001b56:	e000      	b.n	8001b5a <NVIC_EncodePriority+0x32>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	43d9      	mvns	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	4313      	orrs	r3, r2
         );
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3724      	adds	r7, #36	@ 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ff4c 	bl	8001a34 <__NVIC_SetPriorityGrouping>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb6:	f7ff ff61 	bl	8001a7c <__NVIC_GetPriorityGrouping>
 8001bba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	68b9      	ldr	r1, [r7, #8]
 8001bc0:	6978      	ldr	r0, [r7, #20]
 8001bc2:	f7ff ffb1 	bl	8001b28 <NVIC_EncodePriority>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff ff80 	bl	8001ad4 <__NVIC_SetPriority>
}
 8001bd4:	bf00      	nop
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ff54 	bl	8001a98 <__NVIC_EnableIRQ>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e0ac      	b.n	8001d64 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f8b2 	bl	8001d78 <DFSDM_GetChannelFromInstance>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4a55      	ldr	r2, [pc, #340]	@ (8001d6c <HAL_DFSDM_ChannelInit+0x174>)
 8001c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e09f      	b.n	8001d64 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff fa45 	bl	80010b4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001c2a:	4b51      	ldr	r3, [pc, #324]	@ (8001d70 <HAL_DFSDM_ChannelInit+0x178>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	4a4f      	ldr	r2, [pc, #316]	@ (8001d70 <HAL_DFSDM_ChannelInit+0x178>)
 8001c32:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001c34:	4b4e      	ldr	r3, [pc, #312]	@ (8001d70 <HAL_DFSDM_ChannelInit+0x178>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d125      	bne.n	8001c88 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001c3c:	4b4d      	ldr	r3, [pc, #308]	@ (8001d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a4c      	ldr	r2, [pc, #304]	@ (8001d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001c46:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001c48:	4b4a      	ldr	r3, [pc, #296]	@ (8001d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4948      	ldr	r1, [pc, #288]	@ (8001d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001c56:	4b47      	ldr	r3, [pc, #284]	@ (8001d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a46      	ldr	r2, [pc, #280]	@ (8001d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c5c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001c60:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	791b      	ldrb	r3, [r3, #4]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d108      	bne.n	8001c7c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001c6a:	4b42      	ldr	r3, [pc, #264]	@ (8001d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	493f      	ldr	r1, [pc, #252]	@ (8001d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a3c      	ldr	r2, [pc, #240]	@ (8001d74 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c86:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001c96:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6819      	ldr	r1, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001ca6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001cac:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 020f 	bic.w	r2, r2, #15
 8001cc4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6819      	ldr	r1, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001cec:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6899      	ldr	r1, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f002 0207 	and.w	r2, r2, #7
 8001d18:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6859      	ldr	r1, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d24:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d44:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f810 	bl	8001d78 <DFSDM_GetChannelFromInstance>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4904      	ldr	r1, [pc, #16]	@ (8001d6c <HAL_DFSDM_ChannelInit+0x174>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	2000088c 	.word	0x2000088c
 8001d70:	20000888 	.word	0x20000888
 8001d74:	40016000 	.word	0x40016000

08001d78 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a1c      	ldr	r2, [pc, #112]	@ (8001df4 <DFSDM_GetChannelFromInstance+0x7c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d102      	bne.n	8001d8e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	e02b      	b.n	8001de6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a19      	ldr	r2, [pc, #100]	@ (8001df8 <DFSDM_GetChannelFromInstance+0x80>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d102      	bne.n	8001d9c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001d96:	2301      	movs	r3, #1
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	e024      	b.n	8001de6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a17      	ldr	r2, [pc, #92]	@ (8001dfc <DFSDM_GetChannelFromInstance+0x84>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d102      	bne.n	8001daa <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001da4:	2302      	movs	r3, #2
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	e01d      	b.n	8001de6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a14      	ldr	r2, [pc, #80]	@ (8001e00 <DFSDM_GetChannelFromInstance+0x88>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d102      	bne.n	8001db8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001db2:	2304      	movs	r3, #4
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	e016      	b.n	8001de6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a12      	ldr	r2, [pc, #72]	@ (8001e04 <DFSDM_GetChannelFromInstance+0x8c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d102      	bne.n	8001dc6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001dc0:	2305      	movs	r3, #5
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	e00f      	b.n	8001de6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8001e08 <DFSDM_GetChannelFromInstance+0x90>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d102      	bne.n	8001dd4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001dce:	2306      	movs	r3, #6
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	e008      	b.n	8001de6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8001e0c <DFSDM_GetChannelFromInstance+0x94>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d102      	bne.n	8001de2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001ddc:	2307      	movs	r3, #7
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	e001      	b.n	8001de6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001de2:	2303      	movs	r3, #3
 8001de4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	40016000 	.word	0x40016000
 8001df8:	40016020 	.word	0x40016020
 8001dfc:	40016040 	.word	0x40016040
 8001e00:	40016080 	.word	0x40016080
 8001e04:	400160a0 	.word	0x400160a0
 8001e08:	400160c0 	.word	0x400160c0
 8001e0c:	400160e0 	.word	0x400160e0

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1e:	e17f      	b.n	8002120 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	2101      	movs	r1, #1
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8171 	beq.w	800211a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d005      	beq.n	8001e50 <HAL_GPIO_Init+0x40>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d130      	bne.n	8001eb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e86:	2201      	movs	r2, #1
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	f003 0201 	and.w	r2, r3, #1
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d118      	bne.n	8001ef0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	08db      	lsrs	r3, r3, #3
 8001eda:	f003 0201 	and.w	r2, r3, #1
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d017      	beq.n	8001f2c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d123      	bne.n	8001f80 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	220f      	movs	r2, #15
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	08da      	lsrs	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3208      	adds	r2, #8
 8001f7a:	6939      	ldr	r1, [r7, #16]
 8001f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0203 	and.w	r2, r3, #3
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80ac 	beq.w	800211a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8002140 <HAL_GPIO_Init+0x330>)
 8001fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fc6:	4a5e      	ldr	r2, [pc, #376]	@ (8002140 <HAL_GPIO_Init+0x330>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fce:	4b5c      	ldr	r3, [pc, #368]	@ (8002140 <HAL_GPIO_Init+0x330>)
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fda:	4a5a      	ldr	r2, [pc, #360]	@ (8002144 <HAL_GPIO_Init+0x334>)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002004:	d025      	beq.n	8002052 <HAL_GPIO_Init+0x242>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4f      	ldr	r2, [pc, #316]	@ (8002148 <HAL_GPIO_Init+0x338>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d01f      	beq.n	800204e <HAL_GPIO_Init+0x23e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4e      	ldr	r2, [pc, #312]	@ (800214c <HAL_GPIO_Init+0x33c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d019      	beq.n	800204a <HAL_GPIO_Init+0x23a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4d      	ldr	r2, [pc, #308]	@ (8002150 <HAL_GPIO_Init+0x340>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d013      	beq.n	8002046 <HAL_GPIO_Init+0x236>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4c      	ldr	r2, [pc, #304]	@ (8002154 <HAL_GPIO_Init+0x344>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00d      	beq.n	8002042 <HAL_GPIO_Init+0x232>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4b      	ldr	r2, [pc, #300]	@ (8002158 <HAL_GPIO_Init+0x348>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d007      	beq.n	800203e <HAL_GPIO_Init+0x22e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4a      	ldr	r2, [pc, #296]	@ (800215c <HAL_GPIO_Init+0x34c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d101      	bne.n	800203a <HAL_GPIO_Init+0x22a>
 8002036:	2306      	movs	r3, #6
 8002038:	e00c      	b.n	8002054 <HAL_GPIO_Init+0x244>
 800203a:	2307      	movs	r3, #7
 800203c:	e00a      	b.n	8002054 <HAL_GPIO_Init+0x244>
 800203e:	2305      	movs	r3, #5
 8002040:	e008      	b.n	8002054 <HAL_GPIO_Init+0x244>
 8002042:	2304      	movs	r3, #4
 8002044:	e006      	b.n	8002054 <HAL_GPIO_Init+0x244>
 8002046:	2303      	movs	r3, #3
 8002048:	e004      	b.n	8002054 <HAL_GPIO_Init+0x244>
 800204a:	2302      	movs	r3, #2
 800204c:	e002      	b.n	8002054 <HAL_GPIO_Init+0x244>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_GPIO_Init+0x244>
 8002052:	2300      	movs	r3, #0
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	f002 0203 	and.w	r2, r2, #3
 800205a:	0092      	lsls	r2, r2, #2
 800205c:	4093      	lsls	r3, r2
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002064:	4937      	ldr	r1, [pc, #220]	@ (8002144 <HAL_GPIO_Init+0x334>)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	3302      	adds	r3, #2
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002072:	4b3b      	ldr	r3, [pc, #236]	@ (8002160 <HAL_GPIO_Init+0x350>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002096:	4a32      	ldr	r2, [pc, #200]	@ (8002160 <HAL_GPIO_Init+0x350>)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800209c:	4b30      	ldr	r3, [pc, #192]	@ (8002160 <HAL_GPIO_Init+0x350>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020c0:	4a27      	ldr	r2, [pc, #156]	@ (8002160 <HAL_GPIO_Init+0x350>)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020c6:	4b26      	ldr	r3, [pc, #152]	@ (8002160 <HAL_GPIO_Init+0x350>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002160 <HAL_GPIO_Init+0x350>)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002160 <HAL_GPIO_Init+0x350>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002114:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <HAL_GPIO_Init+0x350>)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	3301      	adds	r3, #1
 800211e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa22 f303 	lsr.w	r3, r2, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	f47f ae78 	bne.w	8001e20 <HAL_GPIO_Init+0x10>
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	371c      	adds	r7, #28
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	40010000 	.word	0x40010000
 8002148:	48000400 	.word	0x48000400
 800214c:	48000800 	.word	0x48000800
 8002150:	48000c00 	.word	0x48000c00
 8002154:	48001000 	.word	0x48001000
 8002158:	48001400 	.word	0x48001400
 800215c:	48001800 	.word	0x48001800
 8002160:	40010400 	.word	0x40010400

08002164 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	887b      	ldrh	r3, [r7, #2]
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	e001      	b.n	8002186 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002186:	7bfb      	ldrb	r3, [r7, #15]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]
 80021a0:	4613      	mov	r3, r2
 80021a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a4:	787b      	ldrb	r3, [r7, #1]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021aa:	887a      	ldrh	r2, [r7, #2]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021b0:	e002      	b.n	80021b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021ce:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d006      	beq.n	80021e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021da:	4a05      	ldr	r2, [pc, #20]	@ (80021f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f806 	bl	80021f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40010400 	.word	0x40010400

080021f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e08d      	b.n	8002338 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d106      	bne.n	8002236 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7fe ffa3 	bl	800117c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2224      	movs	r2, #36	@ 0x24
 800223a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0201 	bic.w	r2, r2, #1
 800224c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800225a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800226a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d107      	bne.n	8002284 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	e006      	b.n	8002292 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002290:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d108      	bne.n	80022ac <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	e007      	b.n	80022bc <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ce:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022de:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69d9      	ldr	r1, [r3, #28]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1a      	ldr	r2, [r3, #32]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 0201 	orr.w	r2, r2, #1
 8002318:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b20      	cmp	r3, #32
 8002354:	d138      	bne.n	80023c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002360:	2302      	movs	r3, #2
 8002362:	e032      	b.n	80023ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2224      	movs	r2, #36	@ 0x24
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0201 	bic.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002392:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6819      	ldr	r1, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	e000      	b.n	80023ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023c8:	2302      	movs	r3, #2
  }
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b085      	sub	sp, #20
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d139      	bne.n	8002460 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e033      	b.n	8002462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2224      	movs	r2, #36	@ 0x24
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0201 	bic.w	r2, r2, #1
 8002418:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002428:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	021b      	lsls	r3, r3, #8
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	e000      	b.n	8002462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002460:	2302      	movs	r3, #2
  }
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b086      	sub	sp, #24
 8002472:	af02      	add	r7, sp, #8
 8002474:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e101      	b.n	8002684 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d106      	bne.n	800249a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff f82d 	bl	80014f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2203      	movs	r2, #3
 800249e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f003 fb89 	bl	8005bc4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	7c1a      	ldrb	r2, [r3, #16]
 80024ba:	f88d 2000 	strb.w	r2, [sp]
 80024be:	3304      	adds	r3, #4
 80024c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024c2:	f003 fb52 	bl	8005b6a <USB_CoreInit>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0d5      	b.n	8002684 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2100      	movs	r1, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	f003 fb81 	bl	8005be6 <USB_SetCurrentMode>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2202      	movs	r2, #2
 80024ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e0c6      	b.n	8002684 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e04a      	b.n	8002592 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	3315      	adds	r3, #21
 800250c:	2201      	movs	r2, #1
 800250e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	3314      	adds	r3, #20
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	b298      	uxth	r0, r3
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	332e      	adds	r3, #46	@ 0x2e
 8002538:	4602      	mov	r2, r0
 800253a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800253c:	7bfa      	ldrb	r2, [r7, #15]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	3318      	adds	r3, #24
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	331c      	adds	r3, #28
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	3320      	adds	r3, #32
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	3324      	adds	r3, #36	@ 0x24
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	3301      	adds	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	791b      	ldrb	r3, [r3, #4]
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	429a      	cmp	r2, r3
 800259a:	d3af      	bcc.n	80024fc <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259c:	2300      	movs	r3, #0
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	e044      	b.n	800262c <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025b8:	7bfa      	ldrb	r2, [r7, #15]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025ce:	7bfa      	ldrb	r2, [r7, #15]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025e4:	7bfa      	ldrb	r2, [r7, #15]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025fa:	7bfa      	ldrb	r2, [r7, #15]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002610:	7bfa      	ldrb	r2, [r7, #15]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	3301      	adds	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	791b      	ldrb	r3, [r3, #4]
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	429a      	cmp	r2, r3
 8002634:	d3b5      	bcc.n	80025a2 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	7c1a      	ldrb	r2, [r3, #16]
 800263e:	f88d 2000 	strb.w	r2, [sp]
 8002642:	3304      	adds	r3, #4
 8002644:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002646:	f003 fb1b 	bl	8005c80 <USB_DevInit>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e013      	b.n	8002684 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	7b1b      	ldrb	r3, [r3, #12]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d102      	bne.n	8002678 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f80a 	bl	800268c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f003 fcc0 	bl	8006002 <USB_DevDisconnect>

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026be:	f043 0303 	orr.w	r3, r3, #3
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a04      	ldr	r2, [pc, #16]	@ (80026f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e2:	6013      	str	r3, [r2, #0]
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40007000 	.word	0x40007000

080026f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026f8:	4b04      	ldr	r3, [pc, #16]	@ (800270c <HAL_PWREx_GetVoltageRange+0x18>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40007000 	.word	0x40007000

08002710 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800271e:	d130      	bne.n	8002782 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002720:	4b23      	ldr	r3, [pc, #140]	@ (80027b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800272c:	d038      	beq.n	80027a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800272e:	4b20      	ldr	r3, [pc, #128]	@ (80027b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002736:	4a1e      	ldr	r2, [pc, #120]	@ (80027b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002738:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800273c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800273e:	4b1d      	ldr	r3, [pc, #116]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2232      	movs	r2, #50	@ 0x32
 8002744:	fb02 f303 	mul.w	r3, r2, r3
 8002748:	4a1b      	ldr	r2, [pc, #108]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	0c9b      	lsrs	r3, r3, #18
 8002750:	3301      	adds	r3, #1
 8002752:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002754:	e002      	b.n	800275c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3b01      	subs	r3, #1
 800275a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800275c:	4b14      	ldr	r3, [pc, #80]	@ (80027b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002764:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002768:	d102      	bne.n	8002770 <HAL_PWREx_ControlVoltageScaling+0x60>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f2      	bne.n	8002756 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002770:	4b0f      	ldr	r3, [pc, #60]	@ (80027b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800277c:	d110      	bne.n	80027a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e00f      	b.n	80027a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002782:	4b0b      	ldr	r3, [pc, #44]	@ (80027b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800278a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800278e:	d007      	beq.n	80027a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002790:	4b07      	ldr	r3, [pc, #28]	@ (80027b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002798:	4a05      	ldr	r2, [pc, #20]	@ (80027b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800279a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800279e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40007000 	.word	0x40007000
 80027b4:	20000000 	.word	0x20000000
 80027b8:	431bde83 	.word	0x431bde83

080027bc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80027c0:	4b05      	ldr	r3, [pc, #20]	@ (80027d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a04      	ldr	r2, [pc, #16]	@ (80027d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80027c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027ca:	6053      	str	r3, [r2, #4]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40007000 	.word	0x40007000

080027dc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80027e4:	f7ff f8f6 	bl	80019d4 <HAL_GetTick>
 80027e8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e063      	b.n	80028bc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10b      	bne.n	8002818 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7fe fd15 	bl	8001238 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800280e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f858 	bl	80028c8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	3b01      	subs	r3, #1
 8002828:	021a      	lsls	r2, r3, #8
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	2120      	movs	r1, #32
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f850 	bl	80028e4 <QSPI_WaitFlagStateUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002848:	7afb      	ldrb	r3, [r7, #11]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d131      	bne.n	80028b2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002858:	f023 0310 	bic.w	r3, r3, #16
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6852      	ldr	r2, [r2, #4]
 8002860:	0611      	lsls	r1, r2, #24
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68d2      	ldr	r2, [r2, #12]
 8002866:	4311      	orrs	r1, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	430b      	orrs	r3, r1
 800286e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <HAL_QSPI_Init+0xe8>)
 8002878:	4013      	ands	r3, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6912      	ldr	r2, [r2, #16]
 800287e:	0411      	lsls	r1, r2, #16
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6952      	ldr	r2, [r2, #20]
 8002884:	4311      	orrs	r1, r2
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6992      	ldr	r2, [r2, #24]
 800288a:	4311      	orrs	r1, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	430b      	orrs	r3, r1
 8002892:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80028ba:	7afb      	ldrb	r3, [r7, #11]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	ffe0f8fe 	.word	0xffe0f8fe

080028c8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80028f4:	e01a      	b.n	800292c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d016      	beq.n	800292c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fe:	f7ff f869 	bl	80019d4 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	429a      	cmp	r2, r3
 800290c:	d302      	bcc.n	8002914 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10b      	bne.n	800292c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2204      	movs	r2, #4
 8002918:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002920:	f043 0201 	orr.w	r2, r3, #1
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e00e      	b.n	800294a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	4013      	ands	r3, r2
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf14      	ite	ne
 800293a:	2301      	movne	r3, #1
 800293c:	2300      	moveq	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	429a      	cmp	r2, r3
 8002946:	d1d6      	bne.n	80028f6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e3ca      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002966:	4b97      	ldr	r3, [pc, #604]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002970:	4b94      	ldr	r3, [pc, #592]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80e4 	beq.w	8002b50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <HAL_RCC_OscConfig+0x4a>
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b0c      	cmp	r3, #12
 8002992:	f040 808b 	bne.w	8002aac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b01      	cmp	r3, #1
 800299a:	f040 8087 	bne.w	8002aac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800299e:	4b89      	ldr	r3, [pc, #548]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d005      	beq.n	80029b6 <HAL_RCC_OscConfig+0x62>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e3a2      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1a      	ldr	r2, [r3, #32]
 80029ba:	4b82      	ldr	r3, [pc, #520]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d004      	beq.n	80029d0 <HAL_RCC_OscConfig+0x7c>
 80029c6:	4b7f      	ldr	r3, [pc, #508]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029ce:	e005      	b.n	80029dc <HAL_RCC_OscConfig+0x88>
 80029d0:	4b7c      	ldr	r3, [pc, #496]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 80029d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029d6:	091b      	lsrs	r3, r3, #4
 80029d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029dc:	4293      	cmp	r3, r2
 80029de:	d223      	bcs.n	8002a28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fd87 	bl	80034f8 <RCC_SetFlashLatencyFromMSIRange>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e383      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029f4:	4b73      	ldr	r3, [pc, #460]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a72      	ldr	r2, [pc, #456]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 80029fa:	f043 0308 	orr.w	r3, r3, #8
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b70      	ldr	r3, [pc, #448]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	496d      	ldr	r1, [pc, #436]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a12:	4b6c      	ldr	r3, [pc, #432]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	4968      	ldr	r1, [pc, #416]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	604b      	str	r3, [r1, #4]
 8002a26:	e025      	b.n	8002a74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a28:	4b66      	ldr	r3, [pc, #408]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a65      	ldr	r2, [pc, #404]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	f043 0308 	orr.w	r3, r3, #8
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	4b63      	ldr	r3, [pc, #396]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	4960      	ldr	r1, [pc, #384]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a46:	4b5f      	ldr	r3, [pc, #380]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	495b      	ldr	r1, [pc, #364]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 fd47 	bl	80034f8 <RCC_SetFlashLatencyFromMSIRange>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e343      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a74:	f000 fc4a 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b52      	ldr	r3, [pc, #328]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	4950      	ldr	r1, [pc, #320]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002a86:	5ccb      	ldrb	r3, [r1, r3]
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a90:	4a4e      	ldr	r2, [pc, #312]	@ (8002bcc <HAL_RCC_OscConfig+0x278>)
 8002a92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a94:	4b4e      	ldr	r3, [pc, #312]	@ (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe fdc7 	bl	800162c <HAL_InitTick>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d052      	beq.n	8002b4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	e327      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d032      	beq.n	8002b1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ab4:	4b43      	ldr	r3, [pc, #268]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a42      	ldr	r2, [pc, #264]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ac0:	f7fe ff88 	bl	80019d4 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ac8:	f7fe ff84 	bl	80019d4 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e310      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ada:	4b3a      	ldr	r3, [pc, #232]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ae6:	4b37      	ldr	r3, [pc, #220]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a36      	ldr	r2, [pc, #216]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002aec:	f043 0308 	orr.w	r3, r3, #8
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	4b34      	ldr	r3, [pc, #208]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4931      	ldr	r1, [pc, #196]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b04:	4b2f      	ldr	r3, [pc, #188]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	492c      	ldr	r1, [pc, #176]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
 8002b18:	e01a      	b.n	8002b50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a29      	ldr	r2, [pc, #164]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b26:	f7fe ff55 	bl	80019d4 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b2e:	f7fe ff51 	bl	80019d4 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e2dd      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b40:	4b20      	ldr	r3, [pc, #128]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_RCC_OscConfig+0x1da>
 8002b4c:	e000      	b.n	8002b50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d074      	beq.n	8002c46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d005      	beq.n	8002b6e <HAL_RCC_OscConfig+0x21a>
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	2b0c      	cmp	r3, #12
 8002b66:	d10e      	bne.n	8002b86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d10b      	bne.n	8002b86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6e:	4b15      	ldr	r3, [pc, #84]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d064      	beq.n	8002c44 <HAL_RCC_OscConfig+0x2f0>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d160      	bne.n	8002c44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e2ba      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b8e:	d106      	bne.n	8002b9e <HAL_RCC_OscConfig+0x24a>
 8002b90:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	e026      	b.n	8002bec <HAL_RCC_OscConfig+0x298>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ba6:	d115      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x280>
 8002ba8:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a05      	ldr	r2, [pc, #20]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002bae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a02      	ldr	r2, [pc, #8]	@ (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	e014      	b.n	8002bec <HAL_RCC_OscConfig+0x298>
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	0800b4cc 	.word	0x0800b4cc
 8002bcc:	20000000 	.word	0x20000000
 8002bd0:	20000004 	.word	0x20000004
 8002bd4:	4ba0      	ldr	r3, [pc, #640]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a9f      	ldr	r2, [pc, #636]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b9d      	ldr	r3, [pc, #628]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a9c      	ldr	r2, [pc, #624]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002be6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d013      	beq.n	8002c1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe feee 	bl	80019d4 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fe feea 	bl	80019d4 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	@ 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e276      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c0e:	4b92      	ldr	r3, [pc, #584]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x2a8>
 8002c1a:	e014      	b.n	8002c46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe feda 	bl	80019d4 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe fed6 	bl	80019d4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	@ 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e262      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c36:	4b88      	ldr	r3, [pc, #544]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x2d0>
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d060      	beq.n	8002d14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_OscConfig+0x310>
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b0c      	cmp	r3, #12
 8002c5c:	d119      	bne.n	8002c92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d116      	bne.n	8002c92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c64:	4b7c      	ldr	r3, [pc, #496]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_OscConfig+0x328>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e23f      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7c:	4b76      	ldr	r3, [pc, #472]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	061b      	lsls	r3, r3, #24
 8002c8a:	4973      	ldr	r1, [pc, #460]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c90:	e040      	b.n	8002d14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d023      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c9a:	4b6f      	ldr	r3, [pc, #444]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a6e      	ldr	r2, [pc, #440]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f7fe fe95 	bl	80019d4 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cae:	f7fe fe91 	bl	80019d4 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e21d      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cc0:	4b65      	ldr	r3, [pc, #404]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	4b62      	ldr	r3, [pc, #392]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	495f      	ldr	r1, [pc, #380]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
 8002ce0:	e018      	b.n	8002d14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a5c      	ldr	r2, [pc, #368]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cee:	f7fe fe71 	bl	80019d4 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf6:	f7fe fe6d 	bl	80019d4 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e1f9      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d08:	4b53      	ldr	r3, [pc, #332]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f0      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d03c      	beq.n	8002d9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01c      	beq.n	8002d62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d28:	4b4b      	ldr	r3, [pc, #300]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d2e:	4a4a      	ldr	r2, [pc, #296]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7fe fe4c 	bl	80019d4 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d40:	f7fe fe48 	bl	80019d4 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e1d4      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d52:	4b41      	ldr	r3, [pc, #260]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ef      	beq.n	8002d40 <HAL_RCC_OscConfig+0x3ec>
 8002d60:	e01b      	b.n	8002d9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d62:	4b3d      	ldr	r3, [pc, #244]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d68:	4a3b      	ldr	r2, [pc, #236]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d72:	f7fe fe2f 	bl	80019d4 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d7a:	f7fe fe2b 	bl	80019d4 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e1b7      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d8c:	4b32      	ldr	r3, [pc, #200]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1ef      	bne.n	8002d7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 80a6 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002da8:	2300      	movs	r3, #0
 8002daa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002dac:	4b2a      	ldr	r3, [pc, #168]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10d      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db8:	4b27      	ldr	r3, [pc, #156]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbc:	4a26      	ldr	r2, [pc, #152]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dc4:	4b24      	ldr	r3, [pc, #144]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd4:	4b21      	ldr	r3, [pc, #132]	@ (8002e5c <HAL_RCC_OscConfig+0x508>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d118      	bne.n	8002e12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002de0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e5c <HAL_RCC_OscConfig+0x508>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e5c <HAL_RCC_OscConfig+0x508>)
 8002de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dec:	f7fe fdf2 	bl	80019d4 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df4:	f7fe fdee 	bl	80019d4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e17a      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e06:	4b15      	ldr	r3, [pc, #84]	@ (8002e5c <HAL_RCC_OscConfig+0x508>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d108      	bne.n	8002e2c <HAL_RCC_OscConfig+0x4d8>
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e20:	4a0d      	ldr	r2, [pc, #52]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e2a:	e029      	b.n	8002e80 <HAL_RCC_OscConfig+0x52c>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	d115      	bne.n	8002e60 <HAL_RCC_OscConfig+0x50c>
 8002e34:	4b08      	ldr	r3, [pc, #32]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e3a:	4a07      	ldr	r2, [pc, #28]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002e3c:	f043 0304 	orr.w	r3, r3, #4
 8002e40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e44:	4b04      	ldr	r3, [pc, #16]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4a:	4a03      	ldr	r2, [pc, #12]	@ (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e54:	e014      	b.n	8002e80 <HAL_RCC_OscConfig+0x52c>
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	4b9c      	ldr	r3, [pc, #624]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e66:	4a9b      	ldr	r2, [pc, #620]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e70:	4b98      	ldr	r3, [pc, #608]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e76:	4a97      	ldr	r2, [pc, #604]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002e78:	f023 0304 	bic.w	r3, r3, #4
 8002e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d016      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e88:	f7fe fda4 	bl	80019d4 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7fe fda0 	bl	80019d4 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e12a      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ea6:	4b8b      	ldr	r3, [pc, #556]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0ed      	beq.n	8002e90 <HAL_RCC_OscConfig+0x53c>
 8002eb4:	e015      	b.n	8002ee2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb6:	f7fe fd8d 	bl	80019d4 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7fe fd89 	bl	80019d4 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e113      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ed4:	4b7f      	ldr	r3, [pc, #508]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1ed      	bne.n	8002ebe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ee2:	7ffb      	ldrb	r3, [r7, #31]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d105      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee8:	4b7a      	ldr	r3, [pc, #488]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eec:	4a79      	ldr	r2, [pc, #484]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002eee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ef2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80fe 	beq.w	80030fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	f040 80d0 	bne.w	80030a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f08:	4b72      	ldr	r3, [pc, #456]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f003 0203 	and.w	r2, r3, #3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d130      	bne.n	8002f7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	3b01      	subs	r3, #1
 8002f28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d127      	bne.n	8002f7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d11f      	bne.n	8002f7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f48:	2a07      	cmp	r2, #7
 8002f4a:	bf14      	ite	ne
 8002f4c:	2201      	movne	r2, #1
 8002f4e:	2200      	moveq	r2, #0
 8002f50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d113      	bne.n	8002f7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	3b01      	subs	r3, #1
 8002f64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d109      	bne.n	8002f7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	3b01      	subs	r3, #1
 8002f78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d06e      	beq.n	800305c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	2b0c      	cmp	r3, #12
 8002f82:	d069      	beq.n	8003058 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f84:	4b53      	ldr	r3, [pc, #332]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d105      	bne.n	8002f9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f90:	4b50      	ldr	r3, [pc, #320]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0ad      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fa0:	4b4c      	ldr	r3, [pc, #304]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a4b      	ldr	r2, [pc, #300]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002faa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fac:	f7fe fd12 	bl	80019d4 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fe fd0e 	bl	80019d4 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e09a      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc6:	4b43      	ldr	r3, [pc, #268]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd2:	4b40      	ldr	r3, [pc, #256]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	4b40      	ldr	r3, [pc, #256]	@ (80030d8 <HAL_RCC_OscConfig+0x784>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002fe2:	3a01      	subs	r2, #1
 8002fe4:	0112      	lsls	r2, r2, #4
 8002fe6:	4311      	orrs	r1, r2
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002fec:	0212      	lsls	r2, r2, #8
 8002fee:	4311      	orrs	r1, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ff4:	0852      	lsrs	r2, r2, #1
 8002ff6:	3a01      	subs	r2, #1
 8002ff8:	0552      	lsls	r2, r2, #21
 8002ffa:	4311      	orrs	r1, r2
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003000:	0852      	lsrs	r2, r2, #1
 8003002:	3a01      	subs	r2, #1
 8003004:	0652      	lsls	r2, r2, #25
 8003006:	4311      	orrs	r1, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800300c:	0912      	lsrs	r2, r2, #4
 800300e:	0452      	lsls	r2, r2, #17
 8003010:	430a      	orrs	r2, r1
 8003012:	4930      	ldr	r1, [pc, #192]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 8003014:	4313      	orrs	r3, r2
 8003016:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003018:	4b2e      	ldr	r3, [pc, #184]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a2d      	ldr	r2, [pc, #180]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 800301e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003022:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003024:	4b2b      	ldr	r3, [pc, #172]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4a2a      	ldr	r2, [pc, #168]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 800302a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800302e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003030:	f7fe fcd0 	bl	80019d4 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003038:	f7fe fccc 	bl	80019d4 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e058      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304a:	4b22      	ldr	r3, [pc, #136]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003056:	e050      	b.n	80030fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e04f      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305c:	4b1d      	ldr	r3, [pc, #116]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d148      	bne.n	80030fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003068:	4b1a      	ldr	r3, [pc, #104]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a19      	ldr	r2, [pc, #100]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 800306e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003072:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003074:	4b17      	ldr	r3, [pc, #92]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4a16      	ldr	r2, [pc, #88]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 800307a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800307e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003080:	f7fe fca8 	bl	80019d4 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003088:	f7fe fca4 	bl	80019d4 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e030      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309a:	4b0e      	ldr	r3, [pc, #56]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x734>
 80030a6:	e028      	b.n	80030fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d023      	beq.n	80030f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ae:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a08      	ldr	r2, [pc, #32]	@ (80030d4 <HAL_RCC_OscConfig+0x780>)
 80030b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ba:	f7fe fc8b 	bl	80019d4 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c0:	e00c      	b.n	80030dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c2:	f7fe fc87 	bl	80019d4 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d905      	bls.n	80030dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e013      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
 80030d4:	40021000 	.word	0x40021000
 80030d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030dc:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <HAL_RCC_OscConfig+0x7b0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1ec      	bne.n	80030c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030e8:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <HAL_RCC_OscConfig+0x7b0>)
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	4905      	ldr	r1, [pc, #20]	@ (8003104 <HAL_RCC_OscConfig+0x7b0>)
 80030ee:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <HAL_RCC_OscConfig+0x7b4>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	60cb      	str	r3, [r1, #12]
 80030f4:	e001      	b.n	80030fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000
 8003108:	feeefffc 	.word	0xfeeefffc

0800310c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0e7      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003120:	4b75      	ldr	r3, [pc, #468]	@ (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d910      	bls.n	8003150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b72      	ldr	r3, [pc, #456]	@ (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 0207 	bic.w	r2, r3, #7
 8003136:	4970      	ldr	r1, [pc, #448]	@ (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b6e      	ldr	r3, [pc, #440]	@ (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0cf      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d010      	beq.n	800317e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	4b66      	ldr	r3, [pc, #408]	@ (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003168:	429a      	cmp	r2, r3
 800316a:	d908      	bls.n	800317e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800316c:	4b63      	ldr	r3, [pc, #396]	@ (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	4960      	ldr	r1, [pc, #384]	@ (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 800317a:	4313      	orrs	r3, r2
 800317c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d04c      	beq.n	8003224 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b03      	cmp	r3, #3
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003192:	4b5a      	ldr	r3, [pc, #360]	@ (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d121      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e0a6      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d107      	bne.n	80031ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031aa:	4b54      	ldr	r3, [pc, #336]	@ (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d115      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e09a      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031c2:	4b4e      	ldr	r3, [pc, #312]	@ (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e08e      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031d2:	4b4a      	ldr	r3, [pc, #296]	@ (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e086      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031e2:	4b46      	ldr	r3, [pc, #280]	@ (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f023 0203 	bic.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4943      	ldr	r1, [pc, #268]	@ (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f4:	f7fe fbee 	bl	80019d4 <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fc:	f7fe fbea 	bl	80019d4 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e06e      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	4b3a      	ldr	r3, [pc, #232]	@ (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 020c 	and.w	r2, r3, #12
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	429a      	cmp	r2, r3
 8003222:	d1eb      	bne.n	80031fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d010      	beq.n	8003252 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	4b31      	ldr	r3, [pc, #196]	@ (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800323c:	429a      	cmp	r2, r3
 800323e:	d208      	bcs.n	8003252 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003240:	4b2e      	ldr	r3, [pc, #184]	@ (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	492b      	ldr	r1, [pc, #172]	@ (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003252:	4b29      	ldr	r3, [pc, #164]	@ (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d210      	bcs.n	8003282 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003260:	4b25      	ldr	r3, [pc, #148]	@ (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f023 0207 	bic.w	r2, r3, #7
 8003268:	4923      	ldr	r1, [pc, #140]	@ (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	4313      	orrs	r3, r2
 800326e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003270:	4b21      	ldr	r3, [pc, #132]	@ (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d001      	beq.n	8003282 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e036      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800328e:	4b1b      	ldr	r3, [pc, #108]	@ (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	4918      	ldr	r1, [pc, #96]	@ (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 800329c:	4313      	orrs	r3, r2
 800329e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d009      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ac:	4b13      	ldr	r3, [pc, #76]	@ (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4910      	ldr	r1, [pc, #64]	@ (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032c0:	f000 f824 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b0d      	ldr	r3, [pc, #52]	@ (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	490b      	ldr	r1, [pc, #44]	@ (8003300 <HAL_RCC_ClockConfig+0x1f4>)
 80032d2:	5ccb      	ldrb	r3, [r1, r3]
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	fa22 f303 	lsr.w	r3, r2, r3
 80032dc:	4a09      	ldr	r2, [pc, #36]	@ (8003304 <HAL_RCC_ClockConfig+0x1f8>)
 80032de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032e0:	4b09      	ldr	r3, [pc, #36]	@ (8003308 <HAL_RCC_ClockConfig+0x1fc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fe f9a1 	bl	800162c <HAL_InitTick>
 80032ea:	4603      	mov	r3, r0
 80032ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80032ee:	7afb      	ldrb	r3, [r7, #11]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40022000 	.word	0x40022000
 80032fc:	40021000 	.word	0x40021000
 8003300:	0800b4cc 	.word	0x0800b4cc
 8003304:	20000000 	.word	0x20000000
 8003308:	20000004 	.word	0x20000004

0800330c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	@ 0x24
 8003310:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	2300      	movs	r3, #0
 8003318:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800331a:	4b3e      	ldr	r3, [pc, #248]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003324:	4b3b      	ldr	r3, [pc, #236]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0x34>
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b0c      	cmp	r3, #12
 8003338:	d121      	bne.n	800337e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d11e      	bne.n	800337e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003340:	4b34      	ldr	r3, [pc, #208]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d107      	bne.n	800335c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800334c:	4b31      	ldr	r3, [pc, #196]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 800334e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	e005      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800335c:	4b2d      	ldr	r3, [pc, #180]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003368:	4a2b      	ldr	r2, [pc, #172]	@ (8003418 <HAL_RCC_GetSysClockFreq+0x10c>)
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003370:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10d      	bne.n	8003394 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800337c:	e00a      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b04      	cmp	r3, #4
 8003382:	d102      	bne.n	800338a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003384:	4b25      	ldr	r3, [pc, #148]	@ (800341c <HAL_RCC_GetSysClockFreq+0x110>)
 8003386:	61bb      	str	r3, [r7, #24]
 8003388:	e004      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	2b08      	cmp	r3, #8
 800338e:	d101      	bne.n	8003394 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003390:	4b23      	ldr	r3, [pc, #140]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x114>)
 8003392:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	2b0c      	cmp	r3, #12
 8003398:	d134      	bne.n	8003404 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800339a:	4b1e      	ldr	r3, [pc, #120]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d003      	beq.n	80033b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d003      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0xac>
 80033b0:	e005      	b.n	80033be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033b2:	4b1a      	ldr	r3, [pc, #104]	@ (800341c <HAL_RCC_GetSysClockFreq+0x110>)
 80033b4:	617b      	str	r3, [r7, #20]
      break;
 80033b6:	e005      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033b8:	4b19      	ldr	r3, [pc, #100]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x114>)
 80033ba:	617b      	str	r3, [r7, #20]
      break;
 80033bc:	e002      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	617b      	str	r3, [r7, #20]
      break;
 80033c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033c4:	4b13      	ldr	r3, [pc, #76]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	3301      	adds	r3, #1
 80033d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033d2:	4b10      	ldr	r3, [pc, #64]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	0a1b      	lsrs	r3, r3, #8
 80033d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	fb03 f202 	mul.w	r2, r3, r2
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	0e5b      	lsrs	r3, r3, #25
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	3301      	adds	r3, #1
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003402:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003404:	69bb      	ldr	r3, [r7, #24]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3724      	adds	r7, #36	@ 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000
 8003418:	0800b4e4 	.word	0x0800b4e4
 800341c:	00f42400 	.word	0x00f42400
 8003420:	007a1200 	.word	0x007a1200

08003424 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003428:	4b03      	ldr	r3, [pc, #12]	@ (8003438 <HAL_RCC_GetHCLKFreq+0x14>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	20000000 	.word	0x20000000

0800343c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003440:	f7ff fff0 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	0a1b      	lsrs	r3, r3, #8
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4904      	ldr	r1, [pc, #16]	@ (8003464 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003452:	5ccb      	ldrb	r3, [r1, r3]
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800345c:	4618      	mov	r0, r3
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40021000 	.word	0x40021000
 8003464:	0800b4dc 	.word	0x0800b4dc

08003468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800346c:	f7ff ffda 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b06      	ldr	r3, [pc, #24]	@ (800348c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	0adb      	lsrs	r3, r3, #11
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4904      	ldr	r1, [pc, #16]	@ (8003490 <HAL_RCC_GetPCLK2Freq+0x28>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003488:	4618      	mov	r0, r3
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000
 8003490:	0800b4dc 	.word	0x0800b4dc

08003494 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	220f      	movs	r2, #15
 80034a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80034a4:	4b12      	ldr	r3, [pc, #72]	@ (80034f0 <HAL_RCC_GetClockConfig+0x5c>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 0203 	and.w	r2, r3, #3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80034b0:	4b0f      	ldr	r3, [pc, #60]	@ (80034f0 <HAL_RCC_GetClockConfig+0x5c>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80034bc:	4b0c      	ldr	r3, [pc, #48]	@ (80034f0 <HAL_RCC_GetClockConfig+0x5c>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80034c8:	4b09      	ldr	r3, [pc, #36]	@ (80034f0 <HAL_RCC_GetClockConfig+0x5c>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	08db      	lsrs	r3, r3, #3
 80034ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80034d6:	4b07      	ldr	r3, [pc, #28]	@ (80034f4 <HAL_RCC_GetClockConfig+0x60>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0207 	and.w	r2, r3, #7
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	601a      	str	r2, [r3, #0]
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40022000 	.word	0x40022000

080034f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003500:	2300      	movs	r3, #0
 8003502:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003504:	4b2a      	ldr	r3, [pc, #168]	@ (80035b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003510:	f7ff f8f0 	bl	80026f4 <HAL_PWREx_GetVoltageRange>
 8003514:	6178      	str	r0, [r7, #20]
 8003516:	e014      	b.n	8003542 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003518:	4b25      	ldr	r3, [pc, #148]	@ (80035b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800351a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351c:	4a24      	ldr	r2, [pc, #144]	@ (80035b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800351e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003522:	6593      	str	r3, [r2, #88]	@ 0x58
 8003524:	4b22      	ldr	r3, [pc, #136]	@ (80035b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003530:	f7ff f8e0 	bl	80026f4 <HAL_PWREx_GetVoltageRange>
 8003534:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003536:	4b1e      	ldr	r3, [pc, #120]	@ (80035b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353a:	4a1d      	ldr	r2, [pc, #116]	@ (80035b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800353c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003540:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003548:	d10b      	bne.n	8003562 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b80      	cmp	r3, #128	@ 0x80
 800354e:	d919      	bls.n	8003584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2ba0      	cmp	r3, #160	@ 0xa0
 8003554:	d902      	bls.n	800355c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003556:	2302      	movs	r3, #2
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	e013      	b.n	8003584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800355c:	2301      	movs	r3, #1
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	e010      	b.n	8003584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b80      	cmp	r3, #128	@ 0x80
 8003566:	d902      	bls.n	800356e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003568:	2303      	movs	r3, #3
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	e00a      	b.n	8003584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b80      	cmp	r3, #128	@ 0x80
 8003572:	d102      	bne.n	800357a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003574:	2302      	movs	r3, #2
 8003576:	613b      	str	r3, [r7, #16]
 8003578:	e004      	b.n	8003584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b70      	cmp	r3, #112	@ 0x70
 800357e:	d101      	bne.n	8003584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003580:	2301      	movs	r3, #1
 8003582:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003584:	4b0b      	ldr	r3, [pc, #44]	@ (80035b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f023 0207 	bic.w	r2, r3, #7
 800358c:	4909      	ldr	r1, [pc, #36]	@ (80035b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003594:	4b07      	ldr	r3, [pc, #28]	@ (80035b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d001      	beq.n	80035a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40022000 	.word	0x40022000

080035b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035c0:	2300      	movs	r3, #0
 80035c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035c4:	2300      	movs	r3, #0
 80035c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d041      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80035dc:	d02a      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80035e2:	d824      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035e8:	d008      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035ee:	d81e      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035f8:	d010      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035fa:	e018      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035fc:	4b86      	ldr	r3, [pc, #536]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4a85      	ldr	r2, [pc, #532]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003602:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003606:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003608:	e015      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3304      	adds	r3, #4
 800360e:	2100      	movs	r1, #0
 8003610:	4618      	mov	r0, r3
 8003612:	f000 facb 	bl	8003bac <RCCEx_PLLSAI1_Config>
 8003616:	4603      	mov	r3, r0
 8003618:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800361a:	e00c      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3320      	adds	r3, #32
 8003620:	2100      	movs	r1, #0
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fbb6 	bl	8003d94 <RCCEx_PLLSAI2_Config>
 8003628:	4603      	mov	r3, r0
 800362a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800362c:	e003      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	74fb      	strb	r3, [r7, #19]
      break;
 8003632:	e000      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10b      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800363c:	4b76      	ldr	r3, [pc, #472]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003642:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800364a:	4973      	ldr	r1, [pc, #460]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003652:	e001      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d041      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003668:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800366c:	d02a      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800366e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003672:	d824      	bhi.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003674:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003678:	d008      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800367a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800367e:	d81e      	bhi.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003684:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003688:	d010      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800368a:	e018      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800368c:	4b62      	ldr	r3, [pc, #392]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4a61      	ldr	r2, [pc, #388]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003696:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003698:	e015      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3304      	adds	r3, #4
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fa83 	bl	8003bac <RCCEx_PLLSAI1_Config>
 80036a6:	4603      	mov	r3, r0
 80036a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036aa:	e00c      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3320      	adds	r3, #32
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fb6e 	bl	8003d94 <RCCEx_PLLSAI2_Config>
 80036b8:	4603      	mov	r3, r0
 80036ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036bc:	e003      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	74fb      	strb	r3, [r7, #19]
      break;
 80036c2:	e000      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80036c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036c6:	7cfb      	ldrb	r3, [r7, #19]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10b      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036cc:	4b52      	ldr	r3, [pc, #328]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036da:	494f      	ldr	r1, [pc, #316]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80036e2:	e001      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	7cfb      	ldrb	r3, [r7, #19]
 80036e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 80a0 	beq.w	8003836 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036f6:	2300      	movs	r3, #0
 80036f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036fa:	4b47      	ldr	r3, [pc, #284]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800370a:	2300      	movs	r3, #0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00d      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003710:	4b41      	ldr	r3, [pc, #260]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003714:	4a40      	ldr	r2, [pc, #256]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800371a:	6593      	str	r3, [r2, #88]	@ 0x58
 800371c:	4b3e      	ldr	r3, [pc, #248]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003728:	2301      	movs	r3, #1
 800372a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800372c:	4b3b      	ldr	r3, [pc, #236]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a3a      	ldr	r2, [pc, #232]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003736:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003738:	f7fe f94c 	bl	80019d4 <HAL_GetTick>
 800373c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800373e:	e009      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003740:	f7fe f948 	bl	80019d4 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d902      	bls.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	74fb      	strb	r3, [r7, #19]
        break;
 8003752:	e005      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003754:	4b31      	ldr	r3, [pc, #196]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0ef      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d15c      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003766:	4b2c      	ldr	r3, [pc, #176]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800376c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003770:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01f      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	429a      	cmp	r2, r3
 8003782:	d019      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003784:	4b24      	ldr	r3, [pc, #144]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800378a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800378e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003790:	4b21      	ldr	r3, [pc, #132]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003796:	4a20      	ldr	r2, [pc, #128]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800379c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037b0:	4a19      	ldr	r2, [pc, #100]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d016      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7fe f907 	bl	80019d4 <HAL_GetTick>
 80037c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c8:	e00b      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ca:	f7fe f903 	bl	80019d4 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d8:	4293      	cmp	r3, r2
 80037da:	d902      	bls.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	74fb      	strb	r3, [r7, #19]
            break;
 80037e0:	e006      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0ec      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80037f0:	7cfb      	ldrb	r3, [r7, #19]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10c      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037f6:	4b08      	ldr	r3, [pc, #32]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003806:	4904      	ldr	r1, [pc, #16]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800380e:	e009      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003810:	7cfb      	ldrb	r3, [r7, #19]
 8003812:	74bb      	strb	r3, [r7, #18]
 8003814:	e006      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003820:	7cfb      	ldrb	r3, [r7, #19]
 8003822:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003824:	7c7b      	ldrb	r3, [r7, #17]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d105      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800382a:	4b9e      	ldr	r3, [pc, #632]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382e:	4a9d      	ldr	r2, [pc, #628]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003830:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003834:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003842:	4b98      	ldr	r3, [pc, #608]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003848:	f023 0203 	bic.w	r2, r3, #3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003850:	4994      	ldr	r1, [pc, #592]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003864:	4b8f      	ldr	r3, [pc, #572]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386a:	f023 020c 	bic.w	r2, r3, #12
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003872:	498c      	ldr	r1, [pc, #560]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003886:	4b87      	ldr	r3, [pc, #540]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003894:	4983      	ldr	r1, [pc, #524]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038a8:	4b7e      	ldr	r3, [pc, #504]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b6:	497b      	ldr	r1, [pc, #492]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0310 	and.w	r3, r3, #16
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038ca:	4b76      	ldr	r3, [pc, #472]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038d8:	4972      	ldr	r1, [pc, #456]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038ec:	4b6d      	ldr	r3, [pc, #436]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038fa:	496a      	ldr	r1, [pc, #424]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800390e:	4b65      	ldr	r3, [pc, #404]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003914:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391c:	4961      	ldr	r1, [pc, #388]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003930:	4b5c      	ldr	r3, [pc, #368]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003936:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393e:	4959      	ldr	r1, [pc, #356]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003952:	4b54      	ldr	r3, [pc, #336]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003958:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003960:	4950      	ldr	r1, [pc, #320]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00a      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003974:	4b4b      	ldr	r3, [pc, #300]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800397a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003982:	4948      	ldr	r1, [pc, #288]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003996:	4b43      	ldr	r3, [pc, #268]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800399c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a4:	493f      	ldr	r1, [pc, #252]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d028      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039b8:	4b3a      	ldr	r3, [pc, #232]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039c6:	4937      	ldr	r1, [pc, #220]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039d6:	d106      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d8:	4b32      	ldr	r3, [pc, #200]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4a31      	ldr	r2, [pc, #196]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039e2:	60d3      	str	r3, [r2, #12]
 80039e4:	e011      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039ee:	d10c      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	2101      	movs	r1, #1
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 f8d8 	bl	8003bac <RCCEx_PLLSAI1_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a00:	7cfb      	ldrb	r3, [r7, #19]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a06:	7cfb      	ldrb	r3, [r7, #19]
 8003a08:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d028      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a16:	4b23      	ldr	r3, [pc, #140]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a24:	491f      	ldr	r1, [pc, #124]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a34:	d106      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a36:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a40:	60d3      	str	r3, [r2, #12]
 8003a42:	e011      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a4c:	d10c      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3304      	adds	r3, #4
 8003a52:	2101      	movs	r1, #1
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f8a9 	bl	8003bac <RCCEx_PLLSAI1_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a5e:	7cfb      	ldrb	r3, [r7, #19]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a64:	7cfb      	ldrb	r3, [r7, #19]
 8003a66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d02b      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a74:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a82:	4908      	ldr	r1, [pc, #32]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a92:	d109      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a94:	4b03      	ldr	r3, [pc, #12]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4a02      	ldr	r2, [pc, #8]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a9e:	60d3      	str	r3, [r2, #12]
 8003aa0:	e014      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ab0:	d10c      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 f877 	bl	8003bac <RCCEx_PLLSAI1_Config>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ac2:	7cfb      	ldrb	r3, [r7, #19]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ac8:	7cfb      	ldrb	r3, [r7, #19]
 8003aca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d02f      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ade:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ae6:	4928      	ldr	r1, [pc, #160]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003af2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003af6:	d10d      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3304      	adds	r3, #4
 8003afc:	2102      	movs	r1, #2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 f854 	bl	8003bac <RCCEx_PLLSAI1_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d014      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b0e:	7cfb      	ldrb	r3, [r7, #19]
 8003b10:	74bb      	strb	r3, [r7, #18]
 8003b12:	e011      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b1c:	d10c      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3320      	adds	r3, #32
 8003b22:	2102      	movs	r1, #2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 f935 	bl	8003d94 <RCCEx_PLLSAI2_Config>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b2e:	7cfb      	ldrb	r3, [r7, #19]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b34:	7cfb      	ldrb	r3, [r7, #19]
 8003b36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b44:	4b10      	ldr	r3, [pc, #64]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b52:	490d      	ldr	r1, [pc, #52]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b66:	4b08      	ldr	r3, [pc, #32]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b76:	4904      	ldr	r1, [pc, #16]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40021000 	.word	0x40021000

08003b8c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003b90:	4b05      	ldr	r3, [pc, #20]	@ (8003ba8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a04      	ldr	r2, [pc, #16]	@ (8003ba8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b96:	f043 0304 	orr.w	r3, r3, #4
 8003b9a:	6013      	str	r3, [r2, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40021000 	.word	0x40021000

08003bac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bba:	4b75      	ldr	r3, [pc, #468]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d018      	beq.n	8003bf8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bc6:	4b72      	ldr	r3, [pc, #456]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0203 	and.w	r2, r3, #3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d10d      	bne.n	8003bf2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
       ||
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d009      	beq.n	8003bf2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003bde:	4b6c      	ldr	r3, [pc, #432]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	091b      	lsrs	r3, r3, #4
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
       ||
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d047      	beq.n	8003c82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
 8003bf6:	e044      	b.n	8003c82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d018      	beq.n	8003c32 <RCCEx_PLLSAI1_Config+0x86>
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d825      	bhi.n	8003c50 <RCCEx_PLLSAI1_Config+0xa4>
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d002      	beq.n	8003c0e <RCCEx_PLLSAI1_Config+0x62>
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d009      	beq.n	8003c20 <RCCEx_PLLSAI1_Config+0x74>
 8003c0c:	e020      	b.n	8003c50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c0e:	4b60      	ldr	r3, [pc, #384]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d11d      	bne.n	8003c56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c1e:	e01a      	b.n	8003c56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c20:	4b5b      	ldr	r3, [pc, #364]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d116      	bne.n	8003c5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c30:	e013      	b.n	8003c5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c32:	4b57      	ldr	r3, [pc, #348]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10f      	bne.n	8003c5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c3e:	4b54      	ldr	r3, [pc, #336]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c4e:	e006      	b.n	8003c5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	73fb      	strb	r3, [r7, #15]
      break;
 8003c54:	e004      	b.n	8003c60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c56:	bf00      	nop
 8003c58:	e002      	b.n	8003c60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c5a:	bf00      	nop
 8003c5c:	e000      	b.n	8003c60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10d      	bne.n	8003c82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c66:	4b4a      	ldr	r3, [pc, #296]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6819      	ldr	r1, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	430b      	orrs	r3, r1
 8003c7c:	4944      	ldr	r1, [pc, #272]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d17d      	bne.n	8003d84 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c88:	4b41      	ldr	r3, [pc, #260]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a40      	ldr	r2, [pc, #256]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c94:	f7fd fe9e 	bl	80019d4 <HAL_GetTick>
 8003c98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c9a:	e009      	b.n	8003cb0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c9c:	f7fd fe9a 	bl	80019d4 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d902      	bls.n	8003cb0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	73fb      	strb	r3, [r7, #15]
        break;
 8003cae:	e005      	b.n	8003cbc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cb0:	4b37      	ldr	r3, [pc, #220]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1ef      	bne.n	8003c9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d160      	bne.n	8003d84 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d111      	bne.n	8003cec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cc8:	4b31      	ldr	r3, [pc, #196]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003cd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6892      	ldr	r2, [r2, #8]
 8003cd8:	0211      	lsls	r1, r2, #8
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	68d2      	ldr	r2, [r2, #12]
 8003cde:	0912      	lsrs	r2, r2, #4
 8003ce0:	0452      	lsls	r2, r2, #17
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	492a      	ldr	r1, [pc, #168]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	610b      	str	r3, [r1, #16]
 8003cea:	e027      	b.n	8003d3c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d112      	bne.n	8003d18 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cf2:	4b27      	ldr	r3, [pc, #156]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003cfa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6892      	ldr	r2, [r2, #8]
 8003d02:	0211      	lsls	r1, r2, #8
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6912      	ldr	r2, [r2, #16]
 8003d08:	0852      	lsrs	r2, r2, #1
 8003d0a:	3a01      	subs	r2, #1
 8003d0c:	0552      	lsls	r2, r2, #21
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	491f      	ldr	r1, [pc, #124]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	610b      	str	r3, [r1, #16]
 8003d16:	e011      	b.n	8003d3c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d18:	4b1d      	ldr	r3, [pc, #116]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003d20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6892      	ldr	r2, [r2, #8]
 8003d28:	0211      	lsls	r1, r2, #8
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6952      	ldr	r2, [r2, #20]
 8003d2e:	0852      	lsrs	r2, r2, #1
 8003d30:	3a01      	subs	r2, #1
 8003d32:	0652      	lsls	r2, r2, #25
 8003d34:	430a      	orrs	r2, r1
 8003d36:	4916      	ldr	r1, [pc, #88]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d3c:	4b14      	ldr	r3, [pc, #80]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a13      	ldr	r2, [pc, #76]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d48:	f7fd fe44 	bl	80019d4 <HAL_GetTick>
 8003d4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d4e:	e009      	b.n	8003d64 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d50:	f7fd fe40 	bl	80019d4 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d902      	bls.n	8003d64 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	73fb      	strb	r3, [r7, #15]
          break;
 8003d62:	e005      	b.n	8003d70 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d64:	4b0a      	ldr	r3, [pc, #40]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0ef      	beq.n	8003d50 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d106      	bne.n	8003d84 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d76:	4b06      	ldr	r3, [pc, #24]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	4904      	ldr	r1, [pc, #16]	@ (8003d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000

08003d94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003da2:	4b6a      	ldr	r3, [pc, #424]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d018      	beq.n	8003de0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003dae:	4b67      	ldr	r3, [pc, #412]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f003 0203 	and.w	r2, r3, #3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d10d      	bne.n	8003dda <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
       ||
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d009      	beq.n	8003dda <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003dc6:	4b61      	ldr	r3, [pc, #388]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	091b      	lsrs	r3, r3, #4
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
       ||
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d047      	beq.n	8003e6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
 8003dde:	e044      	b.n	8003e6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d018      	beq.n	8003e1a <RCCEx_PLLSAI2_Config+0x86>
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d825      	bhi.n	8003e38 <RCCEx_PLLSAI2_Config+0xa4>
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d002      	beq.n	8003df6 <RCCEx_PLLSAI2_Config+0x62>
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d009      	beq.n	8003e08 <RCCEx_PLLSAI2_Config+0x74>
 8003df4:	e020      	b.n	8003e38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003df6:	4b55      	ldr	r3, [pc, #340]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d11d      	bne.n	8003e3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e06:	e01a      	b.n	8003e3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e08:	4b50      	ldr	r3, [pc, #320]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d116      	bne.n	8003e42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e18:	e013      	b.n	8003e42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e1a:	4b4c      	ldr	r3, [pc, #304]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10f      	bne.n	8003e46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e26:	4b49      	ldr	r3, [pc, #292]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e36:	e006      	b.n	8003e46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e3c:	e004      	b.n	8003e48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e3e:	bf00      	nop
 8003e40:	e002      	b.n	8003e48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e42:	bf00      	nop
 8003e44:	e000      	b.n	8003e48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e46:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10d      	bne.n	8003e6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6819      	ldr	r1, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	430b      	orrs	r3, r1
 8003e64:	4939      	ldr	r1, [pc, #228]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d167      	bne.n	8003f40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e70:	4b36      	ldr	r3, [pc, #216]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a35      	ldr	r2, [pc, #212]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e7c:	f7fd fdaa 	bl	80019d4 <HAL_GetTick>
 8003e80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e82:	e009      	b.n	8003e98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e84:	f7fd fda6 	bl	80019d4 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d902      	bls.n	8003e98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	73fb      	strb	r3, [r7, #15]
        break;
 8003e96:	e005      	b.n	8003ea4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e98:	4b2c      	ldr	r3, [pc, #176]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1ef      	bne.n	8003e84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d14a      	bne.n	8003f40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d111      	bne.n	8003ed4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003eb0:	4b26      	ldr	r3, [pc, #152]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6892      	ldr	r2, [r2, #8]
 8003ec0:	0211      	lsls	r1, r2, #8
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68d2      	ldr	r2, [r2, #12]
 8003ec6:	0912      	lsrs	r2, r2, #4
 8003ec8:	0452      	lsls	r2, r2, #17
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	491f      	ldr	r1, [pc, #124]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	614b      	str	r3, [r1, #20]
 8003ed2:	e011      	b.n	8003ef8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003edc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6892      	ldr	r2, [r2, #8]
 8003ee4:	0211      	lsls	r1, r2, #8
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6912      	ldr	r2, [r2, #16]
 8003eea:	0852      	lsrs	r2, r2, #1
 8003eec:	3a01      	subs	r2, #1
 8003eee:	0652      	lsls	r2, r2, #25
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	4916      	ldr	r1, [pc, #88]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ef8:	4b14      	ldr	r3, [pc, #80]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a13      	ldr	r2, [pc, #76]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f04:	f7fd fd66 	bl	80019d4 <HAL_GetTick>
 8003f08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f0a:	e009      	b.n	8003f20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f0c:	f7fd fd62 	bl	80019d4 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d902      	bls.n	8003f20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	73fb      	strb	r3, [r7, #15]
          break;
 8003f1e:	e005      	b.n	8003f2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f20:	4b0a      	ldr	r3, [pc, #40]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0ef      	beq.n	8003f0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f32:	4b06      	ldr	r3, [pc, #24]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f34:	695a      	ldr	r2, [r3, #20]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	4904      	ldr	r1, [pc, #16]	@ (8003f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40021000 	.word	0x40021000

08003f50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e095      	b.n	800408e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d108      	bne.n	8003f7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f72:	d009      	beq.n	8003f88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	61da      	str	r2, [r3, #28]
 8003f7a:	e005      	b.n	8003f88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd f98c 	bl	80012c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fc8:	d902      	bls.n	8003fd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	e002      	b.n	8003fd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003fde:	d007      	beq.n	8003ff0 <HAL_SPI_Init+0xa0>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fe8:	d002      	beq.n	8003ff0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004032:	ea42 0103 	orr.w	r1, r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	0c1b      	lsrs	r3, r3, #16
 800404c:	f003 0204 	and.w	r2, r3, #4
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800405e:	f003 0308 	and.w	r3, r3, #8
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800406c:	ea42 0103 	orr.w	r1, r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b088      	sub	sp, #32
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	603b      	str	r3, [r7, #0]
 80040a2:	4613      	mov	r3, r2
 80040a4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040a6:	f7fd fc95 	bl	80019d4 <HAL_GetTick>
 80040aa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80040ac:	88fb      	ldrh	r3, [r7, #6]
 80040ae:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d001      	beq.n	80040c0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80040bc:	2302      	movs	r3, #2
 80040be:	e15c      	b.n	800437a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_SPI_Transmit+0x36>
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e154      	b.n	800437a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d101      	bne.n	80040de <HAL_SPI_Transmit+0x48>
 80040da:	2302      	movs	r3, #2
 80040dc:	e14d      	b.n	800437a <HAL_SPI_Transmit+0x2e4>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2203      	movs	r2, #3
 80040ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	88fa      	ldrh	r2, [r7, #6]
 80040fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	88fa      	ldrh	r2, [r7, #6]
 8004104:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004130:	d10f      	bne.n	8004152 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004140:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004150:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415c:	2b40      	cmp	r3, #64	@ 0x40
 800415e:	d007      	beq.n	8004170 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800416e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004178:	d952      	bls.n	8004220 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <HAL_SPI_Transmit+0xf2>
 8004182:	8b7b      	ldrh	r3, [r7, #26]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d145      	bne.n	8004214 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418c:	881a      	ldrh	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004198:	1c9a      	adds	r2, r3, #2
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041ac:	e032      	b.n	8004214 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d112      	bne.n	80041e2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c0:	881a      	ldrh	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041cc:	1c9a      	adds	r2, r3, #2
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041e0:	e018      	b.n	8004214 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041e2:	f7fd fbf7 	bl	80019d4 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d803      	bhi.n	80041fa <HAL_SPI_Transmit+0x164>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d102      	bne.n	8004200 <HAL_SPI_Transmit+0x16a>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e0b2      	b.n	800437a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1c7      	bne.n	80041ae <HAL_SPI_Transmit+0x118>
 800421e:	e083      	b.n	8004328 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <HAL_SPI_Transmit+0x198>
 8004228:	8b7b      	ldrh	r3, [r7, #26]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d177      	bne.n	800431e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b01      	cmp	r3, #1
 8004236:	d912      	bls.n	800425e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423c:	881a      	ldrh	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004248:	1c9a      	adds	r2, r3, #2
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b02      	subs	r3, #2
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800425c:	e05f      	b.n	800431e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	7812      	ldrb	r2, [r2, #0]
 800426a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004284:	e04b      	b.n	800431e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b02      	cmp	r3, #2
 8004292:	d12b      	bne.n	80042ec <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b01      	cmp	r3, #1
 800429c:	d912      	bls.n	80042c4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a2:	881a      	ldrh	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ae:	1c9a      	adds	r2, r3, #2
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b02      	subs	r3, #2
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042c2:	e02c      	b.n	800431e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	7812      	ldrb	r2, [r2, #0]
 80042d0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042ea:	e018      	b.n	800431e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042ec:	f7fd fb72 	bl	80019d4 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d803      	bhi.n	8004304 <HAL_SPI_Transmit+0x26e>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004302:	d102      	bne.n	800430a <HAL_SPI_Transmit+0x274>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e02d      	b.n	800437a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1ae      	bne.n	8004286 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	6839      	ldr	r1, [r7, #0]
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 fb65 	bl	80049fc <SPI_EndRxTxTransaction>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10a      	bne.n	800435c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004378:	2300      	movs	r3, #0
  }
}
 800437a:	4618      	mov	r0, r3
 800437c:	3720      	adds	r7, #32
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b08a      	sub	sp, #40	@ 0x28
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
 800438e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004390:	2301      	movs	r3, #1
 8004392:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004394:	f7fd fb1e 	bl	80019d4 <HAL_GetTick>
 8004398:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043a0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80043a8:	887b      	ldrh	r3, [r7, #2]
 80043aa:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80043ac:	887b      	ldrh	r3, [r7, #2]
 80043ae:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043b0:	7ffb      	ldrb	r3, [r7, #31]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d00c      	beq.n	80043d0 <HAL_SPI_TransmitReceive+0x4e>
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043bc:	d106      	bne.n	80043cc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d102      	bne.n	80043cc <HAL_SPI_TransmitReceive+0x4a>
 80043c6:	7ffb      	ldrb	r3, [r7, #31]
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d001      	beq.n	80043d0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80043cc:	2302      	movs	r3, #2
 80043ce:	e1f3      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_SPI_TransmitReceive+0x60>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <HAL_SPI_TransmitReceive+0x60>
 80043dc:	887b      	ldrh	r3, [r7, #2]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e1e8      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_SPI_TransmitReceive+0x72>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e1e1      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x436>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b04      	cmp	r3, #4
 8004406:	d003      	beq.n	8004410 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2205      	movs	r2, #5
 800440c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	887a      	ldrh	r2, [r7, #2]
 8004420:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	887a      	ldrh	r2, [r7, #2]
 8004428:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	887a      	ldrh	r2, [r7, #2]
 8004436:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	887a      	ldrh	r2, [r7, #2]
 800443c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004452:	d802      	bhi.n	800445a <HAL_SPI_TransmitReceive+0xd8>
 8004454:	8abb      	ldrh	r3, [r7, #20]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d908      	bls.n	800446c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	e007      	b.n	800447c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004486:	2b40      	cmp	r3, #64	@ 0x40
 8004488:	d007      	beq.n	800449a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004498:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044a2:	f240 8083 	bls.w	80045ac <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <HAL_SPI_TransmitReceive+0x132>
 80044ae:	8afb      	ldrh	r3, [r7, #22]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d16f      	bne.n	8004594 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b8:	881a      	ldrh	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c4:	1c9a      	adds	r2, r3, #2
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044d8:	e05c      	b.n	8004594 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d11b      	bne.n	8004520 <HAL_SPI_TransmitReceive+0x19e>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d016      	beq.n	8004520 <HAL_SPI_TransmitReceive+0x19e>
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d113      	bne.n	8004520 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fc:	881a      	ldrh	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004508:	1c9a      	adds	r2, r3, #2
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b01      	cmp	r3, #1
 800452c:	d11c      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x1e6>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d016      	beq.n	8004568 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004544:	b292      	uxth	r2, r2
 8004546:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454c:	1c9a      	adds	r2, r3, #2
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004564:	2301      	movs	r3, #1
 8004566:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004568:	f7fd fa34 	bl	80019d4 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004574:	429a      	cmp	r2, r3
 8004576:	d80d      	bhi.n	8004594 <HAL_SPI_TransmitReceive+0x212>
 8004578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457e:	d009      	beq.n	8004594 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e111      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004598:	b29b      	uxth	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d19d      	bne.n	80044da <HAL_SPI_TransmitReceive+0x158>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d197      	bne.n	80044da <HAL_SPI_TransmitReceive+0x158>
 80045aa:	e0e5      	b.n	8004778 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_SPI_TransmitReceive+0x23a>
 80045b4:	8afb      	ldrh	r3, [r7, #22]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	f040 80d1 	bne.w	800475e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d912      	bls.n	80045ec <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ca:	881a      	ldrh	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d6:	1c9a      	adds	r2, r3, #2
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	3b02      	subs	r3, #2
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045ea:	e0b8      	b.n	800475e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	330c      	adds	r3, #12
 80045f6:	7812      	ldrb	r2, [r2, #0]
 80045f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004612:	e0a4      	b.n	800475e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b02      	cmp	r3, #2
 8004620:	d134      	bne.n	800468c <HAL_SPI_TransmitReceive+0x30a>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d02f      	beq.n	800468c <HAL_SPI_TransmitReceive+0x30a>
 800462c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462e:	2b01      	cmp	r3, #1
 8004630:	d12c      	bne.n	800468c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	d912      	bls.n	8004662 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004640:	881a      	ldrh	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464c:	1c9a      	adds	r2, r3, #2
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b02      	subs	r3, #2
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004660:	e012      	b.n	8004688 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	7812      	ldrb	r2, [r2, #0]
 800466e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b01      	cmp	r3, #1
 8004698:	d148      	bne.n	800472c <HAL_SPI_TransmitReceive+0x3aa>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d042      	beq.n	800472c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d923      	bls.n	80046fa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046bc:	b292      	uxth	r2, r2
 80046be:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	1c9a      	adds	r2, r3, #2
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b02      	subs	r3, #2
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d81f      	bhi.n	8004728 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046f6:	605a      	str	r2, [r3, #4]
 80046f8:	e016      	b.n	8004728 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f103 020c 	add.w	r2, r3, #12
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004706:	7812      	ldrb	r2, [r2, #0]
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004728:	2301      	movs	r3, #1
 800472a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800472c:	f7fd f952 	bl	80019d4 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004738:	429a      	cmp	r2, r3
 800473a:	d803      	bhi.n	8004744 <HAL_SPI_TransmitReceive+0x3c2>
 800473c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004742:	d102      	bne.n	800474a <HAL_SPI_TransmitReceive+0x3c8>
 8004744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004746:	2b00      	cmp	r3, #0
 8004748:	d109      	bne.n	800475e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e02c      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	f47f af55 	bne.w	8004614 <HAL_SPI_TransmitReceive+0x292>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	f47f af4e 	bne.w	8004614 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004778:	6a3a      	ldr	r2, [r7, #32]
 800477a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f93d 	bl	80049fc <SPI_EndRxTxTransaction>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2220      	movs	r2, #32
 800478c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e00e      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80047b6:	2300      	movs	r3, #0
  }
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3728      	adds	r7, #40	@ 0x28
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	4613      	mov	r3, r2
 80047ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047d0:	f7fd f900 	bl	80019d4 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	4413      	add	r3, r2
 80047de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047e0:	f7fd f8f8 	bl	80019d4 <HAL_GetTick>
 80047e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047e6:	4b39      	ldr	r3, [pc, #228]	@ (80048cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	015b      	lsls	r3, r3, #5
 80047ec:	0d1b      	lsrs	r3, r3, #20
 80047ee:	69fa      	ldr	r2, [r7, #28]
 80047f0:	fb02 f303 	mul.w	r3, r2, r3
 80047f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047f6:	e054      	b.n	80048a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fe:	d050      	beq.n	80048a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004800:	f7fd f8e8 	bl	80019d4 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	69fa      	ldr	r2, [r7, #28]
 800480c:	429a      	cmp	r2, r3
 800480e:	d902      	bls.n	8004816 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d13d      	bne.n	8004892 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004824:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800482e:	d111      	bne.n	8004854 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004838:	d004      	beq.n	8004844 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004842:	d107      	bne.n	8004854 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004852:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800485c:	d10f      	bne.n	800487e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800487c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e017      	b.n	80048c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	3b01      	subs	r3, #1
 80048a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4013      	ands	r3, r2
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	bf0c      	ite	eq
 80048b2:	2301      	moveq	r3, #1
 80048b4:	2300      	movne	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	461a      	mov	r2, r3
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d19b      	bne.n	80047f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3720      	adds	r7, #32
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20000000 	.word	0x20000000

080048d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08a      	sub	sp, #40	@ 0x28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80048de:	2300      	movs	r3, #0
 80048e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80048e2:	f7fd f877 	bl	80019d4 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ea:	1a9b      	subs	r3, r3, r2
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	4413      	add	r3, r2
 80048f0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80048f2:	f7fd f86f 	bl	80019d4 <HAL_GetTick>
 80048f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	330c      	adds	r3, #12
 80048fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004900:	4b3d      	ldr	r3, [pc, #244]	@ (80049f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	00da      	lsls	r2, r3, #3
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	0d1b      	lsrs	r3, r3, #20
 8004910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004912:	fb02 f303 	mul.w	r3, r2, r3
 8004916:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004918:	e060      	b.n	80049dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004920:	d107      	bne.n	8004932 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d104      	bne.n	8004932 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004930:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004938:	d050      	beq.n	80049dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800493a:	f7fd f84b 	bl	80019d4 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004946:	429a      	cmp	r2, r3
 8004948:	d902      	bls.n	8004950 <SPI_WaitFifoStateUntilTimeout+0x80>
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	2b00      	cmp	r3, #0
 800494e:	d13d      	bne.n	80049cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800495e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004968:	d111      	bne.n	800498e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004972:	d004      	beq.n	800497e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800497c:	d107      	bne.n	800498e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800498c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004996:	d10f      	bne.n	80049b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e010      	b.n	80049ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	3b01      	subs	r3, #1
 80049da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d196      	bne.n	800491a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3728      	adds	r7, #40	@ 0x28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20000000 	.word	0x20000000

080049fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af02      	add	r7, sp, #8
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f7ff ff5b 	bl	80048d0 <SPI_WaitFifoStateUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d007      	beq.n	8004a30 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a24:	f043 0220 	orr.w	r2, r3, #32
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e027      	b.n	8004a80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2200      	movs	r2, #0
 8004a38:	2180      	movs	r1, #128	@ 0x80
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f7ff fec0 	bl	80047c0 <SPI_WaitFlagStateUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d007      	beq.n	8004a56 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a4a:	f043 0220 	orr.w	r2, r3, #32
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e014      	b.n	8004a80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f7ff ff34 	bl	80048d0 <SPI_WaitFifoStateUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d007      	beq.n	8004a7e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a72:	f043 0220 	orr.w	r2, r3, #32
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e000      	b.n	8004a80 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e049      	b.n	8004b2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f841 	bl	8004b36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	f000 f9e0 	bl	8004e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
	...

08004b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d001      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e04f      	b.n	8004c04 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a23      	ldr	r2, [pc, #140]	@ (8004c10 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d01d      	beq.n	8004bc2 <HAL_TIM_Base_Start_IT+0x76>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b8e:	d018      	beq.n	8004bc2 <HAL_TIM_Base_Start_IT+0x76>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1f      	ldr	r2, [pc, #124]	@ (8004c14 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d013      	beq.n	8004bc2 <HAL_TIM_Base_Start_IT+0x76>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8004c18 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00e      	beq.n	8004bc2 <HAL_TIM_Base_Start_IT+0x76>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8004c1c <HAL_TIM_Base_Start_IT+0xd0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d009      	beq.n	8004bc2 <HAL_TIM_Base_Start_IT+0x76>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8004c20 <HAL_TIM_Base_Start_IT+0xd4>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d004      	beq.n	8004bc2 <HAL_TIM_Base_Start_IT+0x76>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a19      	ldr	r2, [pc, #100]	@ (8004c24 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d115      	bne.n	8004bee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	4b17      	ldr	r3, [pc, #92]	@ (8004c28 <HAL_TIM_Base_Start_IT+0xdc>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b06      	cmp	r3, #6
 8004bd2:	d015      	beq.n	8004c00 <HAL_TIM_Base_Start_IT+0xb4>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bda:	d011      	beq.n	8004c00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bec:	e008      	b.n	8004c00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f042 0201 	orr.w	r2, r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	e000      	b.n	8004c02 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40012c00 	.word	0x40012c00
 8004c14:	40000400 	.word	0x40000400
 8004c18:	40000800 	.word	0x40000800
 8004c1c:	40000c00 	.word	0x40000c00
 8004c20:	40013400 	.word	0x40013400
 8004c24:	40014000 	.word	0x40014000
 8004c28:	00010007 	.word	0x00010007

08004c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d020      	beq.n	8004c90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d01b      	beq.n	8004c90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f06f 0202 	mvn.w	r2, #2
 8004c60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f8e9 	bl	8004e4e <HAL_TIM_IC_CaptureCallback>
 8004c7c:	e005      	b.n	8004c8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f8db 	bl	8004e3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f8ec 	bl	8004e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f003 0304 	and.w	r3, r3, #4
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d020      	beq.n	8004cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01b      	beq.n	8004cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f06f 0204 	mvn.w	r2, #4
 8004cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f8c3 	bl	8004e4e <HAL_TIM_IC_CaptureCallback>
 8004cc8:	e005      	b.n	8004cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f8b5 	bl	8004e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f8c6 	bl	8004e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d020      	beq.n	8004d28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d01b      	beq.n	8004d28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0208 	mvn.w	r2, #8
 8004cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2204      	movs	r2, #4
 8004cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f89d 	bl	8004e4e <HAL_TIM_IC_CaptureCallback>
 8004d14:	e005      	b.n	8004d22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f88f 	bl	8004e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f8a0 	bl	8004e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f003 0310 	and.w	r3, r3, #16
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d020      	beq.n	8004d74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01b      	beq.n	8004d74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0210 	mvn.w	r2, #16
 8004d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2208      	movs	r2, #8
 8004d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f877 	bl	8004e4e <HAL_TIM_IC_CaptureCallback>
 8004d60:	e005      	b.n	8004d6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f869 	bl	8004e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f87a 	bl	8004e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00c      	beq.n	8004d98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d007      	beq.n	8004d98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f06f 0201 	mvn.w	r2, #1
 8004d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fc f94e 	bl	8001034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d104      	bne.n	8004dac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00c      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d007      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f913 	bl	8004fec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00c      	beq.n	8004dea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d007      	beq.n	8004dea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f90b 	bl	8005000 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00c      	beq.n	8004e0e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d007      	beq.n	8004e0e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f834 	bl	8004e76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00c      	beq.n	8004e32 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d007      	beq.n	8004e32 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f06f 0220 	mvn.w	r2, #32
 8004e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f8d3 	bl	8004fd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e32:	bf00      	nop
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
	...

08004e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a46      	ldr	r2, [pc, #280]	@ (8004fb8 <TIM_Base_SetConfig+0x12c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d013      	beq.n	8004ecc <TIM_Base_SetConfig+0x40>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eaa:	d00f      	beq.n	8004ecc <TIM_Base_SetConfig+0x40>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a43      	ldr	r2, [pc, #268]	@ (8004fbc <TIM_Base_SetConfig+0x130>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00b      	beq.n	8004ecc <TIM_Base_SetConfig+0x40>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a42      	ldr	r2, [pc, #264]	@ (8004fc0 <TIM_Base_SetConfig+0x134>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d007      	beq.n	8004ecc <TIM_Base_SetConfig+0x40>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a41      	ldr	r2, [pc, #260]	@ (8004fc4 <TIM_Base_SetConfig+0x138>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d003      	beq.n	8004ecc <TIM_Base_SetConfig+0x40>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a40      	ldr	r2, [pc, #256]	@ (8004fc8 <TIM_Base_SetConfig+0x13c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d108      	bne.n	8004ede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a35      	ldr	r2, [pc, #212]	@ (8004fb8 <TIM_Base_SetConfig+0x12c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d01f      	beq.n	8004f26 <TIM_Base_SetConfig+0x9a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eec:	d01b      	beq.n	8004f26 <TIM_Base_SetConfig+0x9a>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a32      	ldr	r2, [pc, #200]	@ (8004fbc <TIM_Base_SetConfig+0x130>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d017      	beq.n	8004f26 <TIM_Base_SetConfig+0x9a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a31      	ldr	r2, [pc, #196]	@ (8004fc0 <TIM_Base_SetConfig+0x134>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d013      	beq.n	8004f26 <TIM_Base_SetConfig+0x9a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a30      	ldr	r2, [pc, #192]	@ (8004fc4 <TIM_Base_SetConfig+0x138>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00f      	beq.n	8004f26 <TIM_Base_SetConfig+0x9a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a2f      	ldr	r2, [pc, #188]	@ (8004fc8 <TIM_Base_SetConfig+0x13c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00b      	beq.n	8004f26 <TIM_Base_SetConfig+0x9a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a2e      	ldr	r2, [pc, #184]	@ (8004fcc <TIM_Base_SetConfig+0x140>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d007      	beq.n	8004f26 <TIM_Base_SetConfig+0x9a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a2d      	ldr	r2, [pc, #180]	@ (8004fd0 <TIM_Base_SetConfig+0x144>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d003      	beq.n	8004f26 <TIM_Base_SetConfig+0x9a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a2c      	ldr	r2, [pc, #176]	@ (8004fd4 <TIM_Base_SetConfig+0x148>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d108      	bne.n	8004f38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a16      	ldr	r2, [pc, #88]	@ (8004fb8 <TIM_Base_SetConfig+0x12c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00f      	beq.n	8004f84 <TIM_Base_SetConfig+0xf8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a18      	ldr	r2, [pc, #96]	@ (8004fc8 <TIM_Base_SetConfig+0x13c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00b      	beq.n	8004f84 <TIM_Base_SetConfig+0xf8>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a17      	ldr	r2, [pc, #92]	@ (8004fcc <TIM_Base_SetConfig+0x140>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d007      	beq.n	8004f84 <TIM_Base_SetConfig+0xf8>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a16      	ldr	r2, [pc, #88]	@ (8004fd0 <TIM_Base_SetConfig+0x144>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_Base_SetConfig+0xf8>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a15      	ldr	r2, [pc, #84]	@ (8004fd4 <TIM_Base_SetConfig+0x148>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d103      	bne.n	8004f8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d105      	bne.n	8004faa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f023 0201 	bic.w	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	611a      	str	r2, [r3, #16]
  }
}
 8004faa:	bf00      	nop
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40012c00 	.word	0x40012c00
 8004fbc:	40000400 	.word	0x40000400
 8004fc0:	40000800 	.word	0x40000800
 8004fc4:	40000c00 	.word	0x40000c00
 8004fc8:	40013400 	.word	0x40013400
 8004fcc:	40014000 	.word	0x40014000
 8004fd0:	40014400 	.word	0x40014400
 8004fd4:	40014800 	.word	0x40014800

08004fd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e040      	b.n	80050a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fc f9b8 	bl	80013ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2224      	movs	r2, #36	@ 0x24
 8005040:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0201 	bic.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fb6a 	bl	8005734 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f8af 	bl	80051c4 <UART_SetConfig>
 8005066:	4603      	mov	r3, r0
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e01b      	b.n	80050a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800507e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800508e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fbe9 	bl	8005878 <UART_CheckIdleState>
 80050a6:	4603      	mov	r3, r0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08a      	sub	sp, #40	@ 0x28
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	4613      	mov	r3, r2
 80050be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d177      	bne.n	80051b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_UART_Transmit+0x24>
 80050ce:	88fb      	ldrh	r3, [r7, #6]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e070      	b.n	80051ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2221      	movs	r2, #33	@ 0x21
 80050e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050e6:	f7fc fc75 	bl	80019d4 <HAL_GetTick>
 80050ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	88fa      	ldrh	r2, [r7, #6]
 80050f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	88fa      	ldrh	r2, [r7, #6]
 80050f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005104:	d108      	bne.n	8005118 <HAL_UART_Transmit+0x68>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d104      	bne.n	8005118 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800510e:	2300      	movs	r3, #0
 8005110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	61bb      	str	r3, [r7, #24]
 8005116:	e003      	b.n	8005120 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800511c:	2300      	movs	r3, #0
 800511e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005120:	e02f      	b.n	8005182 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2200      	movs	r2, #0
 800512a:	2180      	movs	r1, #128	@ 0x80
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 fc4b 	bl	80059c8 <UART_WaitOnFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d004      	beq.n	8005142 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e03b      	b.n	80051ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10b      	bne.n	8005160 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	881a      	ldrh	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005154:	b292      	uxth	r2, r2
 8005156:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	3302      	adds	r3, #2
 800515c:	61bb      	str	r3, [r7, #24]
 800515e:	e007      	b.n	8005170 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	781a      	ldrb	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	3301      	adds	r3, #1
 800516e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005176:	b29b      	uxth	r3, r3
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1c9      	bne.n	8005122 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2200      	movs	r2, #0
 8005196:	2140      	movs	r1, #64	@ 0x40
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 fc15 	bl	80059c8 <UART_WaitOnFlagUntilTimeout>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d004      	beq.n	80051ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2220      	movs	r2, #32
 80051a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e005      	b.n	80051ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2220      	movs	r2, #32
 80051b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	e000      	b.n	80051ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80051b8:	2302      	movs	r3, #2
  }
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c8:	b08a      	sub	sp, #40	@ 0x28
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	431a      	orrs	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	431a      	orrs	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4ba4      	ldr	r3, [pc, #656]	@ (8005484 <UART_SetConfig+0x2c0>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	6812      	ldr	r2, [r2, #0]
 80051fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051fc:	430b      	orrs	r3, r1
 80051fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a99      	ldr	r2, [pc, #612]	@ (8005488 <UART_SetConfig+0x2c4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d004      	beq.n	8005230 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800522c:	4313      	orrs	r3, r2
 800522e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005240:	430a      	orrs	r2, r1
 8005242:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a90      	ldr	r2, [pc, #576]	@ (800548c <UART_SetConfig+0x2c8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d126      	bne.n	800529c <UART_SetConfig+0xd8>
 800524e:	4b90      	ldr	r3, [pc, #576]	@ (8005490 <UART_SetConfig+0x2cc>)
 8005250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005254:	f003 0303 	and.w	r3, r3, #3
 8005258:	2b03      	cmp	r3, #3
 800525a:	d81b      	bhi.n	8005294 <UART_SetConfig+0xd0>
 800525c:	a201      	add	r2, pc, #4	@ (adr r2, 8005264 <UART_SetConfig+0xa0>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	08005275 	.word	0x08005275
 8005268:	08005285 	.word	0x08005285
 800526c:	0800527d 	.word	0x0800527d
 8005270:	0800528d 	.word	0x0800528d
 8005274:	2301      	movs	r3, #1
 8005276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800527a:	e116      	b.n	80054aa <UART_SetConfig+0x2e6>
 800527c:	2302      	movs	r3, #2
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005282:	e112      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005284:	2304      	movs	r3, #4
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800528a:	e10e      	b.n	80054aa <UART_SetConfig+0x2e6>
 800528c:	2308      	movs	r3, #8
 800528e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005292:	e10a      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005294:	2310      	movs	r3, #16
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800529a:	e106      	b.n	80054aa <UART_SetConfig+0x2e6>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a7c      	ldr	r2, [pc, #496]	@ (8005494 <UART_SetConfig+0x2d0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d138      	bne.n	8005318 <UART_SetConfig+0x154>
 80052a6:	4b7a      	ldr	r3, [pc, #488]	@ (8005490 <UART_SetConfig+0x2cc>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ac:	f003 030c 	and.w	r3, r3, #12
 80052b0:	2b0c      	cmp	r3, #12
 80052b2:	d82d      	bhi.n	8005310 <UART_SetConfig+0x14c>
 80052b4:	a201      	add	r2, pc, #4	@ (adr r2, 80052bc <UART_SetConfig+0xf8>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	080052f1 	.word	0x080052f1
 80052c0:	08005311 	.word	0x08005311
 80052c4:	08005311 	.word	0x08005311
 80052c8:	08005311 	.word	0x08005311
 80052cc:	08005301 	.word	0x08005301
 80052d0:	08005311 	.word	0x08005311
 80052d4:	08005311 	.word	0x08005311
 80052d8:	08005311 	.word	0x08005311
 80052dc:	080052f9 	.word	0x080052f9
 80052e0:	08005311 	.word	0x08005311
 80052e4:	08005311 	.word	0x08005311
 80052e8:	08005311 	.word	0x08005311
 80052ec:	08005309 	.word	0x08005309
 80052f0:	2300      	movs	r3, #0
 80052f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052f6:	e0d8      	b.n	80054aa <UART_SetConfig+0x2e6>
 80052f8:	2302      	movs	r3, #2
 80052fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052fe:	e0d4      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005300:	2304      	movs	r3, #4
 8005302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005306:	e0d0      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005308:	2308      	movs	r3, #8
 800530a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800530e:	e0cc      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005310:	2310      	movs	r3, #16
 8005312:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005316:	e0c8      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a5e      	ldr	r2, [pc, #376]	@ (8005498 <UART_SetConfig+0x2d4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d125      	bne.n	800536e <UART_SetConfig+0x1aa>
 8005322:	4b5b      	ldr	r3, [pc, #364]	@ (8005490 <UART_SetConfig+0x2cc>)
 8005324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005328:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800532c:	2b30      	cmp	r3, #48	@ 0x30
 800532e:	d016      	beq.n	800535e <UART_SetConfig+0x19a>
 8005330:	2b30      	cmp	r3, #48	@ 0x30
 8005332:	d818      	bhi.n	8005366 <UART_SetConfig+0x1a2>
 8005334:	2b20      	cmp	r3, #32
 8005336:	d00a      	beq.n	800534e <UART_SetConfig+0x18a>
 8005338:	2b20      	cmp	r3, #32
 800533a:	d814      	bhi.n	8005366 <UART_SetConfig+0x1a2>
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <UART_SetConfig+0x182>
 8005340:	2b10      	cmp	r3, #16
 8005342:	d008      	beq.n	8005356 <UART_SetConfig+0x192>
 8005344:	e00f      	b.n	8005366 <UART_SetConfig+0x1a2>
 8005346:	2300      	movs	r3, #0
 8005348:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800534c:	e0ad      	b.n	80054aa <UART_SetConfig+0x2e6>
 800534e:	2302      	movs	r3, #2
 8005350:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005354:	e0a9      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005356:	2304      	movs	r3, #4
 8005358:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800535c:	e0a5      	b.n	80054aa <UART_SetConfig+0x2e6>
 800535e:	2308      	movs	r3, #8
 8005360:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005364:	e0a1      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005366:	2310      	movs	r3, #16
 8005368:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800536c:	e09d      	b.n	80054aa <UART_SetConfig+0x2e6>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a4a      	ldr	r2, [pc, #296]	@ (800549c <UART_SetConfig+0x2d8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d125      	bne.n	80053c4 <UART_SetConfig+0x200>
 8005378:	4b45      	ldr	r3, [pc, #276]	@ (8005490 <UART_SetConfig+0x2cc>)
 800537a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005382:	2bc0      	cmp	r3, #192	@ 0xc0
 8005384:	d016      	beq.n	80053b4 <UART_SetConfig+0x1f0>
 8005386:	2bc0      	cmp	r3, #192	@ 0xc0
 8005388:	d818      	bhi.n	80053bc <UART_SetConfig+0x1f8>
 800538a:	2b80      	cmp	r3, #128	@ 0x80
 800538c:	d00a      	beq.n	80053a4 <UART_SetConfig+0x1e0>
 800538e:	2b80      	cmp	r3, #128	@ 0x80
 8005390:	d814      	bhi.n	80053bc <UART_SetConfig+0x1f8>
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <UART_SetConfig+0x1d8>
 8005396:	2b40      	cmp	r3, #64	@ 0x40
 8005398:	d008      	beq.n	80053ac <UART_SetConfig+0x1e8>
 800539a:	e00f      	b.n	80053bc <UART_SetConfig+0x1f8>
 800539c:	2300      	movs	r3, #0
 800539e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053a2:	e082      	b.n	80054aa <UART_SetConfig+0x2e6>
 80053a4:	2302      	movs	r3, #2
 80053a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053aa:	e07e      	b.n	80054aa <UART_SetConfig+0x2e6>
 80053ac:	2304      	movs	r3, #4
 80053ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053b2:	e07a      	b.n	80054aa <UART_SetConfig+0x2e6>
 80053b4:	2308      	movs	r3, #8
 80053b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ba:	e076      	b.n	80054aa <UART_SetConfig+0x2e6>
 80053bc:	2310      	movs	r3, #16
 80053be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053c2:	e072      	b.n	80054aa <UART_SetConfig+0x2e6>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a35      	ldr	r2, [pc, #212]	@ (80054a0 <UART_SetConfig+0x2dc>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d12a      	bne.n	8005424 <UART_SetConfig+0x260>
 80053ce:	4b30      	ldr	r3, [pc, #192]	@ (8005490 <UART_SetConfig+0x2cc>)
 80053d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053dc:	d01a      	beq.n	8005414 <UART_SetConfig+0x250>
 80053de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053e2:	d81b      	bhi.n	800541c <UART_SetConfig+0x258>
 80053e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053e8:	d00c      	beq.n	8005404 <UART_SetConfig+0x240>
 80053ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053ee:	d815      	bhi.n	800541c <UART_SetConfig+0x258>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <UART_SetConfig+0x238>
 80053f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053f8:	d008      	beq.n	800540c <UART_SetConfig+0x248>
 80053fa:	e00f      	b.n	800541c <UART_SetConfig+0x258>
 80053fc:	2300      	movs	r3, #0
 80053fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005402:	e052      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005404:	2302      	movs	r3, #2
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800540a:	e04e      	b.n	80054aa <UART_SetConfig+0x2e6>
 800540c:	2304      	movs	r3, #4
 800540e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005412:	e04a      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005414:	2308      	movs	r3, #8
 8005416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800541a:	e046      	b.n	80054aa <UART_SetConfig+0x2e6>
 800541c:	2310      	movs	r3, #16
 800541e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005422:	e042      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a17      	ldr	r2, [pc, #92]	@ (8005488 <UART_SetConfig+0x2c4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d13a      	bne.n	80054a4 <UART_SetConfig+0x2e0>
 800542e:	4b18      	ldr	r3, [pc, #96]	@ (8005490 <UART_SetConfig+0x2cc>)
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005434:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005438:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800543c:	d01a      	beq.n	8005474 <UART_SetConfig+0x2b0>
 800543e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005442:	d81b      	bhi.n	800547c <UART_SetConfig+0x2b8>
 8005444:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005448:	d00c      	beq.n	8005464 <UART_SetConfig+0x2a0>
 800544a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800544e:	d815      	bhi.n	800547c <UART_SetConfig+0x2b8>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <UART_SetConfig+0x298>
 8005454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005458:	d008      	beq.n	800546c <UART_SetConfig+0x2a8>
 800545a:	e00f      	b.n	800547c <UART_SetConfig+0x2b8>
 800545c:	2300      	movs	r3, #0
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005462:	e022      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005464:	2302      	movs	r3, #2
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800546a:	e01e      	b.n	80054aa <UART_SetConfig+0x2e6>
 800546c:	2304      	movs	r3, #4
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005472:	e01a      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005474:	2308      	movs	r3, #8
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800547a:	e016      	b.n	80054aa <UART_SetConfig+0x2e6>
 800547c:	2310      	movs	r3, #16
 800547e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005482:	e012      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005484:	efff69f3 	.word	0xefff69f3
 8005488:	40008000 	.word	0x40008000
 800548c:	40013800 	.word	0x40013800
 8005490:	40021000 	.word	0x40021000
 8005494:	40004400 	.word	0x40004400
 8005498:	40004800 	.word	0x40004800
 800549c:	40004c00 	.word	0x40004c00
 80054a0:	40005000 	.word	0x40005000
 80054a4:	2310      	movs	r3, #16
 80054a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a9f      	ldr	r2, [pc, #636]	@ (800572c <UART_SetConfig+0x568>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d17a      	bne.n	80055aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d824      	bhi.n	8005506 <UART_SetConfig+0x342>
 80054bc:	a201      	add	r2, pc, #4	@ (adr r2, 80054c4 <UART_SetConfig+0x300>)
 80054be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c2:	bf00      	nop
 80054c4:	080054e9 	.word	0x080054e9
 80054c8:	08005507 	.word	0x08005507
 80054cc:	080054f1 	.word	0x080054f1
 80054d0:	08005507 	.word	0x08005507
 80054d4:	080054f7 	.word	0x080054f7
 80054d8:	08005507 	.word	0x08005507
 80054dc:	08005507 	.word	0x08005507
 80054e0:	08005507 	.word	0x08005507
 80054e4:	080054ff 	.word	0x080054ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e8:	f7fd ffa8 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 80054ec:	61f8      	str	r0, [r7, #28]
        break;
 80054ee:	e010      	b.n	8005512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054f0:	4b8f      	ldr	r3, [pc, #572]	@ (8005730 <UART_SetConfig+0x56c>)
 80054f2:	61fb      	str	r3, [r7, #28]
        break;
 80054f4:	e00d      	b.n	8005512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054f6:	f7fd ff09 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80054fa:	61f8      	str	r0, [r7, #28]
        break;
 80054fc:	e009      	b.n	8005512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005502:	61fb      	str	r3, [r7, #28]
        break;
 8005504:	e005      	b.n	8005512 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005510:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80fb 	beq.w	8005710 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	4613      	mov	r3, r2
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	4413      	add	r3, r2
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	429a      	cmp	r2, r3
 8005528:	d305      	bcc.n	8005536 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005530:	69fa      	ldr	r2, [r7, #28]
 8005532:	429a      	cmp	r2, r3
 8005534:	d903      	bls.n	800553e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800553c:	e0e8      	b.n	8005710 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	2200      	movs	r2, #0
 8005542:	461c      	mov	r4, r3
 8005544:	4615      	mov	r5, r2
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	022b      	lsls	r3, r5, #8
 8005550:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005554:	0222      	lsls	r2, r4, #8
 8005556:	68f9      	ldr	r1, [r7, #12]
 8005558:	6849      	ldr	r1, [r1, #4]
 800555a:	0849      	lsrs	r1, r1, #1
 800555c:	2000      	movs	r0, #0
 800555e:	4688      	mov	r8, r1
 8005560:	4681      	mov	r9, r0
 8005562:	eb12 0a08 	adds.w	sl, r2, r8
 8005566:	eb43 0b09 	adc.w	fp, r3, r9
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	603b      	str	r3, [r7, #0]
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005578:	4650      	mov	r0, sl
 800557a:	4659      	mov	r1, fp
 800557c:	f7fa fe80 	bl	8000280 <__aeabi_uldivmod>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	4613      	mov	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800558e:	d308      	bcc.n	80055a2 <UART_SetConfig+0x3de>
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005596:	d204      	bcs.n	80055a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	60da      	str	r2, [r3, #12]
 80055a0:	e0b6      	b.n	8005710 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80055a8:	e0b2      	b.n	8005710 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055b2:	d15e      	bne.n	8005672 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80055b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d828      	bhi.n	800560e <UART_SetConfig+0x44a>
 80055bc:	a201      	add	r2, pc, #4	@ (adr r2, 80055c4 <UART_SetConfig+0x400>)
 80055be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c2:	bf00      	nop
 80055c4:	080055e9 	.word	0x080055e9
 80055c8:	080055f1 	.word	0x080055f1
 80055cc:	080055f9 	.word	0x080055f9
 80055d0:	0800560f 	.word	0x0800560f
 80055d4:	080055ff 	.word	0x080055ff
 80055d8:	0800560f 	.word	0x0800560f
 80055dc:	0800560f 	.word	0x0800560f
 80055e0:	0800560f 	.word	0x0800560f
 80055e4:	08005607 	.word	0x08005607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e8:	f7fd ff28 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 80055ec:	61f8      	str	r0, [r7, #28]
        break;
 80055ee:	e014      	b.n	800561a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055f0:	f7fd ff3a 	bl	8003468 <HAL_RCC_GetPCLK2Freq>
 80055f4:	61f8      	str	r0, [r7, #28]
        break;
 80055f6:	e010      	b.n	800561a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055f8:	4b4d      	ldr	r3, [pc, #308]	@ (8005730 <UART_SetConfig+0x56c>)
 80055fa:	61fb      	str	r3, [r7, #28]
        break;
 80055fc:	e00d      	b.n	800561a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055fe:	f7fd fe85 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8005602:	61f8      	str	r0, [r7, #28]
        break;
 8005604:	e009      	b.n	800561a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800560a:	61fb      	str	r3, [r7, #28]
        break;
 800560c:	e005      	b.n	800561a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d077      	beq.n	8005710 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	005a      	lsls	r2, r3, #1
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	085b      	lsrs	r3, r3, #1
 800562a:	441a      	add	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	fbb2 f3f3 	udiv	r3, r2, r3
 8005634:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	2b0f      	cmp	r3, #15
 800563a:	d916      	bls.n	800566a <UART_SetConfig+0x4a6>
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005642:	d212      	bcs.n	800566a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f023 030f 	bic.w	r3, r3, #15
 800564c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	085b      	lsrs	r3, r3, #1
 8005652:	b29b      	uxth	r3, r3
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	b29a      	uxth	r2, r3
 800565a:	8afb      	ldrh	r3, [r7, #22]
 800565c:	4313      	orrs	r3, r2
 800565e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	8afa      	ldrh	r2, [r7, #22]
 8005666:	60da      	str	r2, [r3, #12]
 8005668:	e052      	b.n	8005710 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005670:	e04e      	b.n	8005710 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005672:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005676:	2b08      	cmp	r3, #8
 8005678:	d827      	bhi.n	80056ca <UART_SetConfig+0x506>
 800567a:	a201      	add	r2, pc, #4	@ (adr r2, 8005680 <UART_SetConfig+0x4bc>)
 800567c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005680:	080056a5 	.word	0x080056a5
 8005684:	080056ad 	.word	0x080056ad
 8005688:	080056b5 	.word	0x080056b5
 800568c:	080056cb 	.word	0x080056cb
 8005690:	080056bb 	.word	0x080056bb
 8005694:	080056cb 	.word	0x080056cb
 8005698:	080056cb 	.word	0x080056cb
 800569c:	080056cb 	.word	0x080056cb
 80056a0:	080056c3 	.word	0x080056c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a4:	f7fd feca 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 80056a8:	61f8      	str	r0, [r7, #28]
        break;
 80056aa:	e014      	b.n	80056d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056ac:	f7fd fedc 	bl	8003468 <HAL_RCC_GetPCLK2Freq>
 80056b0:	61f8      	str	r0, [r7, #28]
        break;
 80056b2:	e010      	b.n	80056d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005730 <UART_SetConfig+0x56c>)
 80056b6:	61fb      	str	r3, [r7, #28]
        break;
 80056b8:	e00d      	b.n	80056d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ba:	f7fd fe27 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80056be:	61f8      	str	r0, [r7, #28]
        break;
 80056c0:	e009      	b.n	80056d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056c6:	61fb      	str	r3, [r7, #28]
        break;
 80056c8:	e005      	b.n	80056d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80056d4:	bf00      	nop
    }

    if (pclk != 0U)
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d019      	beq.n	8005710 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	085a      	lsrs	r2, r3, #1
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	441a      	add	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	2b0f      	cmp	r3, #15
 80056f4:	d909      	bls.n	800570a <UART_SetConfig+0x546>
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056fc:	d205      	bcs.n	800570a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	60da      	str	r2, [r3, #12]
 8005708:	e002      	b.n	8005710 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800571c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005720:	4618      	mov	r0, r3
 8005722:	3728      	adds	r7, #40	@ 0x28
 8005724:	46bd      	mov	sp, r7
 8005726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800572a:	bf00      	nop
 800572c:	40008000 	.word	0x40008000
 8005730:	00f42400 	.word	0x00f42400

08005734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c8:	f003 0310 	and.w	r3, r3, #16
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01a      	beq.n	800584a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005832:	d10a      	bne.n	800584a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	605a      	str	r2, [r3, #4]
  }
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b098      	sub	sp, #96	@ 0x60
 800587c:	af02      	add	r7, sp, #8
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005888:	f7fc f8a4 	bl	80019d4 <HAL_GetTick>
 800588c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b08      	cmp	r3, #8
 800589a:	d12e      	bne.n	80058fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800589c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058a4:	2200      	movs	r2, #0
 80058a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f88c 	bl	80059c8 <UART_WaitOnFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d021      	beq.n	80058fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058be:	e853 3f00 	ldrex	r3, [r3]
 80058c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	461a      	mov	r2, r3
 80058d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058dc:	e841 2300 	strex	r3, r2, [r1]
 80058e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1e6      	bne.n	80058b6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e062      	b.n	80059c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b04      	cmp	r3, #4
 8005906:	d149      	bne.n	800599c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005908:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005910:	2200      	movs	r2, #0
 8005912:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f856 	bl	80059c8 <UART_WaitOnFlagUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d03c      	beq.n	800599c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592a:	e853 3f00 	ldrex	r3, [r3]
 800592e:	623b      	str	r3, [r7, #32]
   return(result);
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	461a      	mov	r2, r3
 800593e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005940:	633b      	str	r3, [r7, #48]	@ 0x30
 8005942:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005944:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005948:	e841 2300 	strex	r3, r2, [r1]
 800594c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800594e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1e6      	bne.n	8005922 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3308      	adds	r3, #8
 800595a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	e853 3f00 	ldrex	r3, [r3]
 8005962:	60fb      	str	r3, [r7, #12]
   return(result);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0301 	bic.w	r3, r3, #1
 800596a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3308      	adds	r3, #8
 8005972:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005974:	61fa      	str	r2, [r7, #28]
 8005976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	69b9      	ldr	r1, [r7, #24]
 800597a:	69fa      	ldr	r2, [r7, #28]
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	617b      	str	r3, [r7, #20]
   return(result);
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e5      	bne.n	8005954 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e011      	b.n	80059c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3758      	adds	r7, #88	@ 0x58
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	603b      	str	r3, [r7, #0]
 80059d4:	4613      	mov	r3, r2
 80059d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d8:	e04f      	b.n	8005a7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e0:	d04b      	beq.n	8005a7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e2:	f7fb fff7 	bl	80019d4 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d302      	bcc.n	80059f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e04e      	b.n	8005a9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0304 	and.w	r3, r3, #4
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d037      	beq.n	8005a7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2b80      	cmp	r3, #128	@ 0x80
 8005a0e:	d034      	beq.n	8005a7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b40      	cmp	r3, #64	@ 0x40
 8005a14:	d031      	beq.n	8005a7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	f003 0308 	and.w	r3, r3, #8
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d110      	bne.n	8005a46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2208      	movs	r2, #8
 8005a2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 f838 	bl	8005aa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2208      	movs	r2, #8
 8005a36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e029      	b.n	8005a9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a54:	d111      	bne.n	8005a7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 f81e 	bl	8005aa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e00f      	b.n	8005a9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4013      	ands	r3, r2
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	bf0c      	ite	eq
 8005a8a:	2301      	moveq	r3, #1
 8005a8c:	2300      	movne	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	461a      	mov	r2, r3
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d0a0      	beq.n	80059da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b095      	sub	sp, #84	@ 0x54
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab2:	e853 3f00 	ldrex	r3, [r3]
 8005ab6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ac8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ace:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e6      	bne.n	8005aaa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	f023 0301 	bic.w	r3, r3, #1
 8005af2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	3308      	adds	r3, #8
 8005afa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005afc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005afe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b04:	e841 2300 	strex	r3, r2, [r1]
 8005b08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1e5      	bne.n	8005adc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d118      	bne.n	8005b4a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f023 0310 	bic.w	r3, r3, #16
 8005b2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b36:	61bb      	str	r3, [r7, #24]
 8005b38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3a:	6979      	ldr	r1, [r7, #20]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	613b      	str	r3, [r7, #16]
   return(result);
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1e6      	bne.n	8005b18 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b5e:	bf00      	nop
 8005b60:	3754      	adds	r7, #84	@ 0x54
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	f107 001c 	add.w	r0, r7, #28
 8005b78:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fa69 	bl	8006060 <USB_CoreReset>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005b92:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ba6:	e005      	b.n	8005bb4 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bc0:	b004      	add	sp, #16
 8005bc2:	4770      	bx	lr

08005bc4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f023 0201 	bic.w	r2, r3, #1
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c02:	78fb      	ldrb	r3, [r7, #3]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d115      	bne.n	8005c34 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c14:	200a      	movs	r0, #10
 8005c16:	f7fb fee9 	bl	80019ec <HAL_Delay>
      ms += 10U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	330a      	adds	r3, #10
 8005c1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fa0f 	bl	8006044 <USB_GetMode>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d01e      	beq.n	8005c6a <USB_SetCurrentMode+0x84>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005c30:	d9f0      	bls.n	8005c14 <USB_SetCurrentMode+0x2e>
 8005c32:	e01a      	b.n	8005c6a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c34:	78fb      	ldrb	r3, [r7, #3]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d115      	bne.n	8005c66 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c46:	200a      	movs	r0, #10
 8005c48:	f7fb fed0 	bl	80019ec <HAL_Delay>
      ms += 10U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	330a      	adds	r3, #10
 8005c50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f9f6 	bl	8006044 <USB_GetMode>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <USB_SetCurrentMode+0x84>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2bc7      	cmp	r3, #199	@ 0xc7
 8005c62:	d9f0      	bls.n	8005c46 <USB_SetCurrentMode+0x60>
 8005c64:	e001      	b.n	8005c6a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e005      	b.n	8005c76 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2bc8      	cmp	r3, #200	@ 0xc8
 8005c6e:	d101      	bne.n	8005c74 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c80:	b084      	sub	sp, #16
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b086      	sub	sp, #24
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	613b      	str	r3, [r7, #16]
 8005c9e:	e009      	b.n	8005cb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	3340      	adds	r3, #64	@ 0x40
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	2200      	movs	r2, #0
 8005cac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	613b      	str	r3, [r7, #16]
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	2b0e      	cmp	r3, #14
 8005cb8:	d9f2      	bls.n	8005ca0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d11c      	bne.n	8005cfc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cd0:	f043 0302 	orr.w	r3, r3, #2
 8005cd4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cda:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	e005      	b.n	8005d08 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d00:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d0e:	461a      	mov	r2, r3
 8005d10:	2300      	movs	r3, #0
 8005d12:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d14:	2103      	movs	r1, #3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f95a 	bl	8005fd0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d1c:	2110      	movs	r1, #16
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f8f6 	bl	8005f10 <USB_FlushTxFifo>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f920 	bl	8005f74 <USB_FlushRxFifo>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d44:	461a      	mov	r2, r3
 8005d46:	2300      	movs	r3, #0
 8005d48:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d50:	461a      	mov	r2, r3
 8005d52:	2300      	movs	r3, #0
 8005d54:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d62:	2300      	movs	r3, #0
 8005d64:	613b      	str	r3, [r7, #16]
 8005d66:	e043      	b.n	8005df0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d7e:	d118      	bne.n	8005db2 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10a      	bne.n	8005d9c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d92:	461a      	mov	r2, r3
 8005d94:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	e013      	b.n	8005dc4 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005da8:	461a      	mov	r2, r3
 8005daa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	e008      	b.n	8005dc4 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005de2:	461a      	mov	r2, r3
 8005de4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005de8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	3301      	adds	r3, #1
 8005dee:	613b      	str	r3, [r7, #16]
 8005df0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005df4:	461a      	mov	r2, r3
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d3b5      	bcc.n	8005d68 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	613b      	str	r3, [r7, #16]
 8005e00:	e043      	b.n	8005e8a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e18:	d118      	bne.n	8005e4c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10a      	bne.n	8005e36 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	e013      	b.n	8005e5e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e42:	461a      	mov	r2, r3
 8005e44:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e008      	b.n	8005e5e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e58:	461a      	mov	r2, r3
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	3301      	adds	r3, #1
 8005e88:	613b      	str	r3, [r7, #16]
 8005e8a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e8e:	461a      	mov	r2, r3
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d3b5      	bcc.n	8005e02 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ea8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005eb6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	f043 0210 	orr.w	r2, r3, #16
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	699a      	ldr	r2, [r3, #24]
 8005ec8:	4b10      	ldr	r3, [pc, #64]	@ (8005f0c <USB_DevInit+0x28c>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ed0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	f043 0208 	orr.w	r2, r3, #8
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ee4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d107      	bne.n	8005efc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ef4:	f043 0304 	orr.w	r3, r3, #4
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f08:	b004      	add	sp, #16
 8005f0a:	4770      	bx	lr
 8005f0c:	803c3800 	.word	0x803c3800

08005f10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3301      	adds	r3, #1
 8005f22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f2a:	d901      	bls.n	8005f30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e01b      	b.n	8005f68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	daf2      	bge.n	8005f1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	019b      	lsls	r3, r3, #6
 8005f40:	f043 0220 	orr.w	r2, r3, #32
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f54:	d901      	bls.n	8005f5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e006      	b.n	8005f68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0320 	and.w	r3, r3, #32
 8005f62:	2b20      	cmp	r3, #32
 8005f64:	d0f0      	beq.n	8005f48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3301      	adds	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f8c:	d901      	bls.n	8005f92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e018      	b.n	8005fc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	daf2      	bge.n	8005f80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2210      	movs	r2, #16
 8005fa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fb0:	d901      	bls.n	8005fb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e006      	b.n	8005fc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f003 0310 	and.w	r3, r3, #16
 8005fbe:	2b10      	cmp	r3, #16
 8005fc0:	d0f0      	beq.n	8005fa4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	68f9      	ldr	r1, [r7, #12]
 8005fec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006002:	b480      	push	{r7}
 8006004:	b085      	sub	sp, #20
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800601c:	f023 0303 	bic.w	r3, r3, #3
 8006020:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006030:	f043 0302 	orr.w	r3, r3, #2
 8006034:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	f003 0301 	and.w	r3, r3, #1
}
 8006054:	4618      	mov	r0, r3
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3301      	adds	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006078:	d901      	bls.n	800607e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e01b      	b.n	80060b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	daf2      	bge.n	800606c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f043 0201 	orr.w	r2, r3, #1
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	3301      	adds	r3, #1
 800609a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060a2:	d901      	bls.n	80060a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e006      	b.n	80060b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d0f0      	beq.n	8006096 <USB_CoreReset+0x36>

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <_ZN10WiFiModuleC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
#include "wifi_module.h"
#include "stm32l4xx_hal.h" // für HAL Funktionen
extern UART_HandleTypeDef huart1;


WiFiModule::WiFiModule(SPI_HandleTypeDef *hspi, GPIO_TypeDef* CS_GPIO_Port, uint16_t CS_Pin)
 80060c2:	b480      	push	{r7}
 80060c4:	b085      	sub	sp, #20
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	607a      	str	r2, [r7, #4]
 80060ce:	807b      	strh	r3, [r7, #2]
    : m_hspi(hspi), m_CS_GPIO_Port(CS_GPIO_Port), m_CS_Pin(CS_Pin) {}
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	605a      	str	r2, [r3, #4]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	887a      	ldrh	r2, [r7, #2]
 80060e0:	811a      	strh	r2, [r3, #8]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4618      	mov	r0, r3
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <_ZN10WiFiModule4initEv>:

bool WiFiModule::init() {
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b0c4      	sub	sp, #272	@ 0x110
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80060fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80060fe:	6018      	str	r0, [r3, #0]
    char response[128];
    char response_buffer[128];
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET); // Wakeup aktiv
 8006100:	2201      	movs	r2, #1
 8006102:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006106:	4818      	ldr	r0, [pc, #96]	@ (8006168 <_ZN10WiFiModule4initEv+0x78>)
 8006108:	f7fc f844 	bl	8002194 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800610c:	2032      	movs	r0, #50	@ 0x32
 800610e:	f7fb fc6d 	bl	80019ec <HAL_Delay>
    const char* msg1 = "Calling fetchPrompt...\r\n";
 8006112:	4b16      	ldr	r3, [pc, #88]	@ (800616c <_ZN10WiFiModule4initEv+0x7c>)
 8006114:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_UART_Transmit(&huart1, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 8006118:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800611c:	f7fa f858 	bl	80001d0 <strlen>
 8006120:	4603      	mov	r3, r0
 8006122:	b29a      	uxth	r2, r3
 8006124:	f04f 33ff 	mov.w	r3, #4294967295
 8006128:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 800612c:	4810      	ldr	r0, [pc, #64]	@ (8006170 <_ZN10WiFiModule4initEv+0x80>)
 800612e:	f7fe ffbf 	bl	80050b0 <HAL_UART_Transmit>

    if (!fetchPrompt(1000))
 8006132:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006136:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800613a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	f000 f982 	bl	8006448 <_ZN10WiFiModule11fetchPromptEm>
 8006144:	4603      	mov	r3, r0
 8006146:	f083 0301 	eor.w	r3, r3, #1
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d004      	beq.n	800615a <_ZN10WiFiModule4initEv+0x6a>
        {
            printf("Prompt Fetch Failed!\r\n");
 8006150:	4808      	ldr	r0, [pc, #32]	@ (8006174 <_ZN10WiFiModule4initEv+0x84>)
 8006152:	f003 ff63 	bl	800a01c <puts>
            return false;
 8006156:	2300      	movs	r3, #0
 8006158:	e000      	b.n	800615c <_ZN10WiFiModule4initEv+0x6c>
        }

    return true;
 800615a:	2301      	movs	r3, #1


}
 800615c:	4618      	mov	r0, r3
 800615e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	48001000 	.word	0x48001000
 800616c:	0800b2e4 	.word	0x0800b2e4
 8006170:	20000220 	.word	0x20000220
 8006174:	0800b300 	.word	0x0800b300

08006178 <_ZN10WiFiModule6selectEv>:
void WiFiModule::select() {
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(m_CS_GPIO_Port, m_CS_Pin, GPIO_PIN_RESET);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6858      	ldr	r0, [r3, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	891b      	ldrh	r3, [r3, #8]
 8006188:	2200      	movs	r2, #0
 800618a:	4619      	mov	r1, r3
 800618c:	f7fc f802 	bl	8002194 <HAL_GPIO_WritePin>
}
 8006190:	bf00      	nop
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <_ZN10WiFiModule8deselectEv>:

void WiFiModule::deselect() {
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(m_CS_GPIO_Port, m_CS_Pin, GPIO_PIN_SET);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6858      	ldr	r0, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	891b      	ldrh	r3, [r3, #8]
 80061a8:	2201      	movs	r2, #1
 80061aa:	4619      	mov	r1, r3
 80061ac:	f7fb fff2 	bl	8002194 <HAL_GPIO_WritePin>
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <_ZN10WiFiModule11sendCommandEPKcm>:

bool WiFiModule::sendCommand(const char* cmd, uint32_t timeout)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b0aa      	sub	sp, #168	@ 0xa8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef result;

    char cmd_buffer[128];
    strncpy(cmd_buffer, cmd, sizeof(cmd_buffer) - 1);
 80061c4:	f107 0318 	add.w	r3, r7, #24
 80061c8:	227f      	movs	r2, #127	@ 0x7f
 80061ca:	68b9      	ldr	r1, [r7, #8]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f004 f843 	bl	800a258 <strncpy>
    size_t len = strlen(cmd_buffer);
 80061d2:	f107 0318 	add.w	r3, r7, #24
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7f9 fffa 	bl	80001d0 <strlen>
 80061dc:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

    // Padding auf gerade Länge
    if (len % 2 != 0 && len < sizeof(cmd_buffer) - 1)
 80061e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00d      	beq.n	8006208 <_ZN10WiFiModule11sendCommandEPKcm+0x50>
 80061ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80061f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80061f2:	d809      	bhi.n	8006208 <_ZN10WiFiModule11sendCommandEPKcm+0x50>
    {
        cmd_buffer[len++] = 0x0A; // 0x0A (LF) ergänzen
 80061f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80061fe:	33a8      	adds	r3, #168	@ 0xa8
 8006200:	443b      	add	r3, r7
 8006202:	220a      	movs	r2, #10
 8006204:	f803 2c90 	strb.w	r2, [r3, #-144]
    }

    uint32_t start_tick = HAL_GetTick();
 8006208:	f7fb fbe4 	bl	80019d4 <HAL_GetTick>
 800620c:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    while (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == 0)
 8006210:	e012      	b.n	8006238 <_ZN10WiFiModule11sendCommandEPKcm+0x80>
    {
        if ((HAL_GetTick() - start_tick) > timeout)
 8006212:	f7fb fbdf 	bl	80019d4 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	429a      	cmp	r2, r3
 8006222:	bf34      	ite	cc
 8006224:	2301      	movcc	r3, #1
 8006226:	2300      	movcs	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d004      	beq.n	8006238 <_ZN10WiFiModule11sendCommandEPKcm+0x80>
        {
            printf("Timeout waiting for CMD/DATA READY before sending.\r\n");
 800622e:	483d      	ldr	r0, [pc, #244]	@ (8006324 <_ZN10WiFiModule11sendCommandEPKcm+0x16c>)
 8006230:	f003 fef4 	bl	800a01c <puts>
            return false;
 8006234:	2300      	movs	r3, #0
 8006236:	e071      	b.n	800631c <_ZN10WiFiModule11sendCommandEPKcm+0x164>
    while (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == 0)
 8006238:	2102      	movs	r1, #2
 800623a:	483b      	ldr	r0, [pc, #236]	@ (8006328 <_ZN10WiFiModule11sendCommandEPKcm+0x170>)
 800623c:	f7fb ff92 	bl	8002164 <HAL_GPIO_ReadPin>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	bf0c      	ite	eq
 8006246:	2301      	moveq	r3, #1
 8006248:	2300      	movne	r3, #0
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e0      	bne.n	8006212 <_ZN10WiFiModule11sendCommandEPKcm+0x5a>
        }
    }

    // --- Kommando 16-bit senden ---
    select();
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f7ff ff91 	bl	8006178 <_ZN10WiFiModule6selectEv>

    for (size_t i = 0; i < len; i += 2)
 8006256:	2300      	movs	r3, #0
 8006258:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800625c:	e030      	b.n	80062c0 <_ZN10WiFiModule11sendCommandEPKcm+0x108>
    {
        uint16_t word = (uint16_t)(((uint8_t)cmd_buffer[i+1] << 8) | (uint8_t)cmd_buffer[i]);
 800625e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006262:	3301      	adds	r3, #1
 8006264:	33a8      	adds	r3, #168	@ 0xa8
 8006266:	443b      	add	r3, r7
 8006268:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 800626c:	b21b      	sxth	r3, r3
 800626e:	021b      	lsls	r3, r3, #8
 8006270:	b21a      	sxth	r2, r3
 8006272:	f107 0118 	add.w	r1, r7, #24
 8006276:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800627a:	440b      	add	r3, r1
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	b21b      	sxth	r3, r3
 8006280:	4313      	orrs	r3, r2
 8006282:	b21b      	sxth	r3, r3
 8006284:	b29b      	uxth	r3, r3
 8006286:	82fb      	strh	r3, [r7, #22]
        result = HAL_SPI_Transmit(m_hspi, (uint8_t*)&word, 1, timeout);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	f107 0116 	add.w	r1, r7, #22
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f7fd feff 	bl	8004096 <HAL_SPI_Transmit>
 8006298:	4603      	mov	r3, r0
 800629a:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
        if (result != HAL_OK)
 800629e:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <_ZN10WiFiModule11sendCommandEPKcm+0xfe>
        {
            deselect();
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f7ff ff76 	bl	8006198 <_ZN10WiFiModule8deselectEv>
            printf("SPI Transmit Error during sendCommand.\r\n");
 80062ac:	481f      	ldr	r0, [pc, #124]	@ (800632c <_ZN10WiFiModule11sendCommandEPKcm+0x174>)
 80062ae:	f003 feb5 	bl	800a01c <puts>
            return false;
 80062b2:	2300      	movs	r3, #0
 80062b4:	e032      	b.n	800631c <_ZN10WiFiModule11sendCommandEPKcm+0x164>
    for (size_t i = 0; i < len; i += 2)
 80062b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80062ba:	3302      	adds	r3, #2
 80062bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062c0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80062c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d3c8      	bcc.n	800625e <_ZN10WiFiModule11sendCommandEPKcm+0xa6>
        }
    }

    deselect();
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f7ff ff63 	bl	8006198 <_ZN10WiFiModule8deselectEv>

    // --- Warten bis Command abgeschlossen ---
    start_tick = HAL_GetTick();
 80062d2:	f7fb fb7f 	bl	80019d4 <HAL_GetTick>
 80062d6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    while (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == GPIO_PIN_RESET)
 80062da:	e012      	b.n	8006302 <_ZN10WiFiModule11sendCommandEPKcm+0x14a>
    {
        if ((HAL_GetTick() - start_tick) > timeout)
 80062dc:	f7fb fb7a 	bl	80019d4 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	bf34      	ite	cc
 80062ee:	2301      	movcc	r3, #1
 80062f0:	2300      	movcs	r3, #0
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d004      	beq.n	8006302 <_ZN10WiFiModule11sendCommandEPKcm+0x14a>
        {
            printf("Timeout waiting for CMD/DATA READY after command phase.\r\n");
 80062f8:	480d      	ldr	r0, [pc, #52]	@ (8006330 <_ZN10WiFiModule11sendCommandEPKcm+0x178>)
 80062fa:	f003 fe8f 	bl	800a01c <puts>
            return false;
 80062fe:	2300      	movs	r3, #0
 8006300:	e00c      	b.n	800631c <_ZN10WiFiModule11sendCommandEPKcm+0x164>
    while (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == GPIO_PIN_RESET)
 8006302:	2102      	movs	r1, #2
 8006304:	4808      	ldr	r0, [pc, #32]	@ (8006328 <_ZN10WiFiModule11sendCommandEPKcm+0x170>)
 8006306:	f7fb ff2d 	bl	8002164 <HAL_GPIO_ReadPin>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	bf0c      	ite	eq
 8006310:	2301      	moveq	r3, #1
 8006312:	2300      	movne	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e0      	bne.n	80062dc <_ZN10WiFiModule11sendCommandEPKcm+0x124>
        }
    }

    return true;
 800631a:	2301      	movs	r3, #1
}
 800631c:	4618      	mov	r0, r3
 800631e:	37a8      	adds	r7, #168	@ 0xa8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	0800b318 	.word	0x0800b318
 8006328:	48001000 	.word	0x48001000
 800632c:	0800b34c 	.word	0x0800b34c
 8006330:	0800b374 	.word	0x0800b374

08006334 <_ZN10WiFiModule8readDataEPhjm>:

int WiFiModule::readData(uint8_t* buffer, size_t buffer_len, uint32_t timeout)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b08a      	sub	sp, #40	@ 0x28
 8006338:	af02      	add	r7, sp, #8
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef result;
    uint32_t start_tick = HAL_GetTick();
 8006342:	f7fb fb47 	bl	80019d4 <HAL_GetTick>
 8006346:	61b8      	str	r0, [r7, #24]
    size_t received = 0;
 8006348:	2300      	movs	r3, #0
 800634a:	61fb      	str	r3, [r7, #28]
    uint8_t dummy_tx[2] = {0x0A, 0x0A};
 800634c:	f640 230a 	movw	r3, #2570	@ 0xa0a
 8006350:	82bb      	strh	r3, [r7, #20]

    select();
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f7ff ff10 	bl	8006178 <_ZN10WiFiModule6selectEv>
    while ((HAL_GetTick() - start_tick) < timeout && received < (buffer_len - 2))
 8006358:	e039      	b.n	80063ce <_ZN10WiFiModule8readDataEPhjm+0x9a>
    {
        if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == GPIO_PIN_RESET)
 800635a:	2102      	movs	r1, #2
 800635c:	4838      	ldr	r0, [pc, #224]	@ (8006440 <_ZN10WiFiModule8readDataEPhjm+0x10c>)
 800635e:	f7fb ff01 	bl	8002164 <HAL_GPIO_ReadPin>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	bf0c      	ite	eq
 8006368:	2301      	moveq	r3, #1
 800636a:	2300      	movne	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d140      	bne.n	80063f4 <_ZN10WiFiModule8readDataEPhjm+0xc0>
        {
            // Keine Daten mehr verfügbar
            break;
        }

        uint8_t rx_buf[2] = {0};
 8006372:	2300      	movs	r3, #0
 8006374:	823b      	strh	r3, [r7, #16]
        result = HAL_SPI_TransmitReceive(m_hspi, dummy_tx, rx_buf, 2, 10);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6818      	ldr	r0, [r3, #0]
 800637a:	f107 0210 	add.w	r2, r7, #16
 800637e:	f107 0114 	add.w	r1, r7, #20
 8006382:	230a      	movs	r3, #10
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	2302      	movs	r3, #2
 8006388:	f7fd fffb 	bl	8004382 <HAL_SPI_TransmitReceive>
 800638c:	4603      	mov	r3, r0
 800638e:	75fb      	strb	r3, [r7, #23]

        if (result == HAL_OK)
 8006390:	7dfb      	ldrb	r3, [r7, #23]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d118      	bne.n	80063c8 <_ZN10WiFiModule8readDataEPhjm+0x94>
        {
            if (received < buffer_len - 2) buffer[received++] = rx_buf[0];
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	3b02      	subs	r3, #2
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	429a      	cmp	r2, r3
 800639e:	d206      	bcs.n	80063ae <_ZN10WiFiModule8readDataEPhjm+0x7a>
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	61fa      	str	r2, [r7, #28]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	4413      	add	r3, r2
 80063aa:	7c3a      	ldrb	r2, [r7, #16]
 80063ac:	701a      	strb	r2, [r3, #0]
            if (received < buffer_len - 1) buffer[received++] = rx_buf[1];
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d20a      	bcs.n	80063ce <_ZN10WiFiModule8readDataEPhjm+0x9a>
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	61fa      	str	r2, [r7, #28]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	4413      	add	r3, r2
 80063c2:	7c7a      	ldrb	r2, [r7, #17]
 80063c4:	701a      	strb	r2, [r3, #0]
 80063c6:	e002      	b.n	80063ce <_ZN10WiFiModule8readDataEPhjm+0x9a>
        }
        else
        {
            HAL_Delay(1);
 80063c8:	2001      	movs	r0, #1
 80063ca:	f7fb fb0f 	bl	80019ec <HAL_Delay>
    while ((HAL_GetTick() - start_tick) < timeout && received < (buffer_len - 2))
 80063ce:	f7fb fb01 	bl	80019d4 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d906      	bls.n	80063ec <_ZN10WiFiModule8readDataEPhjm+0xb8>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3b02      	subs	r3, #2
 80063e2:	69fa      	ldr	r2, [r7, #28]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d201      	bcs.n	80063ec <_ZN10WiFiModule8readDataEPhjm+0xb8>
 80063e8:	2301      	movs	r3, #1
 80063ea:	e000      	b.n	80063ee <_ZN10WiFiModule8readDataEPhjm+0xba>
 80063ec:	2300      	movs	r3, #0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1b3      	bne.n	800635a <_ZN10WiFiModule8readDataEPhjm+0x26>
 80063f2:	e000      	b.n	80063f6 <_ZN10WiFiModule8readDataEPhjm+0xc2>
            break;
 80063f4:	bf00      	nop
        }
    }
    deselect();
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f7ff fece 	bl	8006198 <_ZN10WiFiModule8deselectEv>

    // Padding 0x15 am Ende entfernen
    while (received > 0 && buffer[received - 1] == 0x15) {
 80063fc:	e002      	b.n	8006404 <_ZN10WiFiModule8readDataEPhjm+0xd0>
        received--;
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	3b01      	subs	r3, #1
 8006402:	61fb      	str	r3, [r7, #28]
    while (received > 0 && buffer[received - 1] == 0x15) {
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d006      	beq.n	8006418 <_ZN10WiFiModule8readDataEPhjm+0xe4>
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	3b01      	subs	r3, #1
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	4413      	add	r3, r2
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b15      	cmp	r3, #21
 8006416:	d0f2      	beq.n	80063fe <_ZN10WiFiModule8readDataEPhjm+0xca>
    }

    // Nur Nullterminator setzen, wenn noch Platz im Buffer ist
    if (received < buffer_len) {
 8006418:	69fa      	ldr	r2, [r7, #28]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	429a      	cmp	r2, r3
 800641e:	d204      	bcs.n	800642a <_ZN10WiFiModule8readDataEPhjm+0xf6>
        buffer[received] = '\0';
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	4413      	add	r3, r2
 8006426:	2200      	movs	r2, #0
 8006428:	701a      	strb	r2, [r3, #0]
    }

    printf("Data received (%d bytes)\r\n", (int)received);
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	4619      	mov	r1, r3
 800642e:	4805      	ldr	r0, [pc, #20]	@ (8006444 <_ZN10WiFiModule8readDataEPhjm+0x110>)
 8006430:	f003 fd8c 	bl	8009f4c <iprintf>
    return (int)received;
 8006434:	69fb      	ldr	r3, [r7, #28]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3720      	adds	r7, #32
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	48001000 	.word	0x48001000
 8006444:	0800b3b0 	.word	0x0800b3b0

08006448 <_ZN10WiFiModule11fetchPromptEm>:




bool WiFiModule::fetchPrompt(uint32_t timeout)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b0a8      	sub	sp, #160	@ 0xa0
 800644c:	af02      	add	r7, sp, #8
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
    uint8_t tx_buf[2] = {0x0A, 0x0A}; // Dummy 0x0A0A senden
 8006452:	f640 230a 	movw	r3, #2570	@ 0xa0a
 8006456:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
    uint8_t rx_buf[2] = {0};
 800645a:	2300      	movs	r3, #0
 800645c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    uint8_t response[128] = {0}; // Lokaler Buffer für den empfangenen Prompt
 8006460:	f107 0308 	add.w	r3, r7, #8
 8006464:	2280      	movs	r2, #128	@ 0x80
 8006466:	2100      	movs	r1, #0
 8006468:	4618      	mov	r0, r3
 800646a:	f003 feed 	bl	800a248 <memset>
    size_t received = 0;
 800646e:	2300      	movs	r3, #0
 8006470:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint32_t start_tick = HAL_GetTick();
 8006474:	f7fb faae 	bl	80019d4 <HAL_GetTick>
 8006478:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

    select(); // SSN aktiv LOW
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff fe7b 	bl	8006178 <_ZN10WiFiModule6selectEv>

    while ((HAL_GetTick() - start_tick) < timeout)
 8006482:	e03f      	b.n	8006504 <_ZN10WiFiModule11fetchPromptEm+0xbc>
    {
        if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == GPIO_PIN_RESET)
 8006484:	2102      	movs	r1, #2
 8006486:	483a      	ldr	r0, [pc, #232]	@ (8006570 <_ZN10WiFiModule11fetchPromptEm+0x128>)
 8006488:	f7fb fe6c 	bl	8002164 <HAL_GPIO_ReadPin>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	bf0c      	ite	eq
 8006492:	2301      	moveq	r3, #1
 8006494:	2300      	movne	r3, #0
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	d142      	bne.n	8006522 <_ZN10WiFiModule11fetchPromptEm+0xda>
        {
            // Prompt vollständig empfangen
            break;
        }

        HAL_StatusTypeDef result = HAL_SPI_TransmitReceive(m_hspi, tx_buf, rx_buf, 2, 10);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6818      	ldr	r0, [r3, #0]
 80064a0:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80064a4:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 80064a8:	230a      	movs	r3, #10
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	2302      	movs	r3, #2
 80064ae:	f7fd ff68 	bl	8004382 <HAL_SPI_TransmitReceive>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

        if (result == HAL_OK)
 80064b8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d11e      	bne.n	80064fe <_ZN10WiFiModule11fetchPromptEm+0xb6>
        {
            if (received < sizeof(response) - 2) response[received++] = rx_buf[0];
 80064c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80064c4:	2b7d      	cmp	r3, #125	@ 0x7d
 80064c6:	d80a      	bhi.n	80064de <_ZN10WiFiModule11fetchPromptEm+0x96>
 80064c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064d2:	f897 2088 	ldrb.w	r2, [r7, #136]	@ 0x88
 80064d6:	3398      	adds	r3, #152	@ 0x98
 80064d8:	443b      	add	r3, r7
 80064da:	f803 2c90 	strb.w	r2, [r3, #-144]
            if (received < sizeof(response) - 1) response[received++] = rx_buf[1];
 80064de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80064e2:	2b7e      	cmp	r3, #126	@ 0x7e
 80064e4:	d80e      	bhi.n	8006504 <_ZN10WiFiModule11fetchPromptEm+0xbc>
 80064e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064f0:	f897 2089 	ldrb.w	r2, [r7, #137]	@ 0x89
 80064f4:	3398      	adds	r3, #152	@ 0x98
 80064f6:	443b      	add	r3, r7
 80064f8:	f803 2c90 	strb.w	r2, [r3, #-144]
 80064fc:	e002      	b.n	8006504 <_ZN10WiFiModule11fetchPromptEm+0xbc>
        }
        else
        {
            HAL_Delay(1); // Bei Kommunikationsfehlern kurz warten
 80064fe:	2001      	movs	r0, #1
 8006500:	f7fb fa74 	bl	80019ec <HAL_Delay>
    while ((HAL_GetTick() - start_tick) < timeout)
 8006504:	f7fb fa66 	bl	80019d4 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	bf8c      	ite	hi
 8006516:	2301      	movhi	r3, #1
 8006518:	2300      	movls	r3, #0
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1b1      	bne.n	8006484 <_ZN10WiFiModule11fetchPromptEm+0x3c>
 8006520:	e000      	b.n	8006524 <_ZN10WiFiModule11fetchPromptEm+0xdc>
            break;
 8006522:	bf00      	nop
        }
    }

    deselect(); // SSN wieder HIGH
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff fe37 	bl	8006198 <_ZN10WiFiModule8deselectEv>

    if (received > 0 && received < sizeof(response))
 800652a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <_ZN10WiFiModule11fetchPromptEm+0x100>
 8006532:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006536:	2b7f      	cmp	r3, #127	@ 0x7f
 8006538:	d806      	bhi.n	8006548 <_ZN10WiFiModule11fetchPromptEm+0x100>
        response[received] = '\0'; // Abschluss Nullterminator setzen
 800653a:	f107 0208 	add.w	r2, r7, #8
 800653e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006542:	4413      	add	r3, r2
 8006544:	2200      	movs	r2, #0
 8006546:	701a      	strb	r2, [r3, #0]

    printf("Prompt received (%d bytes): %s\r\n", (int)received, response);
 8006548:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800654c:	f107 0208 	add.w	r2, r7, #8
 8006550:	4619      	mov	r1, r3
 8006552:	4808      	ldr	r0, [pc, #32]	@ (8006574 <_ZN10WiFiModule11fetchPromptEm+0x12c>)
 8006554:	f003 fcfa 	bl	8009f4c <iprintf>

    return (received > 0); // Erfolg: Mindestens ein Byte empfangen
 8006558:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800655c:	2b00      	cmp	r3, #0
 800655e:	bf14      	ite	ne
 8006560:	2301      	movne	r3, #1
 8006562:	2300      	moveq	r3, #0
 8006564:	b2db      	uxtb	r3, r3
}
 8006566:	4618      	mov	r0, r3
 8006568:	3798      	adds	r7, #152	@ 0x98
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	48001000 	.word	0x48001000
 8006574:	0800b3cc 	.word	0x0800b3cc

08006578 <wifi_init>:

    extern SPI_HandleTypeDef hspi3;

    static WiFiModule wifi(&hspi3, GPIOE, GPIO_PIN_0);

    bool wifi_init(void) {
 8006578:	b580      	push	{r7, lr}
 800657a:	af00      	add	r7, sp, #0
        return wifi.init();
 800657c:	4802      	ldr	r0, [pc, #8]	@ (8006588 <wifi_init+0x10>)
 800657e:	f7ff fdb7 	bl	80060f0 <_ZN10WiFiModule4initEv>
 8006582:	4603      	mov	r3, r0
    }
 8006584:	4618      	mov	r0, r3
 8006586:	bd80      	pop	{r7, pc}
 8006588:	200008ac 	.word	0x200008ac

0800658c <wifi_read_data>:

    bool wifi_connect(const char* ssid, const char* password) {
        return wifi.connect(ssid, password);
    }

    int wifi_read_data(uint8_t* buffer, size_t buffer_len, uint32_t timeout) {
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
        return wifi.readData(buffer, buffer_len, timeout);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	68f9      	ldr	r1, [r7, #12]
 800659e:	4804      	ldr	r0, [pc, #16]	@ (80065b0 <wifi_read_data+0x24>)
 80065a0:	f7ff fec8 	bl	8006334 <_ZN10WiFiModule8readDataEPhjm>
 80065a4:	4603      	mov	r3, r0
    }
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	200008ac 	.word	0x200008ac

080065b4 <wifi_send_command>:

    bool wifi_send_command(const char* cmd, uint32_t timeout) {
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
        return wifi.sendCommand(cmd, timeout);
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	4804      	ldr	r0, [pc, #16]	@ (80065d4 <wifi_send_command+0x20>)
 80065c4:	f7ff fdf8 	bl	80061b8 <_ZN10WiFiModule11sendCommandEPKcm>
 80065c8:	4603      	mov	r3, r0
    }
 80065ca:	4618      	mov	r0, r3
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	200008ac 	.word	0x200008ac

080065d8 <_Z41__static_initialization_and_destruction_0v>:
}
 80065d8:	b580      	push	{r7, lr}
 80065da:	af00      	add	r7, sp, #0
    static WiFiModule wifi(&hspi3, GPIOE, GPIO_PIN_0);
 80065dc:	2301      	movs	r3, #1
 80065de:	4a03      	ldr	r2, [pc, #12]	@ (80065ec <_Z41__static_initialization_and_destruction_0v+0x14>)
 80065e0:	4903      	ldr	r1, [pc, #12]	@ (80065f0 <_Z41__static_initialization_and_destruction_0v+0x18>)
 80065e2:	4804      	ldr	r0, [pc, #16]	@ (80065f4 <_Z41__static_initialization_and_destruction_0v+0x1c>)
 80065e4:	f7ff fd6d 	bl	80060c2 <_ZN10WiFiModuleC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
}
 80065e8:	bf00      	nop
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	48001000 	.word	0x48001000
 80065f0:	200001bc 	.word	0x200001bc
 80065f4:	200008ac 	.word	0x200008ac

080065f8 <_GLOBAL__sub_I_wifi_init>:
 80065f8:	b580      	push	{r7, lr}
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	f7ff ffec 	bl	80065d8 <_Z41__static_initialization_and_destruction_0v>
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <__NVIC_SetPriority>:
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	4603      	mov	r3, r0
 800660c:	6039      	str	r1, [r7, #0]
 800660e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006614:	2b00      	cmp	r3, #0
 8006616:	db0a      	blt.n	800662e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	b2da      	uxtb	r2, r3
 800661c:	490c      	ldr	r1, [pc, #48]	@ (8006650 <__NVIC_SetPriority+0x4c>)
 800661e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006622:	0112      	lsls	r2, r2, #4
 8006624:	b2d2      	uxtb	r2, r2
 8006626:	440b      	add	r3, r1
 8006628:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800662c:	e00a      	b.n	8006644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	b2da      	uxtb	r2, r3
 8006632:	4908      	ldr	r1, [pc, #32]	@ (8006654 <__NVIC_SetPriority+0x50>)
 8006634:	79fb      	ldrb	r3, [r7, #7]
 8006636:	f003 030f 	and.w	r3, r3, #15
 800663a:	3b04      	subs	r3, #4
 800663c:	0112      	lsls	r2, r2, #4
 800663e:	b2d2      	uxtb	r2, r2
 8006640:	440b      	add	r3, r1
 8006642:	761a      	strb	r2, [r3, #24]
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	e000e100 	.word	0xe000e100
 8006654:	e000ed00 	.word	0xe000ed00

08006658 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800665c:	4b05      	ldr	r3, [pc, #20]	@ (8006674 <SysTick_Handler+0x1c>)
 800665e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006660:	f002 fa32 	bl	8008ac8 <xTaskGetSchedulerState>
 8006664:	4603      	mov	r3, r0
 8006666:	2b01      	cmp	r3, #1
 8006668:	d001      	beq.n	800666e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800666a:	f003 f92d 	bl	80098c8 <xPortSysTickHandler>
  }
}
 800666e:	bf00      	nop
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	e000e010 	.word	0xe000e010

08006678 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800667c:	2100      	movs	r1, #0
 800667e:	f06f 0004 	mvn.w	r0, #4
 8006682:	f7ff ffbf 	bl	8006604 <__NVIC_SetPriority>
#endif
}
 8006686:	bf00      	nop
 8006688:	bd80      	pop	{r7, pc}
	...

0800668c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006692:	f3ef 8305 	mrs	r3, IPSR
 8006696:	603b      	str	r3, [r7, #0]
  return(result);
 8006698:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800669e:	f06f 0305 	mvn.w	r3, #5
 80066a2:	607b      	str	r3, [r7, #4]
 80066a4:	e00c      	b.n	80066c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80066a6:	4b0a      	ldr	r3, [pc, #40]	@ (80066d0 <osKernelInitialize+0x44>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d105      	bne.n	80066ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80066ae:	4b08      	ldr	r3, [pc, #32]	@ (80066d0 <osKernelInitialize+0x44>)
 80066b0:	2201      	movs	r2, #1
 80066b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	607b      	str	r3, [r7, #4]
 80066b8:	e002      	b.n	80066c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80066ba:	f04f 33ff 	mov.w	r3, #4294967295
 80066be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80066c0:	687b      	ldr	r3, [r7, #4]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	200008b8 	.word	0x200008b8

080066d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066da:	f3ef 8305 	mrs	r3, IPSR
 80066de:	603b      	str	r3, [r7, #0]
  return(result);
 80066e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80066e6:	f06f 0305 	mvn.w	r3, #5
 80066ea:	607b      	str	r3, [r7, #4]
 80066ec:	e010      	b.n	8006710 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80066ee:	4b0b      	ldr	r3, [pc, #44]	@ (800671c <osKernelStart+0x48>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d109      	bne.n	800670a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80066f6:	f7ff ffbf 	bl	8006678 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80066fa:	4b08      	ldr	r3, [pc, #32]	@ (800671c <osKernelStart+0x48>)
 80066fc:	2202      	movs	r2, #2
 80066fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006700:	f001 fd6e 	bl	80081e0 <vTaskStartScheduler>
      stat = osOK;
 8006704:	2300      	movs	r3, #0
 8006706:	607b      	str	r3, [r7, #4]
 8006708:	e002      	b.n	8006710 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800670a:	f04f 33ff 	mov.w	r3, #4294967295
 800670e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006710:	687b      	ldr	r3, [r7, #4]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	200008b8 	.word	0x200008b8

08006720 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006720:	b580      	push	{r7, lr}
 8006722:	b08e      	sub	sp, #56	@ 0x38
 8006724:	af04      	add	r7, sp, #16
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800672c:	2300      	movs	r3, #0
 800672e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006730:	f3ef 8305 	mrs	r3, IPSR
 8006734:	617b      	str	r3, [r7, #20]
  return(result);
 8006736:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006738:	2b00      	cmp	r3, #0
 800673a:	d17e      	bne.n	800683a <osThreadNew+0x11a>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d07b      	beq.n	800683a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006742:	2380      	movs	r3, #128	@ 0x80
 8006744:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006746:	2318      	movs	r3, #24
 8006748:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800674e:	f04f 33ff 	mov.w	r3, #4294967295
 8006752:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d045      	beq.n	80067e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <osThreadNew+0x48>
        name = attr->name;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d008      	beq.n	800678e <osThreadNew+0x6e>
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	2b38      	cmp	r3, #56	@ 0x38
 8006780:	d805      	bhi.n	800678e <osThreadNew+0x6e>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <osThreadNew+0x72>
        return (NULL);
 800678e:	2300      	movs	r3, #0
 8006790:	e054      	b.n	800683c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	089b      	lsrs	r3, r3, #2
 80067a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00e      	beq.n	80067c8 <osThreadNew+0xa8>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	2ba7      	cmp	r3, #167	@ 0xa7
 80067b0:	d90a      	bls.n	80067c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d006      	beq.n	80067c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <osThreadNew+0xa8>
        mem = 1;
 80067c2:	2301      	movs	r3, #1
 80067c4:	61bb      	str	r3, [r7, #24]
 80067c6:	e010      	b.n	80067ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10c      	bne.n	80067ea <osThreadNew+0xca>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d108      	bne.n	80067ea <osThreadNew+0xca>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d104      	bne.n	80067ea <osThreadNew+0xca>
          mem = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	61bb      	str	r3, [r7, #24]
 80067e4:	e001      	b.n	80067ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d110      	bne.n	8006812 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067f8:	9202      	str	r2, [sp, #8]
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	6a3a      	ldr	r2, [r7, #32]
 8006804:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f001 faf6 	bl	8007df8 <xTaskCreateStatic>
 800680c:	4603      	mov	r3, r0
 800680e:	613b      	str	r3, [r7, #16]
 8006810:	e013      	b.n	800683a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d110      	bne.n	800683a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	b29a      	uxth	r2, r3
 800681c:	f107 0310 	add.w	r3, r7, #16
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f001 fb44 	bl	8007eb8 <xTaskCreate>
 8006830:	4603      	mov	r3, r0
 8006832:	2b01      	cmp	r3, #1
 8006834:	d001      	beq.n	800683a <osThreadNew+0x11a>
            hTask = NULL;
 8006836:	2300      	movs	r3, #0
 8006838:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800683a:	693b      	ldr	r3, [r7, #16]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3728      	adds	r7, #40	@ 0x28
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800684c:	f3ef 8305 	mrs	r3, IPSR
 8006850:	60bb      	str	r3, [r7, #8]
  return(result);
 8006852:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <osDelay+0x1c>
    stat = osErrorISR;
 8006858:	f06f 0305 	mvn.w	r3, #5
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	e007      	b.n	8006870 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006860:	2300      	movs	r3, #0
 8006862:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <osDelay+0x2c>
      vTaskDelay(ticks);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f001 fc82 	bl	8008174 <vTaskDelay>
    }
  }

  return (stat);
 8006870:	68fb      	ldr	r3, [r7, #12]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800687a:	b580      	push	{r7, lr}
 800687c:	b088      	sub	sp, #32
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006882:	2300      	movs	r3, #0
 8006884:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006886:	f3ef 8305 	mrs	r3, IPSR
 800688a:	60bb      	str	r3, [r7, #8]
  return(result);
 800688c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800688e:	2b00      	cmp	r3, #0
 8006890:	d174      	bne.n	800697c <osMutexNew+0x102>
    if (attr != NULL) {
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	61bb      	str	r3, [r7, #24]
 800689e:	e001      	b.n	80068a4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <osMutexNew+0x3a>
      rmtx = 1U;
 80068ae:	2301      	movs	r3, #1
 80068b0:	617b      	str	r3, [r7, #20]
 80068b2:	e001      	b.n	80068b8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	f003 0308 	and.w	r3, r3, #8
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d15c      	bne.n	800697c <osMutexNew+0x102>
      mem = -1;
 80068c2:	f04f 33ff 	mov.w	r3, #4294967295
 80068c6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d015      	beq.n	80068fa <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d006      	beq.n	80068e4 <osMutexNew+0x6a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	2b4f      	cmp	r3, #79	@ 0x4f
 80068dc:	d902      	bls.n	80068e4 <osMutexNew+0x6a>
          mem = 1;
 80068de:	2301      	movs	r3, #1
 80068e0:	613b      	str	r3, [r7, #16]
 80068e2:	e00c      	b.n	80068fe <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d108      	bne.n	80068fe <osMutexNew+0x84>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d104      	bne.n	80068fe <osMutexNew+0x84>
            mem = 0;
 80068f4:	2300      	movs	r3, #0
 80068f6:	613b      	str	r3, [r7, #16]
 80068f8:	e001      	b.n	80068fe <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d112      	bne.n	800692a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d007      	beq.n	800691a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	4619      	mov	r1, r3
 8006910:	2004      	movs	r0, #4
 8006912:	f000 fc50 	bl	80071b6 <xQueueCreateMutexStatic>
 8006916:	61f8      	str	r0, [r7, #28]
 8006918:	e016      	b.n	8006948 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	4619      	mov	r1, r3
 8006920:	2001      	movs	r0, #1
 8006922:	f000 fc48 	bl	80071b6 <xQueueCreateMutexStatic>
 8006926:	61f8      	str	r0, [r7, #28]
 8006928:	e00e      	b.n	8006948 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10b      	bne.n	8006948 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d004      	beq.n	8006940 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006936:	2004      	movs	r0, #4
 8006938:	f000 fc25 	bl	8007186 <xQueueCreateMutex>
 800693c:	61f8      	str	r0, [r7, #28]
 800693e:	e003      	b.n	8006948 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006940:	2001      	movs	r0, #1
 8006942:	f000 fc20 	bl	8007186 <xQueueCreateMutex>
 8006946:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00c      	beq.n	8006968 <osMutexNew+0xee>
        if (attr != NULL) {
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d003      	beq.n	800695c <osMutexNew+0xe2>
          name = attr->name;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	e001      	b.n	8006960 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800695c:	2300      	movs	r3, #0
 800695e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006960:	68f9      	ldr	r1, [r7, #12]
 8006962:	69f8      	ldr	r0, [r7, #28]
 8006964:	f001 f9ea 	bl	8007d3c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d006      	beq.n	800697c <osMutexNew+0x102>
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	f043 0301 	orr.w	r3, r3, #1
 800697a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800697c:	69fb      	ldr	r3, [r7, #28]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3720      	adds	r7, #32
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006986:	b580      	push	{r7, lr}
 8006988:	b086      	sub	sp, #24
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f023 0301 	bic.w	r3, r3, #1
 8006996:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80069a0:	2300      	movs	r3, #0
 80069a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069a4:	f3ef 8305 	mrs	r3, IPSR
 80069a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80069aa:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d003      	beq.n	80069b8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80069b0:	f06f 0305 	mvn.w	r3, #5
 80069b4:	617b      	str	r3, [r7, #20]
 80069b6:	e02c      	b.n	8006a12 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d103      	bne.n	80069c6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80069be:	f06f 0303 	mvn.w	r3, #3
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	e025      	b.n	8006a12 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d011      	beq.n	80069f0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6938      	ldr	r0, [r7, #16]
 80069d0:	f000 fc41 	bl	8007256 <xQueueTakeMutexRecursive>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d01b      	beq.n	8006a12 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80069e0:	f06f 0301 	mvn.w	r3, #1
 80069e4:	617b      	str	r3, [r7, #20]
 80069e6:	e014      	b.n	8006a12 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80069e8:	f06f 0302 	mvn.w	r3, #2
 80069ec:	617b      	str	r3, [r7, #20]
 80069ee:	e010      	b.n	8006a12 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6938      	ldr	r0, [r7, #16]
 80069f4:	f000 fee8 	bl	80077c8 <xQueueSemaphoreTake>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d009      	beq.n	8006a12 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d003      	beq.n	8006a0c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006a04:	f06f 0301 	mvn.w	r3, #1
 8006a08:	617b      	str	r3, [r7, #20]
 8006a0a:	e002      	b.n	8006a12 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006a0c:	f06f 0302 	mvn.w	r3, #2
 8006a10:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006a12:	697b      	ldr	r3, [r7, #20]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f023 0301 	bic.w	r3, r3, #1
 8006a2a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006a34:	2300      	movs	r3, #0
 8006a36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a38:	f3ef 8305 	mrs	r3, IPSR
 8006a3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a3e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <osMutexRelease+0x30>
    stat = osErrorISR;
 8006a44:	f06f 0305 	mvn.w	r3, #5
 8006a48:	617b      	str	r3, [r7, #20]
 8006a4a:	e01f      	b.n	8006a8c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006a52:	f06f 0303 	mvn.w	r3, #3
 8006a56:	617b      	str	r3, [r7, #20]
 8006a58:	e018      	b.n	8006a8c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d009      	beq.n	8006a74 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006a60:	6938      	ldr	r0, [r7, #16]
 8006a62:	f000 fbc3 	bl	80071ec <xQueueGiveMutexRecursive>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d00f      	beq.n	8006a8c <osMutexRelease+0x70>
        stat = osErrorResource;
 8006a6c:	f06f 0302 	mvn.w	r3, #2
 8006a70:	617b      	str	r3, [r7, #20]
 8006a72:	e00b      	b.n	8006a8c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006a74:	2300      	movs	r3, #0
 8006a76:	2200      	movs	r2, #0
 8006a78:	2100      	movs	r1, #0
 8006a7a:	6938      	ldr	r0, [r7, #16]
 8006a7c:	f000 fc22 	bl	80072c4 <xQueueGenericSend>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d002      	beq.n	8006a8c <osMutexRelease+0x70>
        stat = osErrorResource;
 8006a86:	f06f 0302 	mvn.w	r3, #2
 8006a8a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006a8c:	697b      	ldr	r3, [r7, #20]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b08a      	sub	sp, #40	@ 0x28
 8006a9a:	af02      	add	r7, sp, #8
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	60b9      	str	r1, [r7, #8]
 8006aa0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aa6:	f3ef 8305 	mrs	r3, IPSR
 8006aaa:	613b      	str	r3, [r7, #16]
  return(result);
 8006aac:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d15f      	bne.n	8006b72 <osMessageQueueNew+0xdc>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d05c      	beq.n	8006b72 <osMessageQueueNew+0xdc>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d059      	beq.n	8006b72 <osMessageQueueNew+0xdc>
    mem = -1;
 8006abe:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d029      	beq.n	8006b1e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d012      	beq.n	8006af8 <osMessageQueueNew+0x62>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	2b4f      	cmp	r3, #79	@ 0x4f
 8006ad8:	d90e      	bls.n	8006af8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	695a      	ldr	r2, [r3, #20]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	68b9      	ldr	r1, [r7, #8]
 8006aea:	fb01 f303 	mul.w	r3, r1, r3
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d302      	bcc.n	8006af8 <osMessageQueueNew+0x62>
        mem = 1;
 8006af2:	2301      	movs	r3, #1
 8006af4:	61bb      	str	r3, [r7, #24]
 8006af6:	e014      	b.n	8006b22 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d110      	bne.n	8006b22 <osMessageQueueNew+0x8c>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10c      	bne.n	8006b22 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d108      	bne.n	8006b22 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d104      	bne.n	8006b22 <osMessageQueueNew+0x8c>
          mem = 0;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	61bb      	str	r3, [r7, #24]
 8006b1c:	e001      	b.n	8006b22 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d10b      	bne.n	8006b40 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691a      	ldr	r2, [r3, #16]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	2100      	movs	r1, #0
 8006b32:	9100      	str	r1, [sp, #0]
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 fa30 	bl	8006f9c <xQueueGenericCreateStatic>
 8006b3c:	61f8      	str	r0, [r7, #28]
 8006b3e:	e008      	b.n	8006b52 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d105      	bne.n	8006b52 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006b46:	2200      	movs	r2, #0
 8006b48:	68b9      	ldr	r1, [r7, #8]
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f000 faa3 	bl	8007096 <xQueueGenericCreate>
 8006b50:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00c      	beq.n	8006b72 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	617b      	str	r3, [r7, #20]
 8006b64:	e001      	b.n	8006b6a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006b66:	2300      	movs	r3, #0
 8006b68:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006b6a:	6979      	ldr	r1, [r7, #20]
 8006b6c:	69f8      	ldr	r0, [r7, #28]
 8006b6e:	f001 f8e5 	bl	8007d3c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006b72:	69fb      	ldr	r3, [r7, #28]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3720      	adds	r7, #32
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b94:	f3ef 8305 	mrs	r3, IPSR
 8006b98:	617b      	str	r3, [r7, #20]
  return(result);
 8006b9a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d028      	beq.n	8006bf2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d005      	beq.n	8006bb2 <osMessageQueuePut+0x36>
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <osMessageQueuePut+0x36>
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006bb2:	f06f 0303 	mvn.w	r3, #3
 8006bb6:	61fb      	str	r3, [r7, #28]
 8006bb8:	e038      	b.n	8006c2c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006bbe:	f107 0210 	add.w	r2, r7, #16
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	68b9      	ldr	r1, [r7, #8]
 8006bc6:	69b8      	ldr	r0, [r7, #24]
 8006bc8:	f000 fc7e 	bl	80074c8 <xQueueGenericSendFromISR>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d003      	beq.n	8006bda <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006bd2:	f06f 0302 	mvn.w	r3, #2
 8006bd6:	61fb      	str	r3, [r7, #28]
 8006bd8:	e028      	b.n	8006c2c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d025      	beq.n	8006c2c <osMessageQueuePut+0xb0>
 8006be0:	4b15      	ldr	r3, [pc, #84]	@ (8006c38 <osMessageQueuePut+0xbc>)
 8006be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	e01c      	b.n	8006c2c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <osMessageQueuePut+0x82>
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d103      	bne.n	8006c06 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006bfe:	f06f 0303 	mvn.w	r3, #3
 8006c02:	61fb      	str	r3, [r7, #28]
 8006c04:	e012      	b.n	8006c2c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006c06:	2300      	movs	r3, #0
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	68b9      	ldr	r1, [r7, #8]
 8006c0c:	69b8      	ldr	r0, [r7, #24]
 8006c0e:	f000 fb59 	bl	80072c4 <xQueueGenericSend>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d009      	beq.n	8006c2c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006c1e:	f06f 0301 	mvn.w	r3, #1
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	e002      	b.n	8006c2c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006c26:	f06f 0302 	mvn.w	r3, #2
 8006c2a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006c2c:	69fb      	ldr	r3, [r7, #28]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3720      	adds	r7, #32
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c52:	f3ef 8305 	mrs	r3, IPSR
 8006c56:	617b      	str	r3, [r7, #20]
  return(result);
 8006c58:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d028      	beq.n	8006cb0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <osMessageQueueGet+0x34>
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <osMessageQueueGet+0x34>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006c70:	f06f 0303 	mvn.w	r3, #3
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	e037      	b.n	8006ce8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006c7c:	f107 0310 	add.w	r3, r7, #16
 8006c80:	461a      	mov	r2, r3
 8006c82:	68b9      	ldr	r1, [r7, #8]
 8006c84:	69b8      	ldr	r0, [r7, #24]
 8006c86:	f000 feaf 	bl	80079e8 <xQueueReceiveFromISR>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d003      	beq.n	8006c98 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006c90:	f06f 0302 	mvn.w	r3, #2
 8006c94:	61fb      	str	r3, [r7, #28]
 8006c96:	e027      	b.n	8006ce8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d024      	beq.n	8006ce8 <osMessageQueueGet+0xac>
 8006c9e:	4b15      	ldr	r3, [pc, #84]	@ (8006cf4 <osMessageQueueGet+0xb8>)
 8006ca0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	e01b      	b.n	8006ce8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <osMessageQueueGet+0x80>
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d103      	bne.n	8006cc4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006cbc:	f06f 0303 	mvn.w	r3, #3
 8006cc0:	61fb      	str	r3, [r7, #28]
 8006cc2:	e011      	b.n	8006ce8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	68b9      	ldr	r1, [r7, #8]
 8006cc8:	69b8      	ldr	r0, [r7, #24]
 8006cca:	f000 fc9b 	bl	8007604 <xQueueReceive>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d009      	beq.n	8006ce8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006cda:	f06f 0301 	mvn.w	r3, #1
 8006cde:	61fb      	str	r3, [r7, #28]
 8006ce0:	e002      	b.n	8006ce8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006ce2:	f06f 0302 	mvn.w	r3, #2
 8006ce6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006ce8:	69fb      	ldr	r3, [r7, #28]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3720      	adds	r7, #32
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	e000ed04 	.word	0xe000ed04

08006cf8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4a07      	ldr	r2, [pc, #28]	@ (8006d24 <vApplicationGetIdleTaskMemory+0x2c>)
 8006d08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	4a06      	ldr	r2, [pc, #24]	@ (8006d28 <vApplicationGetIdleTaskMemory+0x30>)
 8006d0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2280      	movs	r2, #128	@ 0x80
 8006d14:	601a      	str	r2, [r3, #0]
}
 8006d16:	bf00      	nop
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	200008bc 	.word	0x200008bc
 8006d28:	20000964 	.word	0x20000964

08006d2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4a07      	ldr	r2, [pc, #28]	@ (8006d58 <vApplicationGetTimerTaskMemory+0x2c>)
 8006d3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	4a06      	ldr	r2, [pc, #24]	@ (8006d5c <vApplicationGetTimerTaskMemory+0x30>)
 8006d42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d4a:	601a      	str	r2, [r3, #0]
}
 8006d4c:	bf00      	nop
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	20000b64 	.word	0x20000b64
 8006d5c:	20000c0c 	.word	0x20000c0c

08006d60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f103 0208 	add.w	r2, r3, #8
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f04f 32ff 	mov.w	r2, #4294967295
 8006d78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f103 0208 	add.w	r2, r3, #8
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f103 0208 	add.w	r2, r3, #8
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b085      	sub	sp, #20
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	601a      	str	r2, [r3, #0]
}
 8006df6:	bf00      	nop
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e02:	b480      	push	{r7}
 8006e04:	b085      	sub	sp, #20
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e18:	d103      	bne.n	8006e22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	e00c      	b.n	8006e3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	3308      	adds	r3, #8
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	e002      	b.n	8006e30 <vListInsert+0x2e>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d2f6      	bcs.n	8006e2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	601a      	str	r2, [r3, #0]
}
 8006e68:	bf00      	nop
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6892      	ldr	r2, [r2, #8]
 8006e8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	6852      	ldr	r2, [r2, #4]
 8006e94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d103      	bne.n	8006ea8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	1e5a      	subs	r2, r3, #1
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10b      	bne.n	8006ef4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006eee:	bf00      	nop
 8006ef0:	bf00      	nop
 8006ef2:	e7fd      	b.n	8006ef0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ef4:	f002 fc58 	bl	80097a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f00:	68f9      	ldr	r1, [r7, #12]
 8006f02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f04:	fb01 f303 	mul.w	r3, r1, r3
 8006f08:	441a      	add	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f24:	3b01      	subs	r3, #1
 8006f26:	68f9      	ldr	r1, [r7, #12]
 8006f28:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f2a:	fb01 f303 	mul.w	r3, r1, r3
 8006f2e:	441a      	add	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	22ff      	movs	r2, #255	@ 0xff
 8006f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	22ff      	movs	r2, #255	@ 0xff
 8006f40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d114      	bne.n	8006f74 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d01a      	beq.n	8006f88 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3310      	adds	r3, #16
 8006f56:	4618      	mov	r0, r3
 8006f58:	f001 fbe0 	bl	800871c <xTaskRemoveFromEventList>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d012      	beq.n	8006f88 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f62:	4b0d      	ldr	r3, [pc, #52]	@ (8006f98 <xQueueGenericReset+0xd0>)
 8006f64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	e009      	b.n	8006f88 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3310      	adds	r3, #16
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff fef1 	bl	8006d60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3324      	adds	r3, #36	@ 0x24
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7ff feec 	bl	8006d60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f88:	f002 fc40 	bl	800980c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f8c:	2301      	movs	r3, #1
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	e000ed04 	.word	0xe000ed04

08006f9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08e      	sub	sp, #56	@ 0x38
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10b      	bne.n	8006fc8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006fc2:	bf00      	nop
 8006fc4:	bf00      	nop
 8006fc6:	e7fd      	b.n	8006fc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10b      	bne.n	8006fe6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006fe0:	bf00      	nop
 8006fe2:	bf00      	nop
 8006fe4:	e7fd      	b.n	8006fe2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <xQueueGenericCreateStatic+0x56>
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <xQueueGenericCreateStatic+0x5a>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e000      	b.n	8006ff8 <xQueueGenericCreateStatic+0x5c>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10b      	bne.n	8007014 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	623b      	str	r3, [r7, #32]
}
 800700e:	bf00      	nop
 8007010:	bf00      	nop
 8007012:	e7fd      	b.n	8007010 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d102      	bne.n	8007020 <xQueueGenericCreateStatic+0x84>
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <xQueueGenericCreateStatic+0x88>
 8007020:	2301      	movs	r3, #1
 8007022:	e000      	b.n	8007026 <xQueueGenericCreateStatic+0x8a>
 8007024:	2300      	movs	r3, #0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10b      	bne.n	8007042 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	61fb      	str	r3, [r7, #28]
}
 800703c:	bf00      	nop
 800703e:	bf00      	nop
 8007040:	e7fd      	b.n	800703e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007042:	2350      	movs	r3, #80	@ 0x50
 8007044:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b50      	cmp	r3, #80	@ 0x50
 800704a:	d00b      	beq.n	8007064 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	61bb      	str	r3, [r7, #24]
}
 800705e:	bf00      	nop
 8007060:	bf00      	nop
 8007062:	e7fd      	b.n	8007060 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007064:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800706a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00d      	beq.n	800708c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007078:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800707c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	4613      	mov	r3, r2
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	68b9      	ldr	r1, [r7, #8]
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f000 f840 	bl	800710c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800708c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800708e:	4618      	mov	r0, r3
 8007090:	3730      	adds	r7, #48	@ 0x30
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007096:	b580      	push	{r7, lr}
 8007098:	b08a      	sub	sp, #40	@ 0x28
 800709a:	af02      	add	r7, sp, #8
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	4613      	mov	r3, r2
 80070a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10b      	bne.n	80070c2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	613b      	str	r3, [r7, #16]
}
 80070bc:	bf00      	nop
 80070be:	bf00      	nop
 80070c0:	e7fd      	b.n	80070be <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	fb02 f303 	mul.w	r3, r2, r3
 80070ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	3350      	adds	r3, #80	@ 0x50
 80070d0:	4618      	mov	r0, r3
 80070d2:	f002 fc8b 	bl	80099ec <pvPortMalloc>
 80070d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d011      	beq.n	8007102 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	3350      	adds	r3, #80	@ 0x50
 80070e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070f0:	79fa      	ldrb	r2, [r7, #7]
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	4613      	mov	r3, r2
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	68b9      	ldr	r1, [r7, #8]
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f000 f805 	bl	800710c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007102:	69bb      	ldr	r3, [r7, #24]
	}
 8007104:	4618      	mov	r0, r3
 8007106:	3720      	adds	r7, #32
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
 8007118:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d103      	bne.n	8007128 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	e002      	b.n	800712e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800713a:	2101      	movs	r1, #1
 800713c:	69b8      	ldr	r0, [r7, #24]
 800713e:	f7ff fec3 	bl	8006ec8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	78fa      	ldrb	r2, [r7, #3]
 8007146:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800714a:	bf00      	nop
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007152:	b580      	push	{r7, lr}
 8007154:	b082      	sub	sp, #8
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00e      	beq.n	800717e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007172:	2300      	movs	r3, #0
 8007174:	2200      	movs	r2, #0
 8007176:	2100      	movs	r1, #0
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f8a3 	bl	80072c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800717e:	bf00      	nop
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007186:	b580      	push	{r7, lr}
 8007188:	b086      	sub	sp, #24
 800718a:	af00      	add	r7, sp, #0
 800718c:	4603      	mov	r3, r0
 800718e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007190:	2301      	movs	r3, #1
 8007192:	617b      	str	r3, [r7, #20]
 8007194:	2300      	movs	r3, #0
 8007196:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007198:	79fb      	ldrb	r3, [r7, #7]
 800719a:	461a      	mov	r2, r3
 800719c:	6939      	ldr	r1, [r7, #16]
 800719e:	6978      	ldr	r0, [r7, #20]
 80071a0:	f7ff ff79 	bl	8007096 <xQueueGenericCreate>
 80071a4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f7ff ffd3 	bl	8007152 <prvInitialiseMutex>

		return xNewQueue;
 80071ac:	68fb      	ldr	r3, [r7, #12]
	}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b088      	sub	sp, #32
 80071ba:	af02      	add	r7, sp, #8
 80071bc:	4603      	mov	r3, r0
 80071be:	6039      	str	r1, [r7, #0]
 80071c0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80071c2:	2301      	movs	r3, #1
 80071c4:	617b      	str	r3, [r7, #20]
 80071c6:	2300      	movs	r3, #0
 80071c8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	2200      	movs	r2, #0
 80071d2:	6939      	ldr	r1, [r7, #16]
 80071d4:	6978      	ldr	r0, [r7, #20]
 80071d6:	f7ff fee1 	bl	8006f9c <xQueueGenericCreateStatic>
 80071da:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f7ff ffb8 	bl	8007152 <prvInitialiseMutex>

		return xNewQueue;
 80071e2:	68fb      	ldr	r3, [r7, #12]
	}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3718      	adds	r7, #24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80071ec:	b590      	push	{r4, r7, lr}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10b      	bne.n	8007216 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	60fb      	str	r3, [r7, #12]
}
 8007210:	bf00      	nop
 8007212:	bf00      	nop
 8007214:	e7fd      	b.n	8007212 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	689c      	ldr	r4, [r3, #8]
 800721a:	f001 fc45 	bl	8008aa8 <xTaskGetCurrentTaskHandle>
 800721e:	4603      	mov	r3, r0
 8007220:	429c      	cmp	r4, r3
 8007222:	d111      	bne.n	8007248 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	1e5a      	subs	r2, r3, #1
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d105      	bne.n	8007242 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007236:	2300      	movs	r3, #0
 8007238:	2200      	movs	r2, #0
 800723a:	2100      	movs	r1, #0
 800723c:	6938      	ldr	r0, [r7, #16]
 800723e:	f000 f841 	bl	80072c4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007242:	2301      	movs	r3, #1
 8007244:	617b      	str	r3, [r7, #20]
 8007246:	e001      	b.n	800724c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007248:	2300      	movs	r3, #0
 800724a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800724c:	697b      	ldr	r3, [r7, #20]
	}
 800724e:	4618      	mov	r0, r3
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	bd90      	pop	{r4, r7, pc}

08007256 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007256:	b590      	push	{r4, r7, lr}
 8007258:	b087      	sub	sp, #28
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10b      	bne.n	8007282 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800726a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	60fb      	str	r3, [r7, #12]
}
 800727c:	bf00      	nop
 800727e:	bf00      	nop
 8007280:	e7fd      	b.n	800727e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	689c      	ldr	r4, [r3, #8]
 8007286:	f001 fc0f 	bl	8008aa8 <xTaskGetCurrentTaskHandle>
 800728a:	4603      	mov	r3, r0
 800728c:	429c      	cmp	r4, r3
 800728e:	d107      	bne.n	80072a0 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800729a:	2301      	movs	r3, #1
 800729c:	617b      	str	r3, [r7, #20]
 800729e:	e00c      	b.n	80072ba <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6938      	ldr	r0, [r7, #16]
 80072a4:	f000 fa90 	bl	80077c8 <xQueueSemaphoreTake>
 80072a8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d004      	beq.n	80072ba <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	1c5a      	adds	r2, r3, #1
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80072ba:	697b      	ldr	r3, [r7, #20]
	}
 80072bc:	4618      	mov	r0, r3
 80072be:	371c      	adds	r7, #28
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd90      	pop	{r4, r7, pc}

080072c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b08e      	sub	sp, #56	@ 0x38
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80072d2:	2300      	movs	r3, #0
 80072d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80072da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10b      	bne.n	80072f8 <xQueueGenericSend+0x34>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80072f2:	bf00      	nop
 80072f4:	bf00      	nop
 80072f6:	e7fd      	b.n	80072f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d103      	bne.n	8007306 <xQueueGenericSend+0x42>
 80072fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <xQueueGenericSend+0x46>
 8007306:	2301      	movs	r3, #1
 8007308:	e000      	b.n	800730c <xQueueGenericSend+0x48>
 800730a:	2300      	movs	r3, #0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10b      	bne.n	8007328 <xQueueGenericSend+0x64>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007322:	bf00      	nop
 8007324:	bf00      	nop
 8007326:	e7fd      	b.n	8007324 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	2b02      	cmp	r3, #2
 800732c:	d103      	bne.n	8007336 <xQueueGenericSend+0x72>
 800732e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007332:	2b01      	cmp	r3, #1
 8007334:	d101      	bne.n	800733a <xQueueGenericSend+0x76>
 8007336:	2301      	movs	r3, #1
 8007338:	e000      	b.n	800733c <xQueueGenericSend+0x78>
 800733a:	2300      	movs	r3, #0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10b      	bne.n	8007358 <xQueueGenericSend+0x94>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	623b      	str	r3, [r7, #32]
}
 8007352:	bf00      	nop
 8007354:	bf00      	nop
 8007356:	e7fd      	b.n	8007354 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007358:	f001 fbb6 	bl	8008ac8 <xTaskGetSchedulerState>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d102      	bne.n	8007368 <xQueueGenericSend+0xa4>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <xQueueGenericSend+0xa8>
 8007368:	2301      	movs	r3, #1
 800736a:	e000      	b.n	800736e <xQueueGenericSend+0xaa>
 800736c:	2300      	movs	r3, #0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10b      	bne.n	800738a <xQueueGenericSend+0xc6>
	__asm volatile
 8007372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	61fb      	str	r3, [r7, #28]
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop
 8007388:	e7fd      	b.n	8007386 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800738a:	f002 fa0d 	bl	80097a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800738e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007390:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007396:	429a      	cmp	r2, r3
 8007398:	d302      	bcc.n	80073a0 <xQueueGenericSend+0xdc>
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	2b02      	cmp	r3, #2
 800739e:	d129      	bne.n	80073f4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	68b9      	ldr	r1, [r7, #8]
 80073a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073a6:	f000 fbb9 	bl	8007b1c <prvCopyDataToQueue>
 80073aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d010      	beq.n	80073d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b6:	3324      	adds	r3, #36	@ 0x24
 80073b8:	4618      	mov	r0, r3
 80073ba:	f001 f9af 	bl	800871c <xTaskRemoveFromEventList>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d013      	beq.n	80073ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80073c4:	4b3f      	ldr	r3, [pc, #252]	@ (80074c4 <xQueueGenericSend+0x200>)
 80073c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	e00a      	b.n	80073ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80073d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d007      	beq.n	80073ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80073dc:	4b39      	ldr	r3, [pc, #228]	@ (80074c4 <xQueueGenericSend+0x200>)
 80073de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80073ec:	f002 fa0e 	bl	800980c <vPortExitCritical>
				return pdPASS;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e063      	b.n	80074bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d103      	bne.n	8007402 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073fa:	f002 fa07 	bl	800980c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80073fe:	2300      	movs	r3, #0
 8007400:	e05c      	b.n	80074bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007404:	2b00      	cmp	r3, #0
 8007406:	d106      	bne.n	8007416 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007408:	f107 0314 	add.w	r3, r7, #20
 800740c:	4618      	mov	r0, r3
 800740e:	f001 f9e9 	bl	80087e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007412:	2301      	movs	r3, #1
 8007414:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007416:	f002 f9f9 	bl	800980c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800741a:	f000 ff51 	bl	80082c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800741e:	f002 f9c3 	bl	80097a8 <vPortEnterCritical>
 8007422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007424:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007428:	b25b      	sxtb	r3, r3
 800742a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742e:	d103      	bne.n	8007438 <xQueueGenericSend+0x174>
 8007430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800743e:	b25b      	sxtb	r3, r3
 8007440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007444:	d103      	bne.n	800744e <xQueueGenericSend+0x18a>
 8007446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800744e:	f002 f9dd 	bl	800980c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007452:	1d3a      	adds	r2, r7, #4
 8007454:	f107 0314 	add.w	r3, r7, #20
 8007458:	4611      	mov	r1, r2
 800745a:	4618      	mov	r0, r3
 800745c:	f001 f9d8 	bl	8008810 <xTaskCheckForTimeOut>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d124      	bne.n	80074b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007466:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007468:	f000 fc50 	bl	8007d0c <prvIsQueueFull>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d018      	beq.n	80074a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007474:	3310      	adds	r3, #16
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	4611      	mov	r1, r2
 800747a:	4618      	mov	r0, r3
 800747c:	f001 f8fc 	bl	8008678 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007480:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007482:	f000 fbdb 	bl	8007c3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007486:	f000 ff29 	bl	80082dc <xTaskResumeAll>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	f47f af7c 	bne.w	800738a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007492:	4b0c      	ldr	r3, [pc, #48]	@ (80074c4 <xQueueGenericSend+0x200>)
 8007494:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	e772      	b.n	800738a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074a6:	f000 fbc9 	bl	8007c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074aa:	f000 ff17 	bl	80082dc <xTaskResumeAll>
 80074ae:	e76c      	b.n	800738a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80074b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074b2:	f000 fbc3 	bl	8007c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074b6:	f000 ff11 	bl	80082dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80074ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3738      	adds	r7, #56	@ 0x38
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	e000ed04 	.word	0xe000ed04

080074c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b090      	sub	sp, #64	@ 0x40
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
 80074d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80074da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10b      	bne.n	80074f8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80074f2:	bf00      	nop
 80074f4:	bf00      	nop
 80074f6:	e7fd      	b.n	80074f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d103      	bne.n	8007506 <xQueueGenericSendFromISR+0x3e>
 80074fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007502:	2b00      	cmp	r3, #0
 8007504:	d101      	bne.n	800750a <xQueueGenericSendFromISR+0x42>
 8007506:	2301      	movs	r3, #1
 8007508:	e000      	b.n	800750c <xQueueGenericSendFromISR+0x44>
 800750a:	2300      	movs	r3, #0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10b      	bne.n	8007528 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007522:	bf00      	nop
 8007524:	bf00      	nop
 8007526:	e7fd      	b.n	8007524 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2b02      	cmp	r3, #2
 800752c:	d103      	bne.n	8007536 <xQueueGenericSendFromISR+0x6e>
 800752e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007532:	2b01      	cmp	r3, #1
 8007534:	d101      	bne.n	800753a <xQueueGenericSendFromISR+0x72>
 8007536:	2301      	movs	r3, #1
 8007538:	e000      	b.n	800753c <xQueueGenericSendFromISR+0x74>
 800753a:	2300      	movs	r3, #0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10b      	bne.n	8007558 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	623b      	str	r3, [r7, #32]
}
 8007552:	bf00      	nop
 8007554:	bf00      	nop
 8007556:	e7fd      	b.n	8007554 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007558:	f002 fa06 	bl	8009968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800755c:	f3ef 8211 	mrs	r2, BASEPRI
 8007560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	61fa      	str	r2, [r7, #28]
 8007572:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007574:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007576:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800757c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007580:	429a      	cmp	r2, r3
 8007582:	d302      	bcc.n	800758a <xQueueGenericSendFromISR+0xc2>
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	2b02      	cmp	r3, #2
 8007588:	d12f      	bne.n	80075ea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800758a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800758c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007590:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007598:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	68b9      	ldr	r1, [r7, #8]
 800759e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80075a0:	f000 fabc 	bl	8007b1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075a4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80075a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ac:	d112      	bne.n	80075d4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d016      	beq.n	80075e4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b8:	3324      	adds	r3, #36	@ 0x24
 80075ba:	4618      	mov	r0, r3
 80075bc:	f001 f8ae 	bl	800871c <xTaskRemoveFromEventList>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00e      	beq.n	80075e4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00b      	beq.n	80075e4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	601a      	str	r2, [r3, #0]
 80075d2:	e007      	b.n	80075e4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80075d8:	3301      	adds	r3, #1
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	b25a      	sxtb	r2, r3
 80075de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80075e4:	2301      	movs	r3, #1
 80075e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80075e8:	e001      	b.n	80075ee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80075f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3740      	adds	r7, #64	@ 0x40
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b08c      	sub	sp, #48	@ 0x30
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007610:	2300      	movs	r3, #0
 8007612:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10b      	bne.n	8007636 <xQueueReceive+0x32>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	623b      	str	r3, [r7, #32]
}
 8007630:	bf00      	nop
 8007632:	bf00      	nop
 8007634:	e7fd      	b.n	8007632 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d103      	bne.n	8007644 <xQueueReceive+0x40>
 800763c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <xQueueReceive+0x44>
 8007644:	2301      	movs	r3, #1
 8007646:	e000      	b.n	800764a <xQueueReceive+0x46>
 8007648:	2300      	movs	r3, #0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10b      	bne.n	8007666 <xQueueReceive+0x62>
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	61fb      	str	r3, [r7, #28]
}
 8007660:	bf00      	nop
 8007662:	bf00      	nop
 8007664:	e7fd      	b.n	8007662 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007666:	f001 fa2f 	bl	8008ac8 <xTaskGetSchedulerState>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d102      	bne.n	8007676 <xQueueReceive+0x72>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <xQueueReceive+0x76>
 8007676:	2301      	movs	r3, #1
 8007678:	e000      	b.n	800767c <xQueueReceive+0x78>
 800767a:	2300      	movs	r3, #0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10b      	bne.n	8007698 <xQueueReceive+0x94>
	__asm volatile
 8007680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	61bb      	str	r3, [r7, #24]
}
 8007692:	bf00      	nop
 8007694:	bf00      	nop
 8007696:	e7fd      	b.n	8007694 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007698:	f002 f886 	bl	80097a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800769c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01f      	beq.n	80076e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076a8:	68b9      	ldr	r1, [r7, #8]
 80076aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076ac:	f000 faa0 	bl	8007bf0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b2:	1e5a      	subs	r2, r3, #1
 80076b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00f      	beq.n	80076e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c2:	3310      	adds	r3, #16
 80076c4:	4618      	mov	r0, r3
 80076c6:	f001 f829 	bl	800871c <xTaskRemoveFromEventList>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d007      	beq.n	80076e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076d0:	4b3c      	ldr	r3, [pc, #240]	@ (80077c4 <xQueueReceive+0x1c0>)
 80076d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076e0:	f002 f894 	bl	800980c <vPortExitCritical>
				return pdPASS;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e069      	b.n	80077bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d103      	bne.n	80076f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076ee:	f002 f88d 	bl	800980c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076f2:	2300      	movs	r3, #0
 80076f4:	e062      	b.n	80077bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d106      	bne.n	800770a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076fc:	f107 0310 	add.w	r3, r7, #16
 8007700:	4618      	mov	r0, r3
 8007702:	f001 f86f 	bl	80087e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007706:	2301      	movs	r3, #1
 8007708:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800770a:	f002 f87f 	bl	800980c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800770e:	f000 fdd7 	bl	80082c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007712:	f002 f849 	bl	80097a8 <vPortEnterCritical>
 8007716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007718:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800771c:	b25b      	sxtb	r3, r3
 800771e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007722:	d103      	bne.n	800772c <xQueueReceive+0x128>
 8007724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800772c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007732:	b25b      	sxtb	r3, r3
 8007734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007738:	d103      	bne.n	8007742 <xQueueReceive+0x13e>
 800773a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007742:	f002 f863 	bl	800980c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007746:	1d3a      	adds	r2, r7, #4
 8007748:	f107 0310 	add.w	r3, r7, #16
 800774c:	4611      	mov	r1, r2
 800774e:	4618      	mov	r0, r3
 8007750:	f001 f85e 	bl	8008810 <xTaskCheckForTimeOut>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d123      	bne.n	80077a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800775a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800775c:	f000 fac0 	bl	8007ce0 <prvIsQueueEmpty>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d017      	beq.n	8007796 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007768:	3324      	adds	r3, #36	@ 0x24
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	4611      	mov	r1, r2
 800776e:	4618      	mov	r0, r3
 8007770:	f000 ff82 	bl	8008678 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007774:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007776:	f000 fa61 	bl	8007c3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800777a:	f000 fdaf 	bl	80082dc <xTaskResumeAll>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d189      	bne.n	8007698 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007784:	4b0f      	ldr	r3, [pc, #60]	@ (80077c4 <xQueueReceive+0x1c0>)
 8007786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	e780      	b.n	8007698 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007798:	f000 fa50 	bl	8007c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800779c:	f000 fd9e 	bl	80082dc <xTaskResumeAll>
 80077a0:	e77a      	b.n	8007698 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80077a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077a4:	f000 fa4a 	bl	8007c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077a8:	f000 fd98 	bl	80082dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077ae:	f000 fa97 	bl	8007ce0 <prvIsQueueEmpty>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f43f af6f 	beq.w	8007698 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3730      	adds	r7, #48	@ 0x30
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	e000ed04 	.word	0xe000ed04

080077c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08e      	sub	sp, #56	@ 0x38
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80077d2:	2300      	movs	r3, #0
 80077d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80077da:	2300      	movs	r3, #0
 80077dc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10b      	bne.n	80077fc <xQueueSemaphoreTake+0x34>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	623b      	str	r3, [r7, #32]
}
 80077f6:	bf00      	nop
 80077f8:	bf00      	nop
 80077fa:	e7fd      	b.n	80077f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80077fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	61fb      	str	r3, [r7, #28]
}
 8007816:	bf00      	nop
 8007818:	bf00      	nop
 800781a:	e7fd      	b.n	8007818 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800781c:	f001 f954 	bl	8008ac8 <xTaskGetSchedulerState>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d102      	bne.n	800782c <xQueueSemaphoreTake+0x64>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <xQueueSemaphoreTake+0x68>
 800782c:	2301      	movs	r3, #1
 800782e:	e000      	b.n	8007832 <xQueueSemaphoreTake+0x6a>
 8007830:	2300      	movs	r3, #0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10b      	bne.n	800784e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	61bb      	str	r3, [r7, #24]
}
 8007848:	bf00      	nop
 800784a:	bf00      	nop
 800784c:	e7fd      	b.n	800784a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800784e:	f001 ffab 	bl	80097a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007856:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785a:	2b00      	cmp	r3, #0
 800785c:	d024      	beq.n	80078a8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800785e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007860:	1e5a      	subs	r2, r3, #1
 8007862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007864:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d104      	bne.n	8007878 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800786e:	f001 faa5 	bl	8008dbc <pvTaskIncrementMutexHeldCount>
 8007872:	4602      	mov	r2, r0
 8007874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007876:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00f      	beq.n	80078a0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007882:	3310      	adds	r3, #16
 8007884:	4618      	mov	r0, r3
 8007886:	f000 ff49 	bl	800871c <xTaskRemoveFromEventList>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d007      	beq.n	80078a0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007890:	4b54      	ldr	r3, [pc, #336]	@ (80079e4 <xQueueSemaphoreTake+0x21c>)
 8007892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078a0:	f001 ffb4 	bl	800980c <vPortExitCritical>
				return pdPASS;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e098      	b.n	80079da <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d112      	bne.n	80078d4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00b      	beq.n	80078cc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80078b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	617b      	str	r3, [r7, #20]
}
 80078c6:	bf00      	nop
 80078c8:	bf00      	nop
 80078ca:	e7fd      	b.n	80078c8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80078cc:	f001 ff9e 	bl	800980c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078d0:	2300      	movs	r3, #0
 80078d2:	e082      	b.n	80079da <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d106      	bne.n	80078e8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078da:	f107 030c 	add.w	r3, r7, #12
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 ff80 	bl	80087e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078e4:	2301      	movs	r3, #1
 80078e6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078e8:	f001 ff90 	bl	800980c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078ec:	f000 fce8 	bl	80082c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078f0:	f001 ff5a 	bl	80097a8 <vPortEnterCritical>
 80078f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078fa:	b25b      	sxtb	r3, r3
 80078fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007900:	d103      	bne.n	800790a <xQueueSemaphoreTake+0x142>
 8007902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800790a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007910:	b25b      	sxtb	r3, r3
 8007912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007916:	d103      	bne.n	8007920 <xQueueSemaphoreTake+0x158>
 8007918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007920:	f001 ff74 	bl	800980c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007924:	463a      	mov	r2, r7
 8007926:	f107 030c 	add.w	r3, r7, #12
 800792a:	4611      	mov	r1, r2
 800792c:	4618      	mov	r0, r3
 800792e:	f000 ff6f 	bl	8008810 <xTaskCheckForTimeOut>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d132      	bne.n	800799e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007938:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800793a:	f000 f9d1 	bl	8007ce0 <prvIsQueueEmpty>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d026      	beq.n	8007992 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d109      	bne.n	8007960 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800794c:	f001 ff2c 	bl	80097a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	4618      	mov	r0, r3
 8007956:	f001 f8d5 	bl	8008b04 <xTaskPriorityInherit>
 800795a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800795c:	f001 ff56 	bl	800980c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007962:	3324      	adds	r3, #36	@ 0x24
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	4611      	mov	r1, r2
 8007968:	4618      	mov	r0, r3
 800796a:	f000 fe85 	bl	8008678 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800796e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007970:	f000 f964 	bl	8007c3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007974:	f000 fcb2 	bl	80082dc <xTaskResumeAll>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	f47f af67 	bne.w	800784e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007980:	4b18      	ldr	r3, [pc, #96]	@ (80079e4 <xQueueSemaphoreTake+0x21c>)
 8007982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	e75d      	b.n	800784e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007992:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007994:	f000 f952 	bl	8007c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007998:	f000 fca0 	bl	80082dc <xTaskResumeAll>
 800799c:	e757      	b.n	800784e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800799e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079a0:	f000 f94c 	bl	8007c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079a4:	f000 fc9a 	bl	80082dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079aa:	f000 f999 	bl	8007ce0 <prvIsQueueEmpty>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f43f af4c 	beq.w	800784e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80079b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00d      	beq.n	80079d8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80079bc:	f001 fef4 	bl	80097a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80079c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079c2:	f000 f893 	bl	8007aec <prvGetDisinheritPriorityAfterTimeout>
 80079c6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80079c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079ce:	4618      	mov	r0, r3
 80079d0:	f001 f970 	bl	8008cb4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80079d4:	f001 ff1a 	bl	800980c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3738      	adds	r7, #56	@ 0x38
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	e000ed04 	.word	0xe000ed04

080079e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b08e      	sub	sp, #56	@ 0x38
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80079f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10b      	bne.n	8007a16 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	623b      	str	r3, [r7, #32]
}
 8007a10:	bf00      	nop
 8007a12:	bf00      	nop
 8007a14:	e7fd      	b.n	8007a12 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d103      	bne.n	8007a24 <xQueueReceiveFromISR+0x3c>
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d101      	bne.n	8007a28 <xQueueReceiveFromISR+0x40>
 8007a24:	2301      	movs	r3, #1
 8007a26:	e000      	b.n	8007a2a <xQueueReceiveFromISR+0x42>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10b      	bne.n	8007a46 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	61fb      	str	r3, [r7, #28]
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	e7fd      	b.n	8007a42 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a46:	f001 ff8f 	bl	8009968 <vPortValidateInterruptPriority>
	__asm volatile
 8007a4a:	f3ef 8211 	mrs	r2, BASEPRI
 8007a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	61ba      	str	r2, [r7, #24]
 8007a60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007a62:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a6a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d02f      	beq.n	8007ad2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a7c:	68b9      	ldr	r1, [r7, #8]
 8007a7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a80:	f000 f8b6 	bl	8007bf0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a86:	1e5a      	subs	r2, r3, #1
 8007a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007a8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a94:	d112      	bne.n	8007abc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d016      	beq.n	8007acc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa0:	3310      	adds	r3, #16
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 fe3a 	bl	800871c <xTaskRemoveFromEventList>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00e      	beq.n	8007acc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00b      	beq.n	8007acc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	e007      	b.n	8007acc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007abc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	b25a      	sxtb	r2, r3
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007acc:	2301      	movs	r3, #1
 8007ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ad0:	e001      	b.n	8007ad6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	f383 8811 	msr	BASEPRI, r3
}
 8007ae0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3738      	adds	r7, #56	@ 0x38
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d006      	beq.n	8007b0a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	e001      	b.n	8007b0e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
	}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10d      	bne.n	8007b56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d14d      	bne.n	8007bde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f001 f844 	bl	8008bd4 <xTaskPriorityDisinherit>
 8007b4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	609a      	str	r2, [r3, #8]
 8007b54:	e043      	b.n	8007bde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d119      	bne.n	8007b90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6858      	ldr	r0, [r3, #4]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b64:	461a      	mov	r2, r3
 8007b66:	68b9      	ldr	r1, [r7, #8]
 8007b68:	f002 fc5b 	bl	800a422 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b74:	441a      	add	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d32b      	bcc.n	8007bde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	605a      	str	r2, [r3, #4]
 8007b8e:	e026      	b.n	8007bde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	68d8      	ldr	r0, [r3, #12]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b98:	461a      	mov	r2, r3
 8007b9a:	68b9      	ldr	r1, [r7, #8]
 8007b9c:	f002 fc41 	bl	800a422 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	68da      	ldr	r2, [r3, #12]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ba8:	425b      	negs	r3, r3
 8007baa:	441a      	add	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	68da      	ldr	r2, [r3, #12]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d207      	bcs.n	8007bcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	689a      	ldr	r2, [r3, #8]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc4:	425b      	negs	r3, r3
 8007bc6:	441a      	add	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d105      	bne.n	8007bde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	1c5a      	adds	r2, r3, #1
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007be6:	697b      	ldr	r3, [r7, #20]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d018      	beq.n	8007c34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c0a:	441a      	add	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68da      	ldr	r2, [r3, #12]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d303      	bcc.n	8007c24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68d9      	ldr	r1, [r3, #12]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6838      	ldr	r0, [r7, #0]
 8007c30:	f002 fbf7 	bl	800a422 <memcpy>
	}
}
 8007c34:	bf00      	nop
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c44:	f001 fdb0 	bl	80097a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c50:	e011      	b.n	8007c76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d012      	beq.n	8007c80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	3324      	adds	r3, #36	@ 0x24
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 fd5c 	bl	800871c <xTaskRemoveFromEventList>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c6a:	f000 fe35 	bl	80088d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
 8007c70:	3b01      	subs	r3, #1
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	dce9      	bgt.n	8007c52 <prvUnlockQueue+0x16>
 8007c7e:	e000      	b.n	8007c82 <prvUnlockQueue+0x46>
					break;
 8007c80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	22ff      	movs	r2, #255	@ 0xff
 8007c86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007c8a:	f001 fdbf 	bl	800980c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c8e:	f001 fd8b 	bl	80097a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c9a:	e011      	b.n	8007cc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d012      	beq.n	8007cca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3310      	adds	r3, #16
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 fd37 	bl	800871c <xTaskRemoveFromEventList>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d001      	beq.n	8007cb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007cb4:	f000 fe10 	bl	80088d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007cb8:	7bbb      	ldrb	r3, [r7, #14]
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	dce9      	bgt.n	8007c9c <prvUnlockQueue+0x60>
 8007cc8:	e000      	b.n	8007ccc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007cca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	22ff      	movs	r2, #255	@ 0xff
 8007cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007cd4:	f001 fd9a 	bl	800980c <vPortExitCritical>
}
 8007cd8:	bf00      	nop
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ce8:	f001 fd5e 	bl	80097a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d102      	bne.n	8007cfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	e001      	b.n	8007cfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cfe:	f001 fd85 	bl	800980c <vPortExitCritical>

	return xReturn;
 8007d02:	68fb      	ldr	r3, [r7, #12]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d14:	f001 fd48 	bl	80097a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d102      	bne.n	8007d2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d24:	2301      	movs	r3, #1
 8007d26:	60fb      	str	r3, [r7, #12]
 8007d28:	e001      	b.n	8007d2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d2e:	f001 fd6d 	bl	800980c <vPortExitCritical>

	return xReturn;
 8007d32:	68fb      	ldr	r3, [r7, #12]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d46:	2300      	movs	r3, #0
 8007d48:	60fb      	str	r3, [r7, #12]
 8007d4a:	e014      	b.n	8007d76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d4c:	4a0f      	ldr	r2, [pc, #60]	@ (8007d8c <vQueueAddToRegistry+0x50>)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10b      	bne.n	8007d70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d58:	490c      	ldr	r1, [pc, #48]	@ (8007d8c <vQueueAddToRegistry+0x50>)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d62:	4a0a      	ldr	r2, [pc, #40]	@ (8007d8c <vQueueAddToRegistry+0x50>)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	4413      	add	r3, r2
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007d6e:	e006      	b.n	8007d7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3301      	adds	r3, #1
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2b07      	cmp	r3, #7
 8007d7a:	d9e7      	bls.n	8007d4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d7c:	bf00      	nop
 8007d7e:	bf00      	nop
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	2000100c 	.word	0x2000100c

08007d90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007da0:	f001 fd02 	bl	80097a8 <vPortEnterCritical>
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007daa:	b25b      	sxtb	r3, r3
 8007dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db0:	d103      	bne.n	8007dba <vQueueWaitForMessageRestricted+0x2a>
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dc0:	b25b      	sxtb	r3, r3
 8007dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc6:	d103      	bne.n	8007dd0 <vQueueWaitForMessageRestricted+0x40>
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dd0:	f001 fd1c 	bl	800980c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d106      	bne.n	8007dea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	3324      	adds	r3, #36	@ 0x24
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	68b9      	ldr	r1, [r7, #8]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f000 fc6d 	bl	80086c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007dea:	6978      	ldr	r0, [r7, #20]
 8007dec:	f7ff ff26 	bl	8007c3c <prvUnlockQueue>
	}
 8007df0:	bf00      	nop
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b08e      	sub	sp, #56	@ 0x38
 8007dfc:	af04      	add	r7, sp, #16
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10b      	bne.n	8007e24 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	623b      	str	r3, [r7, #32]
}
 8007e1e:	bf00      	nop
 8007e20:	bf00      	nop
 8007e22:	e7fd      	b.n	8007e20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10b      	bne.n	8007e42 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	61fb      	str	r3, [r7, #28]
}
 8007e3c:	bf00      	nop
 8007e3e:	bf00      	nop
 8007e40:	e7fd      	b.n	8007e3e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e42:	23a8      	movs	r3, #168	@ 0xa8
 8007e44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2ba8      	cmp	r3, #168	@ 0xa8
 8007e4a:	d00b      	beq.n	8007e64 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	61bb      	str	r3, [r7, #24]
}
 8007e5e:	bf00      	nop
 8007e60:	bf00      	nop
 8007e62:	e7fd      	b.n	8007e60 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01e      	beq.n	8007eaa <xTaskCreateStatic+0xb2>
 8007e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d01b      	beq.n	8007eaa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e74:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e7a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7e:	2202      	movs	r2, #2
 8007e80:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e84:	2300      	movs	r3, #0
 8007e86:	9303      	str	r3, [sp, #12]
 8007e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8a:	9302      	str	r3, [sp, #8]
 8007e8c:	f107 0314 	add.w	r3, r7, #20
 8007e90:	9301      	str	r3, [sp, #4]
 8007e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	68b9      	ldr	r1, [r7, #8]
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f000 f851 	bl	8007f44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ea2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007ea4:	f000 f8f6 	bl	8008094 <prvAddNewTaskToReadyList>
 8007ea8:	e001      	b.n	8007eae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007eae:	697b      	ldr	r3, [r7, #20]
	}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3728      	adds	r7, #40	@ 0x28
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b08c      	sub	sp, #48	@ 0x30
 8007ebc:	af04      	add	r7, sp, #16
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	603b      	str	r3, [r7, #0]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ec8:	88fb      	ldrh	r3, [r7, #6]
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f001 fd8d 	bl	80099ec <pvPortMalloc>
 8007ed2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00e      	beq.n	8007ef8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007eda:	20a8      	movs	r0, #168	@ 0xa8
 8007edc:	f001 fd86 	bl	80099ec <pvPortMalloc>
 8007ee0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	631a      	str	r2, [r3, #48]	@ 0x30
 8007eee:	e005      	b.n	8007efc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ef0:	6978      	ldr	r0, [r7, #20]
 8007ef2:	f001 fe49 	bl	8009b88 <vPortFree>
 8007ef6:	e001      	b.n	8007efc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d017      	beq.n	8007f32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f0a:	88fa      	ldrh	r2, [r7, #6]
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	9303      	str	r3, [sp, #12]
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	9302      	str	r3, [sp, #8]
 8007f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f16:	9301      	str	r3, [sp, #4]
 8007f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	68b9      	ldr	r1, [r7, #8]
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 f80f 	bl	8007f44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f26:	69f8      	ldr	r0, [r7, #28]
 8007f28:	f000 f8b4 	bl	8008094 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	61bb      	str	r3, [r7, #24]
 8007f30:	e002      	b.n	8007f38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f32:	f04f 33ff 	mov.w	r3, #4294967295
 8007f36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f38:	69bb      	ldr	r3, [r7, #24]
	}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3720      	adds	r7, #32
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
	...

08007f44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b088      	sub	sp, #32
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
 8007f50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f54:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	21a5      	movs	r1, #165	@ 0xa5
 8007f5e:	f002 f973 	bl	800a248 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	f023 0307 	bic.w	r3, r3, #7
 8007f7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	f003 0307 	and.w	r3, r3, #7
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00b      	beq.n	8007f9e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	617b      	str	r3, [r7, #20]
}
 8007f98:	bf00      	nop
 8007f9a:	bf00      	nop
 8007f9c:	e7fd      	b.n	8007f9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d01f      	beq.n	8007fe4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	61fb      	str	r3, [r7, #28]
 8007fa8:	e012      	b.n	8007fd0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	4413      	add	r3, r2
 8007fb0:	7819      	ldrb	r1, [r3, #0]
 8007fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	3334      	adds	r3, #52	@ 0x34
 8007fba:	460a      	mov	r2, r1
 8007fbc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d006      	beq.n	8007fd8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	61fb      	str	r3, [r7, #28]
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	2b0f      	cmp	r3, #15
 8007fd4:	d9e9      	bls.n	8007faa <prvInitialiseNewTask+0x66>
 8007fd6:	e000      	b.n	8007fda <prvInitialiseNewTask+0x96>
			{
				break;
 8007fd8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007fe2:	e003      	b.n	8007fec <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fee:	2b37      	cmp	r3, #55	@ 0x37
 8007ff0:	d901      	bls.n	8007ff6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ff2:	2337      	movs	r3, #55	@ 0x37
 8007ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008000:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008004:	2200      	movs	r2, #0
 8008006:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800a:	3304      	adds	r3, #4
 800800c:	4618      	mov	r0, r3
 800800e:	f7fe fec7 	bl	8006da0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008014:	3318      	adds	r3, #24
 8008016:	4618      	mov	r0, r3
 8008018:	f7fe fec2 	bl	8006da0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800801c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008020:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008024:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800802c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008030:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008034:	2200      	movs	r2, #0
 8008036:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800803a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803c:	2200      	movs	r2, #0
 800803e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008044:	3354      	adds	r3, #84	@ 0x54
 8008046:	224c      	movs	r2, #76	@ 0x4c
 8008048:	2100      	movs	r1, #0
 800804a:	4618      	mov	r0, r3
 800804c:	f002 f8fc 	bl	800a248 <memset>
 8008050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008052:	4a0d      	ldr	r2, [pc, #52]	@ (8008088 <prvInitialiseNewTask+0x144>)
 8008054:	659a      	str	r2, [r3, #88]	@ 0x58
 8008056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008058:	4a0c      	ldr	r2, [pc, #48]	@ (800808c <prvInitialiseNewTask+0x148>)
 800805a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800805c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805e:	4a0c      	ldr	r2, [pc, #48]	@ (8008090 <prvInitialiseNewTask+0x14c>)
 8008060:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	68f9      	ldr	r1, [r7, #12]
 8008066:	69b8      	ldr	r0, [r7, #24]
 8008068:	f001 fa6a 	bl	8009540 <pxPortInitialiseStack>
 800806c:	4602      	mov	r2, r0
 800806e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008070:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800807c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800807e:	bf00      	nop
 8008080:	3720      	adds	r7, #32
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	200096a0 	.word	0x200096a0
 800808c:	20009708 	.word	0x20009708
 8008090:	20009770 	.word	0x20009770

08008094 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800809c:	f001 fb84 	bl	80097a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80080a0:	4b2d      	ldr	r3, [pc, #180]	@ (8008158 <prvAddNewTaskToReadyList+0xc4>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3301      	adds	r3, #1
 80080a6:	4a2c      	ldr	r2, [pc, #176]	@ (8008158 <prvAddNewTaskToReadyList+0xc4>)
 80080a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80080aa:	4b2c      	ldr	r3, [pc, #176]	@ (800815c <prvAddNewTaskToReadyList+0xc8>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d109      	bne.n	80080c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80080b2:	4a2a      	ldr	r2, [pc, #168]	@ (800815c <prvAddNewTaskToReadyList+0xc8>)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80080b8:	4b27      	ldr	r3, [pc, #156]	@ (8008158 <prvAddNewTaskToReadyList+0xc4>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d110      	bne.n	80080e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80080c0:	f000 fc2e 	bl	8008920 <prvInitialiseTaskLists>
 80080c4:	e00d      	b.n	80080e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80080c6:	4b26      	ldr	r3, [pc, #152]	@ (8008160 <prvAddNewTaskToReadyList+0xcc>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d109      	bne.n	80080e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080ce:	4b23      	ldr	r3, [pc, #140]	@ (800815c <prvAddNewTaskToReadyList+0xc8>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d8:	429a      	cmp	r2, r3
 80080da:	d802      	bhi.n	80080e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80080dc:	4a1f      	ldr	r2, [pc, #124]	@ (800815c <prvAddNewTaskToReadyList+0xc8>)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80080e2:	4b20      	ldr	r3, [pc, #128]	@ (8008164 <prvAddNewTaskToReadyList+0xd0>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3301      	adds	r3, #1
 80080e8:	4a1e      	ldr	r2, [pc, #120]	@ (8008164 <prvAddNewTaskToReadyList+0xd0>)
 80080ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80080ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008164 <prvAddNewTaskToReadyList+0xd0>)
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008168 <prvAddNewTaskToReadyList+0xd4>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d903      	bls.n	8008108 <prvAddNewTaskToReadyList+0x74>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008104:	4a18      	ldr	r2, [pc, #96]	@ (8008168 <prvAddNewTaskToReadyList+0xd4>)
 8008106:	6013      	str	r3, [r2, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800810c:	4613      	mov	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4a15      	ldr	r2, [pc, #84]	@ (800816c <prvAddNewTaskToReadyList+0xd8>)
 8008116:	441a      	add	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	3304      	adds	r3, #4
 800811c:	4619      	mov	r1, r3
 800811e:	4610      	mov	r0, r2
 8008120:	f7fe fe4b 	bl	8006dba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008124:	f001 fb72 	bl	800980c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008128:	4b0d      	ldr	r3, [pc, #52]	@ (8008160 <prvAddNewTaskToReadyList+0xcc>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00e      	beq.n	800814e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008130:	4b0a      	ldr	r3, [pc, #40]	@ (800815c <prvAddNewTaskToReadyList+0xc8>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813a:	429a      	cmp	r2, r3
 800813c:	d207      	bcs.n	800814e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800813e:	4b0c      	ldr	r3, [pc, #48]	@ (8008170 <prvAddNewTaskToReadyList+0xdc>)
 8008140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008144:	601a      	str	r2, [r3, #0]
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800814e:	bf00      	nop
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	20001520 	.word	0x20001520
 800815c:	2000104c 	.word	0x2000104c
 8008160:	2000152c 	.word	0x2000152c
 8008164:	2000153c 	.word	0x2000153c
 8008168:	20001528 	.word	0x20001528
 800816c:	20001050 	.word	0x20001050
 8008170:	e000ed04 	.word	0xe000ed04

08008174 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800817c:	2300      	movs	r3, #0
 800817e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d018      	beq.n	80081b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008186:	4b14      	ldr	r3, [pc, #80]	@ (80081d8 <vTaskDelay+0x64>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00b      	beq.n	80081a6 <vTaskDelay+0x32>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	60bb      	str	r3, [r7, #8]
}
 80081a0:	bf00      	nop
 80081a2:	bf00      	nop
 80081a4:	e7fd      	b.n	80081a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80081a6:	f000 f88b 	bl	80082c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80081aa:	2100      	movs	r1, #0
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fe19 	bl	8008de4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80081b2:	f000 f893 	bl	80082dc <xTaskResumeAll>
 80081b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d107      	bne.n	80081ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80081be:	4b07      	ldr	r3, [pc, #28]	@ (80081dc <vTaskDelay+0x68>)
 80081c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081ce:	bf00      	nop
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	20001548 	.word	0x20001548
 80081dc:	e000ed04 	.word	0xe000ed04

080081e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b08a      	sub	sp, #40	@ 0x28
 80081e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80081e6:	2300      	movs	r3, #0
 80081e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80081ea:	2300      	movs	r3, #0
 80081ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081ee:	463a      	mov	r2, r7
 80081f0:	1d39      	adds	r1, r7, #4
 80081f2:	f107 0308 	add.w	r3, r7, #8
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fe fd7e 	bl	8006cf8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	9202      	str	r2, [sp, #8]
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	2300      	movs	r3, #0
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	2300      	movs	r3, #0
 800820c:	460a      	mov	r2, r1
 800820e:	4924      	ldr	r1, [pc, #144]	@ (80082a0 <vTaskStartScheduler+0xc0>)
 8008210:	4824      	ldr	r0, [pc, #144]	@ (80082a4 <vTaskStartScheduler+0xc4>)
 8008212:	f7ff fdf1 	bl	8007df8 <xTaskCreateStatic>
 8008216:	4603      	mov	r3, r0
 8008218:	4a23      	ldr	r2, [pc, #140]	@ (80082a8 <vTaskStartScheduler+0xc8>)
 800821a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800821c:	4b22      	ldr	r3, [pc, #136]	@ (80082a8 <vTaskStartScheduler+0xc8>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d002      	beq.n	800822a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008224:	2301      	movs	r3, #1
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	e001      	b.n	800822e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800822a:	2300      	movs	r3, #0
 800822c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d102      	bne.n	800823a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008234:	f000 fe2a 	bl	8008e8c <xTimerCreateTimerTask>
 8008238:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d11b      	bne.n	8008278 <vTaskStartScheduler+0x98>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	613b      	str	r3, [r7, #16]
}
 8008252:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008254:	4b15      	ldr	r3, [pc, #84]	@ (80082ac <vTaskStartScheduler+0xcc>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	3354      	adds	r3, #84	@ 0x54
 800825a:	4a15      	ldr	r2, [pc, #84]	@ (80082b0 <vTaskStartScheduler+0xd0>)
 800825c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800825e:	4b15      	ldr	r3, [pc, #84]	@ (80082b4 <vTaskStartScheduler+0xd4>)
 8008260:	f04f 32ff 	mov.w	r2, #4294967295
 8008264:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008266:	4b14      	ldr	r3, [pc, #80]	@ (80082b8 <vTaskStartScheduler+0xd8>)
 8008268:	2201      	movs	r2, #1
 800826a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800826c:	4b13      	ldr	r3, [pc, #76]	@ (80082bc <vTaskStartScheduler+0xdc>)
 800826e:	2200      	movs	r2, #0
 8008270:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008272:	f001 f9f5 	bl	8009660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008276:	e00f      	b.n	8008298 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827e:	d10b      	bne.n	8008298 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	60fb      	str	r3, [r7, #12]
}
 8008292:	bf00      	nop
 8008294:	bf00      	nop
 8008296:	e7fd      	b.n	8008294 <vTaskStartScheduler+0xb4>
}
 8008298:	bf00      	nop
 800829a:	3718      	adds	r7, #24
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	0800b3f0 	.word	0x0800b3f0
 80082a4:	080088f1 	.word	0x080088f1
 80082a8:	20001544 	.word	0x20001544
 80082ac:	2000104c 	.word	0x2000104c
 80082b0:	2000001c 	.word	0x2000001c
 80082b4:	20001540 	.word	0x20001540
 80082b8:	2000152c 	.word	0x2000152c
 80082bc:	20001524 	.word	0x20001524

080082c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80082c0:	b480      	push	{r7}
 80082c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80082c4:	4b04      	ldr	r3, [pc, #16]	@ (80082d8 <vTaskSuspendAll+0x18>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3301      	adds	r3, #1
 80082ca:	4a03      	ldr	r2, [pc, #12]	@ (80082d8 <vTaskSuspendAll+0x18>)
 80082cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80082ce:	bf00      	nop
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	20001548 	.word	0x20001548

080082dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80082e6:	2300      	movs	r3, #0
 80082e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80082ea:	4b42      	ldr	r3, [pc, #264]	@ (80083f4 <xTaskResumeAll+0x118>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10b      	bne.n	800830a <xTaskResumeAll+0x2e>
	__asm volatile
 80082f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	603b      	str	r3, [r7, #0]
}
 8008304:	bf00      	nop
 8008306:	bf00      	nop
 8008308:	e7fd      	b.n	8008306 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800830a:	f001 fa4d 	bl	80097a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800830e:	4b39      	ldr	r3, [pc, #228]	@ (80083f4 <xTaskResumeAll+0x118>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3b01      	subs	r3, #1
 8008314:	4a37      	ldr	r2, [pc, #220]	@ (80083f4 <xTaskResumeAll+0x118>)
 8008316:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008318:	4b36      	ldr	r3, [pc, #216]	@ (80083f4 <xTaskResumeAll+0x118>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d162      	bne.n	80083e6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008320:	4b35      	ldr	r3, [pc, #212]	@ (80083f8 <xTaskResumeAll+0x11c>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d05e      	beq.n	80083e6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008328:	e02f      	b.n	800838a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800832a:	4b34      	ldr	r3, [pc, #208]	@ (80083fc <xTaskResumeAll+0x120>)
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	3318      	adds	r3, #24
 8008336:	4618      	mov	r0, r3
 8008338:	f7fe fd9c 	bl	8006e74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3304      	adds	r3, #4
 8008340:	4618      	mov	r0, r3
 8008342:	f7fe fd97 	bl	8006e74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800834a:	4b2d      	ldr	r3, [pc, #180]	@ (8008400 <xTaskResumeAll+0x124>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	429a      	cmp	r2, r3
 8008350:	d903      	bls.n	800835a <xTaskResumeAll+0x7e>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008356:	4a2a      	ldr	r2, [pc, #168]	@ (8008400 <xTaskResumeAll+0x124>)
 8008358:	6013      	str	r3, [r2, #0]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800835e:	4613      	mov	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4a27      	ldr	r2, [pc, #156]	@ (8008404 <xTaskResumeAll+0x128>)
 8008368:	441a      	add	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3304      	adds	r3, #4
 800836e:	4619      	mov	r1, r3
 8008370:	4610      	mov	r0, r2
 8008372:	f7fe fd22 	bl	8006dba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800837a:	4b23      	ldr	r3, [pc, #140]	@ (8008408 <xTaskResumeAll+0x12c>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008380:	429a      	cmp	r2, r3
 8008382:	d302      	bcc.n	800838a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008384:	4b21      	ldr	r3, [pc, #132]	@ (800840c <xTaskResumeAll+0x130>)
 8008386:	2201      	movs	r2, #1
 8008388:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800838a:	4b1c      	ldr	r3, [pc, #112]	@ (80083fc <xTaskResumeAll+0x120>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1cb      	bne.n	800832a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008398:	f000 fb66 	bl	8008a68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800839c:	4b1c      	ldr	r3, [pc, #112]	@ (8008410 <xTaskResumeAll+0x134>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d010      	beq.n	80083ca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80083a8:	f000 f846 	bl	8008438 <xTaskIncrementTick>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d002      	beq.n	80083b8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80083b2:	4b16      	ldr	r3, [pc, #88]	@ (800840c <xTaskResumeAll+0x130>)
 80083b4:	2201      	movs	r2, #1
 80083b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1f1      	bne.n	80083a8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80083c4:	4b12      	ldr	r3, [pc, #72]	@ (8008410 <xTaskResumeAll+0x134>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80083ca:	4b10      	ldr	r3, [pc, #64]	@ (800840c <xTaskResumeAll+0x130>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d009      	beq.n	80083e6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80083d2:	2301      	movs	r3, #1
 80083d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80083d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008414 <xTaskResumeAll+0x138>)
 80083d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083e6:	f001 fa11 	bl	800980c <vPortExitCritical>

	return xAlreadyYielded;
 80083ea:	68bb      	ldr	r3, [r7, #8]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	20001548 	.word	0x20001548
 80083f8:	20001520 	.word	0x20001520
 80083fc:	200014e0 	.word	0x200014e0
 8008400:	20001528 	.word	0x20001528
 8008404:	20001050 	.word	0x20001050
 8008408:	2000104c 	.word	0x2000104c
 800840c:	20001534 	.word	0x20001534
 8008410:	20001530 	.word	0x20001530
 8008414:	e000ed04 	.word	0xe000ed04

08008418 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800841e:	4b05      	ldr	r3, [pc, #20]	@ (8008434 <xTaskGetTickCount+0x1c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008424:	687b      	ldr	r3, [r7, #4]
}
 8008426:	4618      	mov	r0, r3
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	20001524 	.word	0x20001524

08008438 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800843e:	2300      	movs	r3, #0
 8008440:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008442:	4b4f      	ldr	r3, [pc, #316]	@ (8008580 <xTaskIncrementTick+0x148>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	f040 8090 	bne.w	800856c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800844c:	4b4d      	ldr	r3, [pc, #308]	@ (8008584 <xTaskIncrementTick+0x14c>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	3301      	adds	r3, #1
 8008452:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008454:	4a4b      	ldr	r2, [pc, #300]	@ (8008584 <xTaskIncrementTick+0x14c>)
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d121      	bne.n	80084a4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008460:	4b49      	ldr	r3, [pc, #292]	@ (8008588 <xTaskIncrementTick+0x150>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00b      	beq.n	8008482 <xTaskIncrementTick+0x4a>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	603b      	str	r3, [r7, #0]
}
 800847c:	bf00      	nop
 800847e:	bf00      	nop
 8008480:	e7fd      	b.n	800847e <xTaskIncrementTick+0x46>
 8008482:	4b41      	ldr	r3, [pc, #260]	@ (8008588 <xTaskIncrementTick+0x150>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	4b40      	ldr	r3, [pc, #256]	@ (800858c <xTaskIncrementTick+0x154>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a3e      	ldr	r2, [pc, #248]	@ (8008588 <xTaskIncrementTick+0x150>)
 800848e:	6013      	str	r3, [r2, #0]
 8008490:	4a3e      	ldr	r2, [pc, #248]	@ (800858c <xTaskIncrementTick+0x154>)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6013      	str	r3, [r2, #0]
 8008496:	4b3e      	ldr	r3, [pc, #248]	@ (8008590 <xTaskIncrementTick+0x158>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3301      	adds	r3, #1
 800849c:	4a3c      	ldr	r2, [pc, #240]	@ (8008590 <xTaskIncrementTick+0x158>)
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	f000 fae2 	bl	8008a68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80084a4:	4b3b      	ldr	r3, [pc, #236]	@ (8008594 <xTaskIncrementTick+0x15c>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d349      	bcc.n	8008542 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084ae:	4b36      	ldr	r3, [pc, #216]	@ (8008588 <xTaskIncrementTick+0x150>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d104      	bne.n	80084c2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084b8:	4b36      	ldr	r3, [pc, #216]	@ (8008594 <xTaskIncrementTick+0x15c>)
 80084ba:	f04f 32ff 	mov.w	r2, #4294967295
 80084be:	601a      	str	r2, [r3, #0]
					break;
 80084c0:	e03f      	b.n	8008542 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084c2:	4b31      	ldr	r3, [pc, #196]	@ (8008588 <xTaskIncrementTick+0x150>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80084d2:	693a      	ldr	r2, [r7, #16]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d203      	bcs.n	80084e2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80084da:	4a2e      	ldr	r2, [pc, #184]	@ (8008594 <xTaskIncrementTick+0x15c>)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80084e0:	e02f      	b.n	8008542 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	3304      	adds	r3, #4
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe fcc4 	bl	8006e74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d004      	beq.n	80084fe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	3318      	adds	r3, #24
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fe fcbb 	bl	8006e74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008502:	4b25      	ldr	r3, [pc, #148]	@ (8008598 <xTaskIncrementTick+0x160>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	429a      	cmp	r2, r3
 8008508:	d903      	bls.n	8008512 <xTaskIncrementTick+0xda>
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800850e:	4a22      	ldr	r2, [pc, #136]	@ (8008598 <xTaskIncrementTick+0x160>)
 8008510:	6013      	str	r3, [r2, #0]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008516:	4613      	mov	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4a1f      	ldr	r2, [pc, #124]	@ (800859c <xTaskIncrementTick+0x164>)
 8008520:	441a      	add	r2, r3
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	3304      	adds	r3, #4
 8008526:	4619      	mov	r1, r3
 8008528:	4610      	mov	r0, r2
 800852a:	f7fe fc46 	bl	8006dba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008532:	4b1b      	ldr	r3, [pc, #108]	@ (80085a0 <xTaskIncrementTick+0x168>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008538:	429a      	cmp	r2, r3
 800853a:	d3b8      	bcc.n	80084ae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800853c:	2301      	movs	r3, #1
 800853e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008540:	e7b5      	b.n	80084ae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008542:	4b17      	ldr	r3, [pc, #92]	@ (80085a0 <xTaskIncrementTick+0x168>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008548:	4914      	ldr	r1, [pc, #80]	@ (800859c <xTaskIncrementTick+0x164>)
 800854a:	4613      	mov	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	4413      	add	r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	440b      	add	r3, r1
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d901      	bls.n	800855e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800855a:	2301      	movs	r3, #1
 800855c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800855e:	4b11      	ldr	r3, [pc, #68]	@ (80085a4 <xTaskIncrementTick+0x16c>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d007      	beq.n	8008576 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008566:	2301      	movs	r3, #1
 8008568:	617b      	str	r3, [r7, #20]
 800856a:	e004      	b.n	8008576 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800856c:	4b0e      	ldr	r3, [pc, #56]	@ (80085a8 <xTaskIncrementTick+0x170>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	3301      	adds	r3, #1
 8008572:	4a0d      	ldr	r2, [pc, #52]	@ (80085a8 <xTaskIncrementTick+0x170>)
 8008574:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008576:	697b      	ldr	r3, [r7, #20]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	20001548 	.word	0x20001548
 8008584:	20001524 	.word	0x20001524
 8008588:	200014d8 	.word	0x200014d8
 800858c:	200014dc 	.word	0x200014dc
 8008590:	20001538 	.word	0x20001538
 8008594:	20001540 	.word	0x20001540
 8008598:	20001528 	.word	0x20001528
 800859c:	20001050 	.word	0x20001050
 80085a0:	2000104c 	.word	0x2000104c
 80085a4:	20001534 	.word	0x20001534
 80085a8:	20001530 	.word	0x20001530

080085ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80085b2:	4b2b      	ldr	r3, [pc, #172]	@ (8008660 <vTaskSwitchContext+0xb4>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80085ba:	4b2a      	ldr	r3, [pc, #168]	@ (8008664 <vTaskSwitchContext+0xb8>)
 80085bc:	2201      	movs	r2, #1
 80085be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80085c0:	e047      	b.n	8008652 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80085c2:	4b28      	ldr	r3, [pc, #160]	@ (8008664 <vTaskSwitchContext+0xb8>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085c8:	4b27      	ldr	r3, [pc, #156]	@ (8008668 <vTaskSwitchContext+0xbc>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	60fb      	str	r3, [r7, #12]
 80085ce:	e011      	b.n	80085f4 <vTaskSwitchContext+0x48>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10b      	bne.n	80085ee <vTaskSwitchContext+0x42>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	607b      	str	r3, [r7, #4]
}
 80085e8:	bf00      	nop
 80085ea:	bf00      	nop
 80085ec:	e7fd      	b.n	80085ea <vTaskSwitchContext+0x3e>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	3b01      	subs	r3, #1
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	491d      	ldr	r1, [pc, #116]	@ (800866c <vTaskSwitchContext+0xc0>)
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	4613      	mov	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	440b      	add	r3, r1
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d0e3      	beq.n	80085d0 <vTaskSwitchContext+0x24>
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	4613      	mov	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4a16      	ldr	r2, [pc, #88]	@ (800866c <vTaskSwitchContext+0xc0>)
 8008614:	4413      	add	r3, r2
 8008616:	60bb      	str	r3, [r7, #8]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	605a      	str	r2, [r3, #4]
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	3308      	adds	r3, #8
 800862a:	429a      	cmp	r2, r3
 800862c:	d104      	bne.n	8008638 <vTaskSwitchContext+0x8c>
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	605a      	str	r2, [r3, #4]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	4a0c      	ldr	r2, [pc, #48]	@ (8008670 <vTaskSwitchContext+0xc4>)
 8008640:	6013      	str	r3, [r2, #0]
 8008642:	4a09      	ldr	r2, [pc, #36]	@ (8008668 <vTaskSwitchContext+0xbc>)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008648:	4b09      	ldr	r3, [pc, #36]	@ (8008670 <vTaskSwitchContext+0xc4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3354      	adds	r3, #84	@ 0x54
 800864e:	4a09      	ldr	r2, [pc, #36]	@ (8008674 <vTaskSwitchContext+0xc8>)
 8008650:	6013      	str	r3, [r2, #0]
}
 8008652:	bf00      	nop
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	20001548 	.word	0x20001548
 8008664:	20001534 	.word	0x20001534
 8008668:	20001528 	.word	0x20001528
 800866c:	20001050 	.word	0x20001050
 8008670:	2000104c 	.word	0x2000104c
 8008674:	2000001c 	.word	0x2000001c

08008678 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10b      	bne.n	80086a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	60fb      	str	r3, [r7, #12]
}
 800869a:	bf00      	nop
 800869c:	bf00      	nop
 800869e:	e7fd      	b.n	800869c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086a0:	4b07      	ldr	r3, [pc, #28]	@ (80086c0 <vTaskPlaceOnEventList+0x48>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3318      	adds	r3, #24
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7fe fbaa 	bl	8006e02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80086ae:	2101      	movs	r1, #1
 80086b0:	6838      	ldr	r0, [r7, #0]
 80086b2:	f000 fb97 	bl	8008de4 <prvAddCurrentTaskToDelayedList>
}
 80086b6:	bf00      	nop
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	2000104c 	.word	0x2000104c

080086c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10b      	bne.n	80086ee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	617b      	str	r3, [r7, #20]
}
 80086e8:	bf00      	nop
 80086ea:	bf00      	nop
 80086ec:	e7fd      	b.n	80086ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086ee:	4b0a      	ldr	r3, [pc, #40]	@ (8008718 <vTaskPlaceOnEventListRestricted+0x54>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3318      	adds	r3, #24
 80086f4:	4619      	mov	r1, r3
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f7fe fb5f 	bl	8006dba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d002      	beq.n	8008708 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008702:	f04f 33ff 	mov.w	r3, #4294967295
 8008706:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008708:	6879      	ldr	r1, [r7, #4]
 800870a:	68b8      	ldr	r0, [r7, #8]
 800870c:	f000 fb6a 	bl	8008de4 <prvAddCurrentTaskToDelayedList>
	}
 8008710:	bf00      	nop
 8008712:	3718      	adds	r7, #24
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	2000104c 	.word	0x2000104c

0800871c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10b      	bne.n	800874a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	60fb      	str	r3, [r7, #12]
}
 8008744:	bf00      	nop
 8008746:	bf00      	nop
 8008748:	e7fd      	b.n	8008746 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	3318      	adds	r3, #24
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe fb90 	bl	8006e74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008754:	4b1d      	ldr	r3, [pc, #116]	@ (80087cc <xTaskRemoveFromEventList+0xb0>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d11d      	bne.n	8008798 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	3304      	adds	r3, #4
 8008760:	4618      	mov	r0, r3
 8008762:	f7fe fb87 	bl	8006e74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800876a:	4b19      	ldr	r3, [pc, #100]	@ (80087d0 <xTaskRemoveFromEventList+0xb4>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	429a      	cmp	r2, r3
 8008770:	d903      	bls.n	800877a <xTaskRemoveFromEventList+0x5e>
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008776:	4a16      	ldr	r2, [pc, #88]	@ (80087d0 <xTaskRemoveFromEventList+0xb4>)
 8008778:	6013      	str	r3, [r2, #0]
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800877e:	4613      	mov	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4a13      	ldr	r2, [pc, #76]	@ (80087d4 <xTaskRemoveFromEventList+0xb8>)
 8008788:	441a      	add	r2, r3
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	3304      	adds	r3, #4
 800878e:	4619      	mov	r1, r3
 8008790:	4610      	mov	r0, r2
 8008792:	f7fe fb12 	bl	8006dba <vListInsertEnd>
 8008796:	e005      	b.n	80087a4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	3318      	adds	r3, #24
 800879c:	4619      	mov	r1, r3
 800879e:	480e      	ldr	r0, [pc, #56]	@ (80087d8 <xTaskRemoveFromEventList+0xbc>)
 80087a0:	f7fe fb0b 	bl	8006dba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087a8:	4b0c      	ldr	r3, [pc, #48]	@ (80087dc <xTaskRemoveFromEventList+0xc0>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d905      	bls.n	80087be <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80087b2:	2301      	movs	r3, #1
 80087b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80087b6:	4b0a      	ldr	r3, [pc, #40]	@ (80087e0 <xTaskRemoveFromEventList+0xc4>)
 80087b8:	2201      	movs	r2, #1
 80087ba:	601a      	str	r2, [r3, #0]
 80087bc:	e001      	b.n	80087c2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80087be:	2300      	movs	r3, #0
 80087c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80087c2:	697b      	ldr	r3, [r7, #20]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	20001548 	.word	0x20001548
 80087d0:	20001528 	.word	0x20001528
 80087d4:	20001050 	.word	0x20001050
 80087d8:	200014e0 	.word	0x200014e0
 80087dc:	2000104c 	.word	0x2000104c
 80087e0:	20001534 	.word	0x20001534

080087e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80087ec:	4b06      	ldr	r3, [pc, #24]	@ (8008808 <vTaskInternalSetTimeOutState+0x24>)
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80087f4:	4b05      	ldr	r3, [pc, #20]	@ (800880c <vTaskInternalSetTimeOutState+0x28>)
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	605a      	str	r2, [r3, #4]
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr
 8008808:	20001538 	.word	0x20001538
 800880c:	20001524 	.word	0x20001524

08008810 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b088      	sub	sp, #32
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10b      	bne.n	8008838 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	613b      	str	r3, [r7, #16]
}
 8008832:	bf00      	nop
 8008834:	bf00      	nop
 8008836:	e7fd      	b.n	8008834 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10b      	bne.n	8008856 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	60fb      	str	r3, [r7, #12]
}
 8008850:	bf00      	nop
 8008852:	bf00      	nop
 8008854:	e7fd      	b.n	8008852 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008856:	f000 ffa7 	bl	80097a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800885a:	4b1d      	ldr	r3, [pc, #116]	@ (80088d0 <xTaskCheckForTimeOut+0xc0>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008872:	d102      	bne.n	800887a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008874:	2300      	movs	r3, #0
 8008876:	61fb      	str	r3, [r7, #28]
 8008878:	e023      	b.n	80088c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	4b15      	ldr	r3, [pc, #84]	@ (80088d4 <xTaskCheckForTimeOut+0xc4>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	429a      	cmp	r2, r3
 8008884:	d007      	beq.n	8008896 <xTaskCheckForTimeOut+0x86>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	69ba      	ldr	r2, [r7, #24]
 800888c:	429a      	cmp	r2, r3
 800888e:	d302      	bcc.n	8008896 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008890:	2301      	movs	r3, #1
 8008892:	61fb      	str	r3, [r7, #28]
 8008894:	e015      	b.n	80088c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	429a      	cmp	r2, r3
 800889e:	d20b      	bcs.n	80088b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	1ad2      	subs	r2, r2, r3
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f7ff ff99 	bl	80087e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80088b2:	2300      	movs	r3, #0
 80088b4:	61fb      	str	r3, [r7, #28]
 80088b6:	e004      	b.n	80088c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	2200      	movs	r2, #0
 80088bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80088be:	2301      	movs	r3, #1
 80088c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80088c2:	f000 ffa3 	bl	800980c <vPortExitCritical>

	return xReturn;
 80088c6:	69fb      	ldr	r3, [r7, #28]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3720      	adds	r7, #32
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	20001524 	.word	0x20001524
 80088d4:	20001538 	.word	0x20001538

080088d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80088d8:	b480      	push	{r7}
 80088da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80088dc:	4b03      	ldr	r3, [pc, #12]	@ (80088ec <vTaskMissedYield+0x14>)
 80088de:	2201      	movs	r2, #1
 80088e0:	601a      	str	r2, [r3, #0]
}
 80088e2:	bf00      	nop
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	20001534 	.word	0x20001534

080088f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80088f8:	f000 f852 	bl	80089a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80088fc:	4b06      	ldr	r3, [pc, #24]	@ (8008918 <prvIdleTask+0x28>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d9f9      	bls.n	80088f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008904:	4b05      	ldr	r3, [pc, #20]	@ (800891c <prvIdleTask+0x2c>)
 8008906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800890a:	601a      	str	r2, [r3, #0]
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008914:	e7f0      	b.n	80088f8 <prvIdleTask+0x8>
 8008916:	bf00      	nop
 8008918:	20001050 	.word	0x20001050
 800891c:	e000ed04 	.word	0xe000ed04

08008920 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008926:	2300      	movs	r3, #0
 8008928:	607b      	str	r3, [r7, #4]
 800892a:	e00c      	b.n	8008946 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	4613      	mov	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4a12      	ldr	r2, [pc, #72]	@ (8008980 <prvInitialiseTaskLists+0x60>)
 8008938:	4413      	add	r3, r2
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe fa10 	bl	8006d60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	3301      	adds	r3, #1
 8008944:	607b      	str	r3, [r7, #4]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2b37      	cmp	r3, #55	@ 0x37
 800894a:	d9ef      	bls.n	800892c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800894c:	480d      	ldr	r0, [pc, #52]	@ (8008984 <prvInitialiseTaskLists+0x64>)
 800894e:	f7fe fa07 	bl	8006d60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008952:	480d      	ldr	r0, [pc, #52]	@ (8008988 <prvInitialiseTaskLists+0x68>)
 8008954:	f7fe fa04 	bl	8006d60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008958:	480c      	ldr	r0, [pc, #48]	@ (800898c <prvInitialiseTaskLists+0x6c>)
 800895a:	f7fe fa01 	bl	8006d60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800895e:	480c      	ldr	r0, [pc, #48]	@ (8008990 <prvInitialiseTaskLists+0x70>)
 8008960:	f7fe f9fe 	bl	8006d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008964:	480b      	ldr	r0, [pc, #44]	@ (8008994 <prvInitialiseTaskLists+0x74>)
 8008966:	f7fe f9fb 	bl	8006d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800896a:	4b0b      	ldr	r3, [pc, #44]	@ (8008998 <prvInitialiseTaskLists+0x78>)
 800896c:	4a05      	ldr	r2, [pc, #20]	@ (8008984 <prvInitialiseTaskLists+0x64>)
 800896e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008970:	4b0a      	ldr	r3, [pc, #40]	@ (800899c <prvInitialiseTaskLists+0x7c>)
 8008972:	4a05      	ldr	r2, [pc, #20]	@ (8008988 <prvInitialiseTaskLists+0x68>)
 8008974:	601a      	str	r2, [r3, #0]
}
 8008976:	bf00      	nop
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	20001050 	.word	0x20001050
 8008984:	200014b0 	.word	0x200014b0
 8008988:	200014c4 	.word	0x200014c4
 800898c:	200014e0 	.word	0x200014e0
 8008990:	200014f4 	.word	0x200014f4
 8008994:	2000150c 	.word	0x2000150c
 8008998:	200014d8 	.word	0x200014d8
 800899c:	200014dc 	.word	0x200014dc

080089a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089a6:	e019      	b.n	80089dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80089a8:	f000 fefe 	bl	80097a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089ac:	4b10      	ldr	r3, [pc, #64]	@ (80089f0 <prvCheckTasksWaitingTermination+0x50>)
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	3304      	adds	r3, #4
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fe fa5b 	bl	8006e74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80089be:	4b0d      	ldr	r3, [pc, #52]	@ (80089f4 <prvCheckTasksWaitingTermination+0x54>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3b01      	subs	r3, #1
 80089c4:	4a0b      	ldr	r2, [pc, #44]	@ (80089f4 <prvCheckTasksWaitingTermination+0x54>)
 80089c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80089c8:	4b0b      	ldr	r3, [pc, #44]	@ (80089f8 <prvCheckTasksWaitingTermination+0x58>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	3b01      	subs	r3, #1
 80089ce:	4a0a      	ldr	r2, [pc, #40]	@ (80089f8 <prvCheckTasksWaitingTermination+0x58>)
 80089d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80089d2:	f000 ff1b 	bl	800980c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f810 	bl	80089fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089dc:	4b06      	ldr	r3, [pc, #24]	@ (80089f8 <prvCheckTasksWaitingTermination+0x58>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1e1      	bne.n	80089a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	200014f4 	.word	0x200014f4
 80089f4:	20001520 	.word	0x20001520
 80089f8:	20001508 	.word	0x20001508

080089fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	3354      	adds	r3, #84	@ 0x54
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f001 fc49 	bl	800a2a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d108      	bne.n	8008a2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f001 f8b3 	bl	8009b88 <vPortFree>
				vPortFree( pxTCB );
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f001 f8b0 	bl	8009b88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a28:	e019      	b.n	8008a5e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d103      	bne.n	8008a3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f001 f8a7 	bl	8009b88 <vPortFree>
	}
 8008a3a:	e010      	b.n	8008a5e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d00b      	beq.n	8008a5e <prvDeleteTCB+0x62>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	60fb      	str	r3, [r7, #12]
}
 8008a58:	bf00      	nop
 8008a5a:	bf00      	nop
 8008a5c:	e7fd      	b.n	8008a5a <prvDeleteTCB+0x5e>
	}
 8008a5e:	bf00      	nop
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
	...

08008a68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008aa0 <prvResetNextTaskUnblockTime+0x38>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d104      	bne.n	8008a82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a78:	4b0a      	ldr	r3, [pc, #40]	@ (8008aa4 <prvResetNextTaskUnblockTime+0x3c>)
 8008a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a80:	e008      	b.n	8008a94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a82:	4b07      	ldr	r3, [pc, #28]	@ (8008aa0 <prvResetNextTaskUnblockTime+0x38>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	4a04      	ldr	r2, [pc, #16]	@ (8008aa4 <prvResetNextTaskUnblockTime+0x3c>)
 8008a92:	6013      	str	r3, [r2, #0]
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	200014d8 	.word	0x200014d8
 8008aa4:	20001540 	.word	0x20001540

08008aa8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008aae:	4b05      	ldr	r3, [pc, #20]	@ (8008ac4 <xTaskGetCurrentTaskHandle+0x1c>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008ab4:	687b      	ldr	r3, [r7, #4]
	}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	370c      	adds	r7, #12
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	2000104c 	.word	0x2000104c

08008ac8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ace:	4b0b      	ldr	r3, [pc, #44]	@ (8008afc <xTaskGetSchedulerState+0x34>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d102      	bne.n	8008adc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	607b      	str	r3, [r7, #4]
 8008ada:	e008      	b.n	8008aee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008adc:	4b08      	ldr	r3, [pc, #32]	@ (8008b00 <xTaskGetSchedulerState+0x38>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d102      	bne.n	8008aea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	607b      	str	r3, [r7, #4]
 8008ae8:	e001      	b.n	8008aee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008aea:	2300      	movs	r3, #0
 8008aec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008aee:	687b      	ldr	r3, [r7, #4]
	}
 8008af0:	4618      	mov	r0, r3
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	2000152c 	.word	0x2000152c
 8008b00:	20001548 	.word	0x20001548

08008b04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008b10:	2300      	movs	r3, #0
 8008b12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d051      	beq.n	8008bbe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8008bc8 <xTaskPriorityInherit+0xc4>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d241      	bcs.n	8008bac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	db06      	blt.n	8008b3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b30:	4b25      	ldr	r3, [pc, #148]	@ (8008bc8 <xTaskPriorityInherit+0xc4>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b36:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	6959      	ldr	r1, [r3, #20]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b46:	4613      	mov	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8008bcc <xTaskPriorityInherit+0xc8>)
 8008b50:	4413      	add	r3, r2
 8008b52:	4299      	cmp	r1, r3
 8008b54:	d122      	bne.n	8008b9c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	3304      	adds	r3, #4
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe f98a 	bl	8006e74 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b60:	4b19      	ldr	r3, [pc, #100]	@ (8008bc8 <xTaskPriorityInherit+0xc4>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b6e:	4b18      	ldr	r3, [pc, #96]	@ (8008bd0 <xTaskPriorityInherit+0xcc>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d903      	bls.n	8008b7e <xTaskPriorityInherit+0x7a>
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b7a:	4a15      	ldr	r2, [pc, #84]	@ (8008bd0 <xTaskPriorityInherit+0xcc>)
 8008b7c:	6013      	str	r3, [r2, #0]
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b82:	4613      	mov	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4413      	add	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4a10      	ldr	r2, [pc, #64]	@ (8008bcc <xTaskPriorityInherit+0xc8>)
 8008b8c:	441a      	add	r2, r3
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	3304      	adds	r3, #4
 8008b92:	4619      	mov	r1, r3
 8008b94:	4610      	mov	r0, r2
 8008b96:	f7fe f910 	bl	8006dba <vListInsertEnd>
 8008b9a:	e004      	b.n	8008ba6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008bc8 <xTaskPriorityInherit+0xc4>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	60fb      	str	r3, [r7, #12]
 8008baa:	e008      	b.n	8008bbe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008bb0:	4b05      	ldr	r3, [pc, #20]	@ (8008bc8 <xTaskPriorityInherit+0xc4>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d201      	bcs.n	8008bbe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
	}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	2000104c 	.word	0x2000104c
 8008bcc:	20001050 	.word	0x20001050
 8008bd0:	20001528 	.word	0x20001528

08008bd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008be0:	2300      	movs	r3, #0
 8008be2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d058      	beq.n	8008c9c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008bea:	4b2f      	ldr	r3, [pc, #188]	@ (8008ca8 <xTaskPriorityDisinherit+0xd4>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d00b      	beq.n	8008c0c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	60fb      	str	r3, [r7, #12]
}
 8008c06:	bf00      	nop
 8008c08:	bf00      	nop
 8008c0a:	e7fd      	b.n	8008c08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10b      	bne.n	8008c2c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	60bb      	str	r3, [r7, #8]
}
 8008c26:	bf00      	nop
 8008c28:	bf00      	nop
 8008c2a:	e7fd      	b.n	8008c28 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c30:	1e5a      	subs	r2, r3, #1
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d02c      	beq.n	8008c9c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d128      	bne.n	8008c9c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	3304      	adds	r3, #4
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fe f910 	bl	8006e74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c60:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8008cac <xTaskPriorityDisinherit+0xd8>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d903      	bls.n	8008c7c <xTaskPriorityDisinherit+0xa8>
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c78:	4a0c      	ldr	r2, [pc, #48]	@ (8008cac <xTaskPriorityDisinherit+0xd8>)
 8008c7a:	6013      	str	r3, [r2, #0]
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c80:	4613      	mov	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4a09      	ldr	r2, [pc, #36]	@ (8008cb0 <xTaskPriorityDisinherit+0xdc>)
 8008c8a:	441a      	add	r2, r3
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	3304      	adds	r3, #4
 8008c90:	4619      	mov	r1, r3
 8008c92:	4610      	mov	r0, r2
 8008c94:	f7fe f891 	bl	8006dba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c9c:	697b      	ldr	r3, [r7, #20]
	}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3718      	adds	r7, #24
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	2000104c 	.word	0x2000104c
 8008cac:	20001528 	.word	0x20001528
 8008cb0:	20001050 	.word	0x20001050

08008cb4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b088      	sub	sp, #32
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d06c      	beq.n	8008da6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10b      	bne.n	8008cec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	60fb      	str	r3, [r7, #12]
}
 8008ce6:	bf00      	nop
 8008ce8:	bf00      	nop
 8008cea:	e7fd      	b.n	8008ce8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d902      	bls.n	8008cfc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	61fb      	str	r3, [r7, #28]
 8008cfa:	e002      	b.n	8008d02 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d00:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d06:	69fa      	ldr	r2, [r7, #28]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d04c      	beq.n	8008da6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d147      	bne.n	8008da6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008d16:	4b26      	ldr	r3, [pc, #152]	@ (8008db0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	69ba      	ldr	r2, [r7, #24]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d10b      	bne.n	8008d38 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d24:	f383 8811 	msr	BASEPRI, r3
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	60bb      	str	r3, [r7, #8]
}
 8008d32:	bf00      	nop
 8008d34:	bf00      	nop
 8008d36:	e7fd      	b.n	8008d34 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	69fa      	ldr	r2, [r7, #28]
 8008d42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	db04      	blt.n	8008d56 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	6959      	ldr	r1, [r3, #20]
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4413      	add	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4a13      	ldr	r2, [pc, #76]	@ (8008db4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008d66:	4413      	add	r3, r2
 8008d68:	4299      	cmp	r1, r3
 8008d6a:	d11c      	bne.n	8008da6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	3304      	adds	r3, #4
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fe f87f 	bl	8006e74 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008db8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d903      	bls.n	8008d8a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d86:	4a0c      	ldr	r2, [pc, #48]	@ (8008db8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008d88:	6013      	str	r3, [r2, #0]
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4a07      	ldr	r2, [pc, #28]	@ (8008db4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008d98:	441a      	add	r2, r3
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4610      	mov	r0, r2
 8008da2:	f7fe f80a 	bl	8006dba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008da6:	bf00      	nop
 8008da8:	3720      	adds	r7, #32
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	2000104c 	.word	0x2000104c
 8008db4:	20001050 	.word	0x20001050
 8008db8:	20001528 	.word	0x20001528

08008dbc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008dbc:	b480      	push	{r7}
 8008dbe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008dc0:	4b07      	ldr	r3, [pc, #28]	@ (8008de0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d004      	beq.n	8008dd2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008dc8:	4b05      	ldr	r3, [pc, #20]	@ (8008de0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008dce:	3201      	adds	r2, #1
 8008dd0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008dd2:	4b03      	ldr	r3, [pc, #12]	@ (8008de0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
	}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr
 8008de0:	2000104c 	.word	0x2000104c

08008de4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008dee:	4b21      	ldr	r3, [pc, #132]	@ (8008e74 <prvAddCurrentTaskToDelayedList+0x90>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008df4:	4b20      	ldr	r3, [pc, #128]	@ (8008e78 <prvAddCurrentTaskToDelayedList+0x94>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3304      	adds	r3, #4
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fe f83a 	bl	8006e74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e06:	d10a      	bne.n	8008e1e <prvAddCurrentTaskToDelayedList+0x3a>
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d007      	beq.n	8008e1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8008e78 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3304      	adds	r3, #4
 8008e14:	4619      	mov	r1, r3
 8008e16:	4819      	ldr	r0, [pc, #100]	@ (8008e7c <prvAddCurrentTaskToDelayedList+0x98>)
 8008e18:	f7fd ffcf 	bl	8006dba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e1c:	e026      	b.n	8008e6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4413      	add	r3, r2
 8008e24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e26:	4b14      	ldr	r3, [pc, #80]	@ (8008e78 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d209      	bcs.n	8008e4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e36:	4b12      	ldr	r3, [pc, #72]	@ (8008e80 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008e78 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3304      	adds	r3, #4
 8008e40:	4619      	mov	r1, r3
 8008e42:	4610      	mov	r0, r2
 8008e44:	f7fd ffdd 	bl	8006e02 <vListInsert>
}
 8008e48:	e010      	b.n	8008e6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8008e84 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8008e78 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	3304      	adds	r3, #4
 8008e54:	4619      	mov	r1, r3
 8008e56:	4610      	mov	r0, r2
 8008e58:	f7fd ffd3 	bl	8006e02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d202      	bcs.n	8008e6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008e66:	4a08      	ldr	r2, [pc, #32]	@ (8008e88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	6013      	str	r3, [r2, #0]
}
 8008e6c:	bf00      	nop
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	20001524 	.word	0x20001524
 8008e78:	2000104c 	.word	0x2000104c
 8008e7c:	2000150c 	.word	0x2000150c
 8008e80:	200014dc 	.word	0x200014dc
 8008e84:	200014d8 	.word	0x200014d8
 8008e88:	20001540 	.word	0x20001540

08008e8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b08a      	sub	sp, #40	@ 0x28
 8008e90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e92:	2300      	movs	r3, #0
 8008e94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e96:	f000 fb13 	bl	80094c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8008f10 <xTimerCreateTimerTask+0x84>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d021      	beq.n	8008ee6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008eaa:	1d3a      	adds	r2, r7, #4
 8008eac:	f107 0108 	add.w	r1, r7, #8
 8008eb0:	f107 030c 	add.w	r3, r7, #12
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fd ff39 	bl	8006d2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	9202      	str	r2, [sp, #8]
 8008ec2:	9301      	str	r3, [sp, #4]
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	2300      	movs	r3, #0
 8008eca:	460a      	mov	r2, r1
 8008ecc:	4911      	ldr	r1, [pc, #68]	@ (8008f14 <xTimerCreateTimerTask+0x88>)
 8008ece:	4812      	ldr	r0, [pc, #72]	@ (8008f18 <xTimerCreateTimerTask+0x8c>)
 8008ed0:	f7fe ff92 	bl	8007df8 <xTaskCreateStatic>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	4a11      	ldr	r2, [pc, #68]	@ (8008f1c <xTimerCreateTimerTask+0x90>)
 8008ed8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008eda:	4b10      	ldr	r3, [pc, #64]	@ (8008f1c <xTimerCreateTimerTask+0x90>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10b      	bne.n	8008f04 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef0:	f383 8811 	msr	BASEPRI, r3
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	613b      	str	r3, [r7, #16]
}
 8008efe:	bf00      	nop
 8008f00:	bf00      	nop
 8008f02:	e7fd      	b.n	8008f00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008f04:	697b      	ldr	r3, [r7, #20]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3718      	adds	r7, #24
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	2000157c 	.word	0x2000157c
 8008f14:	0800b3f8 	.word	0x0800b3f8
 8008f18:	08009059 	.word	0x08009059
 8008f1c:	20001580 	.word	0x20001580

08008f20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08a      	sub	sp, #40	@ 0x28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10b      	bne.n	8008f50 <xTimerGenericCommand+0x30>
	__asm volatile
 8008f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f3c:	f383 8811 	msr	BASEPRI, r3
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	623b      	str	r3, [r7, #32]
}
 8008f4a:	bf00      	nop
 8008f4c:	bf00      	nop
 8008f4e:	e7fd      	b.n	8008f4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f50:	4b19      	ldr	r3, [pc, #100]	@ (8008fb8 <xTimerGenericCommand+0x98>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d02a      	beq.n	8008fae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2b05      	cmp	r3, #5
 8008f68:	dc18      	bgt.n	8008f9c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f6a:	f7ff fdad 	bl	8008ac8 <xTaskGetSchedulerState>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d109      	bne.n	8008f88 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f74:	4b10      	ldr	r3, [pc, #64]	@ (8008fb8 <xTimerGenericCommand+0x98>)
 8008f76:	6818      	ldr	r0, [r3, #0]
 8008f78:	f107 0110 	add.w	r1, r7, #16
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f80:	f7fe f9a0 	bl	80072c4 <xQueueGenericSend>
 8008f84:	6278      	str	r0, [r7, #36]	@ 0x24
 8008f86:	e012      	b.n	8008fae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f88:	4b0b      	ldr	r3, [pc, #44]	@ (8008fb8 <xTimerGenericCommand+0x98>)
 8008f8a:	6818      	ldr	r0, [r3, #0]
 8008f8c:	f107 0110 	add.w	r1, r7, #16
 8008f90:	2300      	movs	r3, #0
 8008f92:	2200      	movs	r2, #0
 8008f94:	f7fe f996 	bl	80072c4 <xQueueGenericSend>
 8008f98:	6278      	str	r0, [r7, #36]	@ 0x24
 8008f9a:	e008      	b.n	8008fae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f9c:	4b06      	ldr	r3, [pc, #24]	@ (8008fb8 <xTimerGenericCommand+0x98>)
 8008f9e:	6818      	ldr	r0, [r3, #0]
 8008fa0:	f107 0110 	add.w	r1, r7, #16
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	f7fe fa8e 	bl	80074c8 <xQueueGenericSendFromISR>
 8008fac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3728      	adds	r7, #40	@ 0x28
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	2000157c 	.word	0x2000157c

08008fbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b088      	sub	sp, #32
 8008fc0:	af02      	add	r7, sp, #8
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fc6:	4b23      	ldr	r3, [pc, #140]	@ (8009054 <prvProcessExpiredTimer+0x98>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fd ff4d 	bl	8006e74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fe0:	f003 0304 	and.w	r3, r3, #4
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d023      	beq.n	8009030 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	699a      	ldr	r2, [r3, #24]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	18d1      	adds	r1, r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	6978      	ldr	r0, [r7, #20]
 8008ff6:	f000 f8d5 	bl	80091a4 <prvInsertTimerInActiveList>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d020      	beq.n	8009042 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009000:	2300      	movs	r3, #0
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	2300      	movs	r3, #0
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	2100      	movs	r1, #0
 800900a:	6978      	ldr	r0, [r7, #20]
 800900c:	f7ff ff88 	bl	8008f20 <xTimerGenericCommand>
 8009010:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d114      	bne.n	8009042 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800901c:	f383 8811 	msr	BASEPRI, r3
 8009020:	f3bf 8f6f 	isb	sy
 8009024:	f3bf 8f4f 	dsb	sy
 8009028:	60fb      	str	r3, [r7, #12]
}
 800902a:	bf00      	nop
 800902c:	bf00      	nop
 800902e:	e7fd      	b.n	800902c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009036:	f023 0301 	bic.w	r3, r3, #1
 800903a:	b2da      	uxtb	r2, r3
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	6978      	ldr	r0, [r7, #20]
 8009048:	4798      	blx	r3
}
 800904a:	bf00      	nop
 800904c:	3718      	adds	r7, #24
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20001574 	.word	0x20001574

08009058 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009060:	f107 0308 	add.w	r3, r7, #8
 8009064:	4618      	mov	r0, r3
 8009066:	f000 f859 	bl	800911c <prvGetNextExpireTime>
 800906a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	4619      	mov	r1, r3
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 f805 	bl	8009080 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009076:	f000 f8d7 	bl	8009228 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800907a:	bf00      	nop
 800907c:	e7f0      	b.n	8009060 <prvTimerTask+0x8>
	...

08009080 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800908a:	f7ff f919 	bl	80082c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800908e:	f107 0308 	add.w	r3, r7, #8
 8009092:	4618      	mov	r0, r3
 8009094:	f000 f866 	bl	8009164 <prvSampleTimeNow>
 8009098:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d130      	bne.n	8009102 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10a      	bne.n	80090bc <prvProcessTimerOrBlockTask+0x3c>
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d806      	bhi.n	80090bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80090ae:	f7ff f915 	bl	80082dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80090b2:	68f9      	ldr	r1, [r7, #12]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7ff ff81 	bl	8008fbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80090ba:	e024      	b.n	8009106 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d008      	beq.n	80090d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80090c2:	4b13      	ldr	r3, [pc, #76]	@ (8009110 <prvProcessTimerOrBlockTask+0x90>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <prvProcessTimerOrBlockTask+0x50>
 80090cc:	2301      	movs	r3, #1
 80090ce:	e000      	b.n	80090d2 <prvProcessTimerOrBlockTask+0x52>
 80090d0:	2300      	movs	r3, #0
 80090d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80090d4:	4b0f      	ldr	r3, [pc, #60]	@ (8009114 <prvProcessTimerOrBlockTask+0x94>)
 80090d6:	6818      	ldr	r0, [r3, #0]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	4619      	mov	r1, r3
 80090e2:	f7fe fe55 	bl	8007d90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80090e6:	f7ff f8f9 	bl	80082dc <xTaskResumeAll>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10a      	bne.n	8009106 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80090f0:	4b09      	ldr	r3, [pc, #36]	@ (8009118 <prvProcessTimerOrBlockTask+0x98>)
 80090f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	f3bf 8f6f 	isb	sy
}
 8009100:	e001      	b.n	8009106 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009102:	f7ff f8eb 	bl	80082dc <xTaskResumeAll>
}
 8009106:	bf00      	nop
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20001578 	.word	0x20001578
 8009114:	2000157c 	.word	0x2000157c
 8009118:	e000ed04 	.word	0xe000ed04

0800911c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009124:	4b0e      	ldr	r3, [pc, #56]	@ (8009160 <prvGetNextExpireTime+0x44>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d101      	bne.n	8009132 <prvGetNextExpireTime+0x16>
 800912e:	2201      	movs	r2, #1
 8009130:	e000      	b.n	8009134 <prvGetNextExpireTime+0x18>
 8009132:	2200      	movs	r2, #0
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d105      	bne.n	800914c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009140:	4b07      	ldr	r3, [pc, #28]	@ (8009160 <prvGetNextExpireTime+0x44>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	60fb      	str	r3, [r7, #12]
 800914a:	e001      	b.n	8009150 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009150:	68fb      	ldr	r3, [r7, #12]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	20001574 	.word	0x20001574

08009164 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800916c:	f7ff f954 	bl	8008418 <xTaskGetTickCount>
 8009170:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009172:	4b0b      	ldr	r3, [pc, #44]	@ (80091a0 <prvSampleTimeNow+0x3c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	429a      	cmp	r2, r3
 800917a:	d205      	bcs.n	8009188 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800917c:	f000 f93a 	bl	80093f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	e002      	b.n	800918e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800918e:	4a04      	ldr	r2, [pc, #16]	@ (80091a0 <prvSampleTimeNow+0x3c>)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009194:	68fb      	ldr	r3, [r7, #12]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	20001584 	.word	0x20001584

080091a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80091b2:	2300      	movs	r3, #0
 80091b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d812      	bhi.n	80091f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	1ad2      	subs	r2, r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d302      	bcc.n	80091de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80091d8:	2301      	movs	r3, #1
 80091da:	617b      	str	r3, [r7, #20]
 80091dc:	e01b      	b.n	8009216 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80091de:	4b10      	ldr	r3, [pc, #64]	@ (8009220 <prvInsertTimerInActiveList+0x7c>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3304      	adds	r3, #4
 80091e6:	4619      	mov	r1, r3
 80091e8:	4610      	mov	r0, r2
 80091ea:	f7fd fe0a 	bl	8006e02 <vListInsert>
 80091ee:	e012      	b.n	8009216 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d206      	bcs.n	8009206 <prvInsertTimerInActiveList+0x62>
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d302      	bcc.n	8009206 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009200:	2301      	movs	r3, #1
 8009202:	617b      	str	r3, [r7, #20]
 8009204:	e007      	b.n	8009216 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009206:	4b07      	ldr	r3, [pc, #28]	@ (8009224 <prvInsertTimerInActiveList+0x80>)
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	3304      	adds	r3, #4
 800920e:	4619      	mov	r1, r3
 8009210:	4610      	mov	r0, r2
 8009212:	f7fd fdf6 	bl	8006e02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009216:	697b      	ldr	r3, [r7, #20]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	20001578 	.word	0x20001578
 8009224:	20001574 	.word	0x20001574

08009228 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b08e      	sub	sp, #56	@ 0x38
 800922c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800922e:	e0ce      	b.n	80093ce <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	da19      	bge.n	800926a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009236:	1d3b      	adds	r3, r7, #4
 8009238:	3304      	adds	r3, #4
 800923a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800923c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10b      	bne.n	800925a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009246:	f383 8811 	msr	BASEPRI, r3
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	61fb      	str	r3, [r7, #28]
}
 8009254:	bf00      	nop
 8009256:	bf00      	nop
 8009258:	e7fd      	b.n	8009256 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800925a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009260:	6850      	ldr	r0, [r2, #4]
 8009262:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009264:	6892      	ldr	r2, [r2, #8]
 8009266:	4611      	mov	r1, r2
 8009268:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	f2c0 80ae 	blt.w	80093ce <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009278:	695b      	ldr	r3, [r3, #20]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d004      	beq.n	8009288 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800927e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009280:	3304      	adds	r3, #4
 8009282:	4618      	mov	r0, r3
 8009284:	f7fd fdf6 	bl	8006e74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009288:	463b      	mov	r3, r7
 800928a:	4618      	mov	r0, r3
 800928c:	f7ff ff6a 	bl	8009164 <prvSampleTimeNow>
 8009290:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2b09      	cmp	r3, #9
 8009296:	f200 8097 	bhi.w	80093c8 <prvProcessReceivedCommands+0x1a0>
 800929a:	a201      	add	r2, pc, #4	@ (adr r2, 80092a0 <prvProcessReceivedCommands+0x78>)
 800929c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a0:	080092c9 	.word	0x080092c9
 80092a4:	080092c9 	.word	0x080092c9
 80092a8:	080092c9 	.word	0x080092c9
 80092ac:	0800933f 	.word	0x0800933f
 80092b0:	08009353 	.word	0x08009353
 80092b4:	0800939f 	.word	0x0800939f
 80092b8:	080092c9 	.word	0x080092c9
 80092bc:	080092c9 	.word	0x080092c9
 80092c0:	0800933f 	.word	0x0800933f
 80092c4:	08009353 	.word	0x08009353
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092ce:	f043 0301 	orr.w	r3, r3, #1
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	18d1      	adds	r1, r2, r3
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092e8:	f7ff ff5c 	bl	80091a4 <prvInsertTimerInActiveList>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d06c      	beq.n	80093cc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009300:	f003 0304 	and.w	r3, r3, #4
 8009304:	2b00      	cmp	r3, #0
 8009306:	d061      	beq.n	80093cc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	441a      	add	r2, r3
 8009310:	2300      	movs	r3, #0
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	2300      	movs	r3, #0
 8009316:	2100      	movs	r1, #0
 8009318:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800931a:	f7ff fe01 	bl	8008f20 <xTimerGenericCommand>
 800931e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009320:	6a3b      	ldr	r3, [r7, #32]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d152      	bne.n	80093cc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932a:	f383 8811 	msr	BASEPRI, r3
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	61bb      	str	r3, [r7, #24]
}
 8009338:	bf00      	nop
 800933a:	bf00      	nop
 800933c:	e7fd      	b.n	800933a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800933e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009344:	f023 0301 	bic.w	r3, r3, #1
 8009348:	b2da      	uxtb	r2, r3
 800934a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800934c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009350:	e03d      	b.n	80093ce <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009354:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009358:	f043 0301 	orr.w	r3, r3, #1
 800935c:	b2da      	uxtb	r2, r3
 800935e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009360:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009368:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800936a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10b      	bne.n	800938a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	617b      	str	r3, [r7, #20]
}
 8009384:	bf00      	nop
 8009386:	bf00      	nop
 8009388:	e7fd      	b.n	8009386 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800938a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800938c:	699a      	ldr	r2, [r3, #24]
 800938e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009390:	18d1      	adds	r1, r2, r3
 8009392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009398:	f7ff ff04 	bl	80091a4 <prvInsertTimerInActiveList>
					break;
 800939c:	e017      	b.n	80093ce <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800939e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d103      	bne.n	80093b4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80093ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093ae:	f000 fbeb 	bl	8009b88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80093b2:	e00c      	b.n	80093ce <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093ba:	f023 0301 	bic.w	r3, r3, #1
 80093be:	b2da      	uxtb	r2, r3
 80093c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80093c6:	e002      	b.n	80093ce <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80093c8:	bf00      	nop
 80093ca:	e000      	b.n	80093ce <prvProcessReceivedCommands+0x1a6>
					break;
 80093cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093ce:	4b08      	ldr	r3, [pc, #32]	@ (80093f0 <prvProcessReceivedCommands+0x1c8>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	1d39      	adds	r1, r7, #4
 80093d4:	2200      	movs	r2, #0
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fe f914 	bl	8007604 <xQueueReceive>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f47f af26 	bne.w	8009230 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80093e4:	bf00      	nop
 80093e6:	bf00      	nop
 80093e8:	3730      	adds	r7, #48	@ 0x30
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	2000157c 	.word	0x2000157c

080093f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b088      	sub	sp, #32
 80093f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093fa:	e049      	b.n	8009490 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093fc:	4b2e      	ldr	r3, [pc, #184]	@ (80094b8 <prvSwitchTimerLists+0xc4>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009406:	4b2c      	ldr	r3, [pc, #176]	@ (80094b8 <prvSwitchTimerLists+0xc4>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	3304      	adds	r3, #4
 8009414:	4618      	mov	r0, r3
 8009416:	f7fd fd2d 	bl	8006e74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6a1b      	ldr	r3, [r3, #32]
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009428:	f003 0304 	and.w	r3, r3, #4
 800942c:	2b00      	cmp	r3, #0
 800942e:	d02f      	beq.n	8009490 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	4413      	add	r3, r2
 8009438:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	429a      	cmp	r2, r3
 8009440:	d90e      	bls.n	8009460 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800944e:	4b1a      	ldr	r3, [pc, #104]	@ (80094b8 <prvSwitchTimerLists+0xc4>)
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	3304      	adds	r3, #4
 8009456:	4619      	mov	r1, r3
 8009458:	4610      	mov	r0, r2
 800945a:	f7fd fcd2 	bl	8006e02 <vListInsert>
 800945e:	e017      	b.n	8009490 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009460:	2300      	movs	r3, #0
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	2300      	movs	r3, #0
 8009466:	693a      	ldr	r2, [r7, #16]
 8009468:	2100      	movs	r1, #0
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f7ff fd58 	bl	8008f20 <xTimerGenericCommand>
 8009470:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10b      	bne.n	8009490 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	603b      	str	r3, [r7, #0]
}
 800948a:	bf00      	nop
 800948c:	bf00      	nop
 800948e:	e7fd      	b.n	800948c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009490:	4b09      	ldr	r3, [pc, #36]	@ (80094b8 <prvSwitchTimerLists+0xc4>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1b0      	bne.n	80093fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800949a:	4b07      	ldr	r3, [pc, #28]	@ (80094b8 <prvSwitchTimerLists+0xc4>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80094a0:	4b06      	ldr	r3, [pc, #24]	@ (80094bc <prvSwitchTimerLists+0xc8>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a04      	ldr	r2, [pc, #16]	@ (80094b8 <prvSwitchTimerLists+0xc4>)
 80094a6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80094a8:	4a04      	ldr	r2, [pc, #16]	@ (80094bc <prvSwitchTimerLists+0xc8>)
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	6013      	str	r3, [r2, #0]
}
 80094ae:	bf00      	nop
 80094b0:	3718      	adds	r7, #24
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	20001574 	.word	0x20001574
 80094bc:	20001578 	.word	0x20001578

080094c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80094c6:	f000 f96f 	bl	80097a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80094ca:	4b15      	ldr	r3, [pc, #84]	@ (8009520 <prvCheckForValidListAndQueue+0x60>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d120      	bne.n	8009514 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80094d2:	4814      	ldr	r0, [pc, #80]	@ (8009524 <prvCheckForValidListAndQueue+0x64>)
 80094d4:	f7fd fc44 	bl	8006d60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80094d8:	4813      	ldr	r0, [pc, #76]	@ (8009528 <prvCheckForValidListAndQueue+0x68>)
 80094da:	f7fd fc41 	bl	8006d60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80094de:	4b13      	ldr	r3, [pc, #76]	@ (800952c <prvCheckForValidListAndQueue+0x6c>)
 80094e0:	4a10      	ldr	r2, [pc, #64]	@ (8009524 <prvCheckForValidListAndQueue+0x64>)
 80094e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80094e4:	4b12      	ldr	r3, [pc, #72]	@ (8009530 <prvCheckForValidListAndQueue+0x70>)
 80094e6:	4a10      	ldr	r2, [pc, #64]	@ (8009528 <prvCheckForValidListAndQueue+0x68>)
 80094e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80094ea:	2300      	movs	r3, #0
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	4b11      	ldr	r3, [pc, #68]	@ (8009534 <prvCheckForValidListAndQueue+0x74>)
 80094f0:	4a11      	ldr	r2, [pc, #68]	@ (8009538 <prvCheckForValidListAndQueue+0x78>)
 80094f2:	2110      	movs	r1, #16
 80094f4:	200a      	movs	r0, #10
 80094f6:	f7fd fd51 	bl	8006f9c <xQueueGenericCreateStatic>
 80094fa:	4603      	mov	r3, r0
 80094fc:	4a08      	ldr	r2, [pc, #32]	@ (8009520 <prvCheckForValidListAndQueue+0x60>)
 80094fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009500:	4b07      	ldr	r3, [pc, #28]	@ (8009520 <prvCheckForValidListAndQueue+0x60>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d005      	beq.n	8009514 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009508:	4b05      	ldr	r3, [pc, #20]	@ (8009520 <prvCheckForValidListAndQueue+0x60>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	490b      	ldr	r1, [pc, #44]	@ (800953c <prvCheckForValidListAndQueue+0x7c>)
 800950e:	4618      	mov	r0, r3
 8009510:	f7fe fc14 	bl	8007d3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009514:	f000 f97a 	bl	800980c <vPortExitCritical>
}
 8009518:	bf00      	nop
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	2000157c 	.word	0x2000157c
 8009524:	2000154c 	.word	0x2000154c
 8009528:	20001560 	.word	0x20001560
 800952c:	20001574 	.word	0x20001574
 8009530:	20001578 	.word	0x20001578
 8009534:	20001628 	.word	0x20001628
 8009538:	20001588 	.word	0x20001588
 800953c:	0800b400 	.word	0x0800b400

08009540 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	3b04      	subs	r3, #4
 8009550:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009558:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	3b04      	subs	r3, #4
 800955e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	f023 0201 	bic.w	r2, r3, #1
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3b04      	subs	r3, #4
 800956e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009570:	4a0c      	ldr	r2, [pc, #48]	@ (80095a4 <pxPortInitialiseStack+0x64>)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	3b14      	subs	r3, #20
 800957a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3b04      	subs	r3, #4
 8009586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f06f 0202 	mvn.w	r2, #2
 800958e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	3b20      	subs	r3, #32
 8009594:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009596:	68fb      	ldr	r3, [r7, #12]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr
 80095a4:	080095a9 	.word	0x080095a9

080095a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80095ae:	2300      	movs	r3, #0
 80095b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80095b2:	4b13      	ldr	r3, [pc, #76]	@ (8009600 <prvTaskExitError+0x58>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ba:	d00b      	beq.n	80095d4 <prvTaskExitError+0x2c>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	60fb      	str	r3, [r7, #12]
}
 80095ce:	bf00      	nop
 80095d0:	bf00      	nop
 80095d2:	e7fd      	b.n	80095d0 <prvTaskExitError+0x28>
	__asm volatile
 80095d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	60bb      	str	r3, [r7, #8]
}
 80095e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80095e8:	bf00      	nop
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d0fc      	beq.n	80095ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80095f0:	bf00      	nop
 80095f2:	bf00      	nop
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	2000000c 	.word	0x2000000c
	...

08009610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009610:	4b07      	ldr	r3, [pc, #28]	@ (8009630 <pxCurrentTCBConst2>)
 8009612:	6819      	ldr	r1, [r3, #0]
 8009614:	6808      	ldr	r0, [r1, #0]
 8009616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961a:	f380 8809 	msr	PSP, r0
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	f04f 0000 	mov.w	r0, #0
 8009626:	f380 8811 	msr	BASEPRI, r0
 800962a:	4770      	bx	lr
 800962c:	f3af 8000 	nop.w

08009630 <pxCurrentTCBConst2>:
 8009630:	2000104c 	.word	0x2000104c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009634:	bf00      	nop
 8009636:	bf00      	nop

08009638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009638:	4808      	ldr	r0, [pc, #32]	@ (800965c <prvPortStartFirstTask+0x24>)
 800963a:	6800      	ldr	r0, [r0, #0]
 800963c:	6800      	ldr	r0, [r0, #0]
 800963e:	f380 8808 	msr	MSP, r0
 8009642:	f04f 0000 	mov.w	r0, #0
 8009646:	f380 8814 	msr	CONTROL, r0
 800964a:	b662      	cpsie	i
 800964c:	b661      	cpsie	f
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	df00      	svc	0
 8009658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800965a:	bf00      	nop
 800965c:	e000ed08 	.word	0xe000ed08

08009660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009666:	4b47      	ldr	r3, [pc, #284]	@ (8009784 <xPortStartScheduler+0x124>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a47      	ldr	r2, [pc, #284]	@ (8009788 <xPortStartScheduler+0x128>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d10b      	bne.n	8009688 <xPortStartScheduler+0x28>
	__asm volatile
 8009670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	60fb      	str	r3, [r7, #12]
}
 8009682:	bf00      	nop
 8009684:	bf00      	nop
 8009686:	e7fd      	b.n	8009684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009688:	4b3e      	ldr	r3, [pc, #248]	@ (8009784 <xPortStartScheduler+0x124>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a3f      	ldr	r2, [pc, #252]	@ (800978c <xPortStartScheduler+0x12c>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d10b      	bne.n	80096aa <xPortStartScheduler+0x4a>
	__asm volatile
 8009692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009696:	f383 8811 	msr	BASEPRI, r3
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	613b      	str	r3, [r7, #16]
}
 80096a4:	bf00      	nop
 80096a6:	bf00      	nop
 80096a8:	e7fd      	b.n	80096a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80096aa:	4b39      	ldr	r3, [pc, #228]	@ (8009790 <xPortStartScheduler+0x130>)
 80096ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	22ff      	movs	r2, #255	@ 0xff
 80096ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80096c4:	78fb      	ldrb	r3, [r7, #3]
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80096cc:	b2da      	uxtb	r2, r3
 80096ce:	4b31      	ldr	r3, [pc, #196]	@ (8009794 <xPortStartScheduler+0x134>)
 80096d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80096d2:	4b31      	ldr	r3, [pc, #196]	@ (8009798 <xPortStartScheduler+0x138>)
 80096d4:	2207      	movs	r2, #7
 80096d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80096d8:	e009      	b.n	80096ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80096da:	4b2f      	ldr	r3, [pc, #188]	@ (8009798 <xPortStartScheduler+0x138>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	3b01      	subs	r3, #1
 80096e0:	4a2d      	ldr	r2, [pc, #180]	@ (8009798 <xPortStartScheduler+0x138>)
 80096e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80096e4:	78fb      	ldrb	r3, [r7, #3]
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	005b      	lsls	r3, r3, #1
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80096ee:	78fb      	ldrb	r3, [r7, #3]
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096f6:	2b80      	cmp	r3, #128	@ 0x80
 80096f8:	d0ef      	beq.n	80096da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80096fa:	4b27      	ldr	r3, [pc, #156]	@ (8009798 <xPortStartScheduler+0x138>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f1c3 0307 	rsb	r3, r3, #7
 8009702:	2b04      	cmp	r3, #4
 8009704:	d00b      	beq.n	800971e <xPortStartScheduler+0xbe>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	60bb      	str	r3, [r7, #8]
}
 8009718:	bf00      	nop
 800971a:	bf00      	nop
 800971c:	e7fd      	b.n	800971a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800971e:	4b1e      	ldr	r3, [pc, #120]	@ (8009798 <xPortStartScheduler+0x138>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	021b      	lsls	r3, r3, #8
 8009724:	4a1c      	ldr	r2, [pc, #112]	@ (8009798 <xPortStartScheduler+0x138>)
 8009726:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009728:	4b1b      	ldr	r3, [pc, #108]	@ (8009798 <xPortStartScheduler+0x138>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009730:	4a19      	ldr	r2, [pc, #100]	@ (8009798 <xPortStartScheduler+0x138>)
 8009732:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	b2da      	uxtb	r2, r3
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800973c:	4b17      	ldr	r3, [pc, #92]	@ (800979c <xPortStartScheduler+0x13c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a16      	ldr	r2, [pc, #88]	@ (800979c <xPortStartScheduler+0x13c>)
 8009742:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009746:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009748:	4b14      	ldr	r3, [pc, #80]	@ (800979c <xPortStartScheduler+0x13c>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a13      	ldr	r2, [pc, #76]	@ (800979c <xPortStartScheduler+0x13c>)
 800974e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009752:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009754:	f000 f8da 	bl	800990c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009758:	4b11      	ldr	r3, [pc, #68]	@ (80097a0 <xPortStartScheduler+0x140>)
 800975a:	2200      	movs	r2, #0
 800975c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800975e:	f000 f8f9 	bl	8009954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009762:	4b10      	ldr	r3, [pc, #64]	@ (80097a4 <xPortStartScheduler+0x144>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a0f      	ldr	r2, [pc, #60]	@ (80097a4 <xPortStartScheduler+0x144>)
 8009768:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800976c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800976e:	f7ff ff63 	bl	8009638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009772:	f7fe ff1b 	bl	80085ac <vTaskSwitchContext>
	prvTaskExitError();
 8009776:	f7ff ff17 	bl	80095a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3718      	adds	r7, #24
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	e000ed00 	.word	0xe000ed00
 8009788:	410fc271 	.word	0x410fc271
 800978c:	410fc270 	.word	0x410fc270
 8009790:	e000e400 	.word	0xe000e400
 8009794:	20001678 	.word	0x20001678
 8009798:	2000167c 	.word	0x2000167c
 800979c:	e000ed20 	.word	0xe000ed20
 80097a0:	2000000c 	.word	0x2000000c
 80097a4:	e000ef34 	.word	0xe000ef34

080097a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	607b      	str	r3, [r7, #4]
}
 80097c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80097c2:	4b10      	ldr	r3, [pc, #64]	@ (8009804 <vPortEnterCritical+0x5c>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	3301      	adds	r3, #1
 80097c8:	4a0e      	ldr	r2, [pc, #56]	@ (8009804 <vPortEnterCritical+0x5c>)
 80097ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80097cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009804 <vPortEnterCritical+0x5c>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d110      	bne.n	80097f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80097d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009808 <vPortEnterCritical+0x60>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00b      	beq.n	80097f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	603b      	str	r3, [r7, #0]
}
 80097f0:	bf00      	nop
 80097f2:	bf00      	nop
 80097f4:	e7fd      	b.n	80097f2 <vPortEnterCritical+0x4a>
	}
}
 80097f6:	bf00      	nop
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	2000000c 	.word	0x2000000c
 8009808:	e000ed04 	.word	0xe000ed04

0800980c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009812:	4b12      	ldr	r3, [pc, #72]	@ (800985c <vPortExitCritical+0x50>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10b      	bne.n	8009832 <vPortExitCritical+0x26>
	__asm volatile
 800981a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	607b      	str	r3, [r7, #4]
}
 800982c:	bf00      	nop
 800982e:	bf00      	nop
 8009830:	e7fd      	b.n	800982e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009832:	4b0a      	ldr	r3, [pc, #40]	@ (800985c <vPortExitCritical+0x50>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	3b01      	subs	r3, #1
 8009838:	4a08      	ldr	r2, [pc, #32]	@ (800985c <vPortExitCritical+0x50>)
 800983a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800983c:	4b07      	ldr	r3, [pc, #28]	@ (800985c <vPortExitCritical+0x50>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d105      	bne.n	8009850 <vPortExitCritical+0x44>
 8009844:	2300      	movs	r3, #0
 8009846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	f383 8811 	msr	BASEPRI, r3
}
 800984e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	2000000c 	.word	0x2000000c

08009860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009860:	f3ef 8009 	mrs	r0, PSP
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	4b15      	ldr	r3, [pc, #84]	@ (80098c0 <pxCurrentTCBConst>)
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	f01e 0f10 	tst.w	lr, #16
 8009870:	bf08      	it	eq
 8009872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987a:	6010      	str	r0, [r2, #0]
 800987c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009880:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009884:	f380 8811 	msr	BASEPRI, r0
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f7fe fe8c 	bl	80085ac <vTaskSwitchContext>
 8009894:	f04f 0000 	mov.w	r0, #0
 8009898:	f380 8811 	msr	BASEPRI, r0
 800989c:	bc09      	pop	{r0, r3}
 800989e:	6819      	ldr	r1, [r3, #0]
 80098a0:	6808      	ldr	r0, [r1, #0]
 80098a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a6:	f01e 0f10 	tst.w	lr, #16
 80098aa:	bf08      	it	eq
 80098ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80098b0:	f380 8809 	msr	PSP, r0
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	f3af 8000 	nop.w

080098c0 <pxCurrentTCBConst>:
 80098c0:	2000104c 	.word	0x2000104c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80098c4:	bf00      	nop
 80098c6:	bf00      	nop

080098c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	607b      	str	r3, [r7, #4]
}
 80098e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80098e2:	f7fe fda9 	bl	8008438 <xTaskIncrementTick>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d003      	beq.n	80098f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80098ec:	4b06      	ldr	r3, [pc, #24]	@ (8009908 <xPortSysTickHandler+0x40>)
 80098ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098f2:	601a      	str	r2, [r3, #0]
 80098f4:	2300      	movs	r3, #0
 80098f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	f383 8811 	msr	BASEPRI, r3
}
 80098fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009900:	bf00      	nop
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	e000ed04 	.word	0xe000ed04

0800990c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800990c:	b480      	push	{r7}
 800990e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009910:	4b0b      	ldr	r3, [pc, #44]	@ (8009940 <vPortSetupTimerInterrupt+0x34>)
 8009912:	2200      	movs	r2, #0
 8009914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009916:	4b0b      	ldr	r3, [pc, #44]	@ (8009944 <vPortSetupTimerInterrupt+0x38>)
 8009918:	2200      	movs	r2, #0
 800991a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800991c:	4b0a      	ldr	r3, [pc, #40]	@ (8009948 <vPortSetupTimerInterrupt+0x3c>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a0a      	ldr	r2, [pc, #40]	@ (800994c <vPortSetupTimerInterrupt+0x40>)
 8009922:	fba2 2303 	umull	r2, r3, r2, r3
 8009926:	099b      	lsrs	r3, r3, #6
 8009928:	4a09      	ldr	r2, [pc, #36]	@ (8009950 <vPortSetupTimerInterrupt+0x44>)
 800992a:	3b01      	subs	r3, #1
 800992c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800992e:	4b04      	ldr	r3, [pc, #16]	@ (8009940 <vPortSetupTimerInterrupt+0x34>)
 8009930:	2207      	movs	r2, #7
 8009932:	601a      	str	r2, [r3, #0]
}
 8009934:	bf00      	nop
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	e000e010 	.word	0xe000e010
 8009944:	e000e018 	.word	0xe000e018
 8009948:	20000000 	.word	0x20000000
 800994c:	10624dd3 	.word	0x10624dd3
 8009950:	e000e014 	.word	0xe000e014

08009954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009954:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009964 <vPortEnableVFP+0x10>
 8009958:	6801      	ldr	r1, [r0, #0]
 800995a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800995e:	6001      	str	r1, [r0, #0]
 8009960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009962:	bf00      	nop
 8009964:	e000ed88 	.word	0xe000ed88

08009968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800996e:	f3ef 8305 	mrs	r3, IPSR
 8009972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2b0f      	cmp	r3, #15
 8009978:	d915      	bls.n	80099a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800997a:	4a18      	ldr	r2, [pc, #96]	@ (80099dc <vPortValidateInterruptPriority+0x74>)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	4413      	add	r3, r2
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009984:	4b16      	ldr	r3, [pc, #88]	@ (80099e0 <vPortValidateInterruptPriority+0x78>)
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	7afa      	ldrb	r2, [r7, #11]
 800998a:	429a      	cmp	r2, r3
 800998c:	d20b      	bcs.n	80099a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	607b      	str	r3, [r7, #4]
}
 80099a0:	bf00      	nop
 80099a2:	bf00      	nop
 80099a4:	e7fd      	b.n	80099a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80099a6:	4b0f      	ldr	r3, [pc, #60]	@ (80099e4 <vPortValidateInterruptPriority+0x7c>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80099ae:	4b0e      	ldr	r3, [pc, #56]	@ (80099e8 <vPortValidateInterruptPriority+0x80>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d90b      	bls.n	80099ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80099b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ba:	f383 8811 	msr	BASEPRI, r3
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f3bf 8f4f 	dsb	sy
 80099c6:	603b      	str	r3, [r7, #0]
}
 80099c8:	bf00      	nop
 80099ca:	bf00      	nop
 80099cc:	e7fd      	b.n	80099ca <vPortValidateInterruptPriority+0x62>
	}
 80099ce:	bf00      	nop
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	e000e3f0 	.word	0xe000e3f0
 80099e0:	20001678 	.word	0x20001678
 80099e4:	e000ed0c 	.word	0xe000ed0c
 80099e8:	2000167c 	.word	0x2000167c

080099ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b08a      	sub	sp, #40	@ 0x28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80099f4:	2300      	movs	r3, #0
 80099f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80099f8:	f7fe fc62 	bl	80082c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80099fc:	4b5c      	ldr	r3, [pc, #368]	@ (8009b70 <pvPortMalloc+0x184>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a04:	f000 f924 	bl	8009c50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a08:	4b5a      	ldr	r3, [pc, #360]	@ (8009b74 <pvPortMalloc+0x188>)
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4013      	ands	r3, r2
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f040 8095 	bne.w	8009b40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d01e      	beq.n	8009a5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009a1c:	2208      	movs	r2, #8
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4413      	add	r3, r2
 8009a22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d015      	beq.n	8009a5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f023 0307 	bic.w	r3, r3, #7
 8009a34:	3308      	adds	r3, #8
 8009a36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f003 0307 	and.w	r3, r3, #7
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00b      	beq.n	8009a5a <pvPortMalloc+0x6e>
	__asm volatile
 8009a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	617b      	str	r3, [r7, #20]
}
 8009a54:	bf00      	nop
 8009a56:	bf00      	nop
 8009a58:	e7fd      	b.n	8009a56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d06f      	beq.n	8009b40 <pvPortMalloc+0x154>
 8009a60:	4b45      	ldr	r3, [pc, #276]	@ (8009b78 <pvPortMalloc+0x18c>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d86a      	bhi.n	8009b40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a6a:	4b44      	ldr	r3, [pc, #272]	@ (8009b7c <pvPortMalloc+0x190>)
 8009a6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a6e:	4b43      	ldr	r3, [pc, #268]	@ (8009b7c <pvPortMalloc+0x190>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a74:	e004      	b.n	8009a80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d903      	bls.n	8009a92 <pvPortMalloc+0xa6>
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1f1      	bne.n	8009a76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a92:	4b37      	ldr	r3, [pc, #220]	@ (8009b70 <pvPortMalloc+0x184>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d051      	beq.n	8009b40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a9c:	6a3b      	ldr	r3, [r7, #32]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2208      	movs	r2, #8
 8009aa2:	4413      	add	r3, r2
 8009aa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	6a3b      	ldr	r3, [r7, #32]
 8009aac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	1ad2      	subs	r2, r2, r3
 8009ab6:	2308      	movs	r3, #8
 8009ab8:	005b      	lsls	r3, r3, #1
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d920      	bls.n	8009b00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	f003 0307 	and.w	r3, r3, #7
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00b      	beq.n	8009ae8 <pvPortMalloc+0xfc>
	__asm volatile
 8009ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	613b      	str	r3, [r7, #16]
}
 8009ae2:	bf00      	nop
 8009ae4:	bf00      	nop
 8009ae6:	e7fd      	b.n	8009ae4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	1ad2      	subs	r2, r2, r3
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009afa:	69b8      	ldr	r0, [r7, #24]
 8009afc:	f000 f90a 	bl	8009d14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b00:	4b1d      	ldr	r3, [pc, #116]	@ (8009b78 <pvPortMalloc+0x18c>)
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	1ad3      	subs	r3, r2, r3
 8009b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8009b78 <pvPortMalloc+0x18c>)
 8009b0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8009b78 <pvPortMalloc+0x18c>)
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	4b1b      	ldr	r3, [pc, #108]	@ (8009b80 <pvPortMalloc+0x194>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d203      	bcs.n	8009b22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b1a:	4b17      	ldr	r3, [pc, #92]	@ (8009b78 <pvPortMalloc+0x18c>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a18      	ldr	r2, [pc, #96]	@ (8009b80 <pvPortMalloc+0x194>)
 8009b20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	4b13      	ldr	r3, [pc, #76]	@ (8009b74 <pvPortMalloc+0x188>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b32:	2200      	movs	r2, #0
 8009b34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009b36:	4b13      	ldr	r3, [pc, #76]	@ (8009b84 <pvPortMalloc+0x198>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	4a11      	ldr	r2, [pc, #68]	@ (8009b84 <pvPortMalloc+0x198>)
 8009b3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b40:	f7fe fbcc 	bl	80082dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	f003 0307 	and.w	r3, r3, #7
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00b      	beq.n	8009b66 <pvPortMalloc+0x17a>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	60fb      	str	r3, [r7, #12]
}
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	e7fd      	b.n	8009b62 <pvPortMalloc+0x176>
	return pvReturn;
 8009b66:	69fb      	ldr	r3, [r7, #28]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3728      	adds	r7, #40	@ 0x28
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	20009688 	.word	0x20009688
 8009b74:	2000969c 	.word	0x2000969c
 8009b78:	2000968c 	.word	0x2000968c
 8009b7c:	20009680 	.word	0x20009680
 8009b80:	20009690 	.word	0x20009690
 8009b84:	20009694 	.word	0x20009694

08009b88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b086      	sub	sp, #24
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d04f      	beq.n	8009c3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b9a:	2308      	movs	r3, #8
 8009b9c:	425b      	negs	r3, r3
 8009b9e:	697a      	ldr	r2, [r7, #20]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	685a      	ldr	r2, [r3, #4]
 8009bac:	4b25      	ldr	r3, [pc, #148]	@ (8009c44 <vPortFree+0xbc>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10b      	bne.n	8009bce <vPortFree+0x46>
	__asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	60fb      	str	r3, [r7, #12]
}
 8009bc8:	bf00      	nop
 8009bca:	bf00      	nop
 8009bcc:	e7fd      	b.n	8009bca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00b      	beq.n	8009bee <vPortFree+0x66>
	__asm volatile
 8009bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bda:	f383 8811 	msr	BASEPRI, r3
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f3bf 8f4f 	dsb	sy
 8009be6:	60bb      	str	r3, [r7, #8]
}
 8009be8:	bf00      	nop
 8009bea:	bf00      	nop
 8009bec:	e7fd      	b.n	8009bea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	685a      	ldr	r2, [r3, #4]
 8009bf2:	4b14      	ldr	r3, [pc, #80]	@ (8009c44 <vPortFree+0xbc>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d01e      	beq.n	8009c3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d11a      	bne.n	8009c3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	685a      	ldr	r2, [r3, #4]
 8009c08:	4b0e      	ldr	r3, [pc, #56]	@ (8009c44 <vPortFree+0xbc>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	43db      	mvns	r3, r3
 8009c0e:	401a      	ands	r2, r3
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c14:	f7fe fb54 	bl	80082c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c48 <vPortFree+0xc0>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4413      	add	r3, r2
 8009c22:	4a09      	ldr	r2, [pc, #36]	@ (8009c48 <vPortFree+0xc0>)
 8009c24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c26:	6938      	ldr	r0, [r7, #16]
 8009c28:	f000 f874 	bl	8009d14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009c2c:	4b07      	ldr	r3, [pc, #28]	@ (8009c4c <vPortFree+0xc4>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3301      	adds	r3, #1
 8009c32:	4a06      	ldr	r2, [pc, #24]	@ (8009c4c <vPortFree+0xc4>)
 8009c34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009c36:	f7fe fb51 	bl	80082dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c3a:	bf00      	nop
 8009c3c:	3718      	adds	r7, #24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	2000969c 	.word	0x2000969c
 8009c48:	2000968c 	.word	0x2000968c
 8009c4c:	20009698 	.word	0x20009698

08009c50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c5c:	4b27      	ldr	r3, [pc, #156]	@ (8009cfc <prvHeapInit+0xac>)
 8009c5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f003 0307 	and.w	r3, r3, #7
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00c      	beq.n	8009c84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	3307      	adds	r3, #7
 8009c6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f023 0307 	bic.w	r3, r3, #7
 8009c76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8009cfc <prvHeapInit+0xac>)
 8009c80:	4413      	add	r3, r2
 8009c82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c88:	4a1d      	ldr	r2, [pc, #116]	@ (8009d00 <prvHeapInit+0xb0>)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8009d00 <prvHeapInit+0xb0>)
 8009c90:	2200      	movs	r2, #0
 8009c92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	4413      	add	r3, r2
 8009c9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009c9c:	2208      	movs	r2, #8
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	1a9b      	subs	r3, r3, r2
 8009ca2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f023 0307 	bic.w	r3, r3, #7
 8009caa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	4a15      	ldr	r2, [pc, #84]	@ (8009d04 <prvHeapInit+0xb4>)
 8009cb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009cb2:	4b14      	ldr	r3, [pc, #80]	@ (8009d04 <prvHeapInit+0xb4>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009cba:	4b12      	ldr	r3, [pc, #72]	@ (8009d04 <prvHeapInit+0xb4>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	1ad2      	subs	r2, r2, r3
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8009d04 <prvHeapInit+0xb4>)
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8009d08 <prvHeapInit+0xb8>)
 8009cde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	4a09      	ldr	r2, [pc, #36]	@ (8009d0c <prvHeapInit+0xbc>)
 8009ce6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ce8:	4b09      	ldr	r3, [pc, #36]	@ (8009d10 <prvHeapInit+0xc0>)
 8009cea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009cee:	601a      	str	r2, [r3, #0]
}
 8009cf0:	bf00      	nop
 8009cf2:	3714      	adds	r7, #20
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr
 8009cfc:	20001680 	.word	0x20001680
 8009d00:	20009680 	.word	0x20009680
 8009d04:	20009688 	.word	0x20009688
 8009d08:	20009690 	.word	0x20009690
 8009d0c:	2000968c 	.word	0x2000968c
 8009d10:	2000969c 	.word	0x2000969c

08009d14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d1c:	4b28      	ldr	r3, [pc, #160]	@ (8009dc0 <prvInsertBlockIntoFreeList+0xac>)
 8009d1e:	60fb      	str	r3, [r7, #12]
 8009d20:	e002      	b.n	8009d28 <prvInsertBlockIntoFreeList+0x14>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	60fb      	str	r3, [r7, #12]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d8f7      	bhi.n	8009d22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d108      	bne.n	8009d56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	685a      	ldr	r2, [r3, #4]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	441a      	add	r2, r3
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	441a      	add	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d118      	bne.n	8009d9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	4b15      	ldr	r3, [pc, #84]	@ (8009dc4 <prvInsertBlockIntoFreeList+0xb0>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d00d      	beq.n	8009d92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	685a      	ldr	r2, [r3, #4]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	441a      	add	r2, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	601a      	str	r2, [r3, #0]
 8009d90:	e008      	b.n	8009da4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d92:	4b0c      	ldr	r3, [pc, #48]	@ (8009dc4 <prvInsertBlockIntoFreeList+0xb0>)
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	601a      	str	r2, [r3, #0]
 8009d9a:	e003      	b.n	8009da4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d002      	beq.n	8009db2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009db2:	bf00      	nop
 8009db4:	3714      	adds	r7, #20
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	20009680 	.word	0x20009680
 8009dc4:	20009688 	.word	0x20009688

08009dc8 <std>:
 8009dc8:	2300      	movs	r3, #0
 8009dca:	b510      	push	{r4, lr}
 8009dcc:	4604      	mov	r4, r0
 8009dce:	e9c0 3300 	strd	r3, r3, [r0]
 8009dd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009dd6:	6083      	str	r3, [r0, #8]
 8009dd8:	8181      	strh	r1, [r0, #12]
 8009dda:	6643      	str	r3, [r0, #100]	@ 0x64
 8009ddc:	81c2      	strh	r2, [r0, #14]
 8009dde:	6183      	str	r3, [r0, #24]
 8009de0:	4619      	mov	r1, r3
 8009de2:	2208      	movs	r2, #8
 8009de4:	305c      	adds	r0, #92	@ 0x5c
 8009de6:	f000 fa2f 	bl	800a248 <memset>
 8009dea:	4b0d      	ldr	r3, [pc, #52]	@ (8009e20 <std+0x58>)
 8009dec:	6263      	str	r3, [r4, #36]	@ 0x24
 8009dee:	4b0d      	ldr	r3, [pc, #52]	@ (8009e24 <std+0x5c>)
 8009df0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009df2:	4b0d      	ldr	r3, [pc, #52]	@ (8009e28 <std+0x60>)
 8009df4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009df6:	4b0d      	ldr	r3, [pc, #52]	@ (8009e2c <std+0x64>)
 8009df8:	6323      	str	r3, [r4, #48]	@ 0x30
 8009dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8009e30 <std+0x68>)
 8009dfc:	6224      	str	r4, [r4, #32]
 8009dfe:	429c      	cmp	r4, r3
 8009e00:	d006      	beq.n	8009e10 <std+0x48>
 8009e02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009e06:	4294      	cmp	r4, r2
 8009e08:	d002      	beq.n	8009e10 <std+0x48>
 8009e0a:	33d0      	adds	r3, #208	@ 0xd0
 8009e0c:	429c      	cmp	r4, r3
 8009e0e:	d105      	bne.n	8009e1c <std+0x54>
 8009e10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e18:	f000 bb00 	b.w	800a41c <__retarget_lock_init_recursive>
 8009e1c:	bd10      	pop	{r4, pc}
 8009e1e:	bf00      	nop
 8009e20:	0800a099 	.word	0x0800a099
 8009e24:	0800a0bb 	.word	0x0800a0bb
 8009e28:	0800a0f3 	.word	0x0800a0f3
 8009e2c:	0800a117 	.word	0x0800a117
 8009e30:	200096a0 	.word	0x200096a0

08009e34 <stdio_exit_handler>:
 8009e34:	4a02      	ldr	r2, [pc, #8]	@ (8009e40 <stdio_exit_handler+0xc>)
 8009e36:	4903      	ldr	r1, [pc, #12]	@ (8009e44 <stdio_exit_handler+0x10>)
 8009e38:	4803      	ldr	r0, [pc, #12]	@ (8009e48 <stdio_exit_handler+0x14>)
 8009e3a:	f000 b869 	b.w	8009f10 <_fwalk_sglue>
 8009e3e:	bf00      	nop
 8009e40:	20000010 	.word	0x20000010
 8009e44:	0800af85 	.word	0x0800af85
 8009e48:	20000020 	.word	0x20000020

08009e4c <cleanup_stdio>:
 8009e4c:	6841      	ldr	r1, [r0, #4]
 8009e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8009e80 <cleanup_stdio+0x34>)
 8009e50:	4299      	cmp	r1, r3
 8009e52:	b510      	push	{r4, lr}
 8009e54:	4604      	mov	r4, r0
 8009e56:	d001      	beq.n	8009e5c <cleanup_stdio+0x10>
 8009e58:	f001 f894 	bl	800af84 <_fflush_r>
 8009e5c:	68a1      	ldr	r1, [r4, #8]
 8009e5e:	4b09      	ldr	r3, [pc, #36]	@ (8009e84 <cleanup_stdio+0x38>)
 8009e60:	4299      	cmp	r1, r3
 8009e62:	d002      	beq.n	8009e6a <cleanup_stdio+0x1e>
 8009e64:	4620      	mov	r0, r4
 8009e66:	f001 f88d 	bl	800af84 <_fflush_r>
 8009e6a:	68e1      	ldr	r1, [r4, #12]
 8009e6c:	4b06      	ldr	r3, [pc, #24]	@ (8009e88 <cleanup_stdio+0x3c>)
 8009e6e:	4299      	cmp	r1, r3
 8009e70:	d004      	beq.n	8009e7c <cleanup_stdio+0x30>
 8009e72:	4620      	mov	r0, r4
 8009e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e78:	f001 b884 	b.w	800af84 <_fflush_r>
 8009e7c:	bd10      	pop	{r4, pc}
 8009e7e:	bf00      	nop
 8009e80:	200096a0 	.word	0x200096a0
 8009e84:	20009708 	.word	0x20009708
 8009e88:	20009770 	.word	0x20009770

08009e8c <global_stdio_init.part.0>:
 8009e8c:	b510      	push	{r4, lr}
 8009e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8009ebc <global_stdio_init.part.0+0x30>)
 8009e90:	4c0b      	ldr	r4, [pc, #44]	@ (8009ec0 <global_stdio_init.part.0+0x34>)
 8009e92:	4a0c      	ldr	r2, [pc, #48]	@ (8009ec4 <global_stdio_init.part.0+0x38>)
 8009e94:	601a      	str	r2, [r3, #0]
 8009e96:	4620      	mov	r0, r4
 8009e98:	2200      	movs	r2, #0
 8009e9a:	2104      	movs	r1, #4
 8009e9c:	f7ff ff94 	bl	8009dc8 <std>
 8009ea0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	2109      	movs	r1, #9
 8009ea8:	f7ff ff8e 	bl	8009dc8 <std>
 8009eac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009eb0:	2202      	movs	r2, #2
 8009eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eb6:	2112      	movs	r1, #18
 8009eb8:	f7ff bf86 	b.w	8009dc8 <std>
 8009ebc:	200097d8 	.word	0x200097d8
 8009ec0:	200096a0 	.word	0x200096a0
 8009ec4:	08009e35 	.word	0x08009e35

08009ec8 <__sfp_lock_acquire>:
 8009ec8:	4801      	ldr	r0, [pc, #4]	@ (8009ed0 <__sfp_lock_acquire+0x8>)
 8009eca:	f000 baa8 	b.w	800a41e <__retarget_lock_acquire_recursive>
 8009ece:	bf00      	nop
 8009ed0:	200097e1 	.word	0x200097e1

08009ed4 <__sfp_lock_release>:
 8009ed4:	4801      	ldr	r0, [pc, #4]	@ (8009edc <__sfp_lock_release+0x8>)
 8009ed6:	f000 baa3 	b.w	800a420 <__retarget_lock_release_recursive>
 8009eda:	bf00      	nop
 8009edc:	200097e1 	.word	0x200097e1

08009ee0 <__sinit>:
 8009ee0:	b510      	push	{r4, lr}
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	f7ff fff0 	bl	8009ec8 <__sfp_lock_acquire>
 8009ee8:	6a23      	ldr	r3, [r4, #32]
 8009eea:	b11b      	cbz	r3, 8009ef4 <__sinit+0x14>
 8009eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ef0:	f7ff bff0 	b.w	8009ed4 <__sfp_lock_release>
 8009ef4:	4b04      	ldr	r3, [pc, #16]	@ (8009f08 <__sinit+0x28>)
 8009ef6:	6223      	str	r3, [r4, #32]
 8009ef8:	4b04      	ldr	r3, [pc, #16]	@ (8009f0c <__sinit+0x2c>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1f5      	bne.n	8009eec <__sinit+0xc>
 8009f00:	f7ff ffc4 	bl	8009e8c <global_stdio_init.part.0>
 8009f04:	e7f2      	b.n	8009eec <__sinit+0xc>
 8009f06:	bf00      	nop
 8009f08:	08009e4d 	.word	0x08009e4d
 8009f0c:	200097d8 	.word	0x200097d8

08009f10 <_fwalk_sglue>:
 8009f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f14:	4607      	mov	r7, r0
 8009f16:	4688      	mov	r8, r1
 8009f18:	4614      	mov	r4, r2
 8009f1a:	2600      	movs	r6, #0
 8009f1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f20:	f1b9 0901 	subs.w	r9, r9, #1
 8009f24:	d505      	bpl.n	8009f32 <_fwalk_sglue+0x22>
 8009f26:	6824      	ldr	r4, [r4, #0]
 8009f28:	2c00      	cmp	r4, #0
 8009f2a:	d1f7      	bne.n	8009f1c <_fwalk_sglue+0xc>
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f32:	89ab      	ldrh	r3, [r5, #12]
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d907      	bls.n	8009f48 <_fwalk_sglue+0x38>
 8009f38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	d003      	beq.n	8009f48 <_fwalk_sglue+0x38>
 8009f40:	4629      	mov	r1, r5
 8009f42:	4638      	mov	r0, r7
 8009f44:	47c0      	blx	r8
 8009f46:	4306      	orrs	r6, r0
 8009f48:	3568      	adds	r5, #104	@ 0x68
 8009f4a:	e7e9      	b.n	8009f20 <_fwalk_sglue+0x10>

08009f4c <iprintf>:
 8009f4c:	b40f      	push	{r0, r1, r2, r3}
 8009f4e:	b507      	push	{r0, r1, r2, lr}
 8009f50:	4906      	ldr	r1, [pc, #24]	@ (8009f6c <iprintf+0x20>)
 8009f52:	ab04      	add	r3, sp, #16
 8009f54:	6808      	ldr	r0, [r1, #0]
 8009f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f5a:	6881      	ldr	r1, [r0, #8]
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	f000 fce9 	bl	800a934 <_vfiprintf_r>
 8009f62:	b003      	add	sp, #12
 8009f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f68:	b004      	add	sp, #16
 8009f6a:	4770      	bx	lr
 8009f6c:	2000001c 	.word	0x2000001c

08009f70 <_puts_r>:
 8009f70:	6a03      	ldr	r3, [r0, #32]
 8009f72:	b570      	push	{r4, r5, r6, lr}
 8009f74:	6884      	ldr	r4, [r0, #8]
 8009f76:	4605      	mov	r5, r0
 8009f78:	460e      	mov	r6, r1
 8009f7a:	b90b      	cbnz	r3, 8009f80 <_puts_r+0x10>
 8009f7c:	f7ff ffb0 	bl	8009ee0 <__sinit>
 8009f80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f82:	07db      	lsls	r3, r3, #31
 8009f84:	d405      	bmi.n	8009f92 <_puts_r+0x22>
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	0598      	lsls	r0, r3, #22
 8009f8a:	d402      	bmi.n	8009f92 <_puts_r+0x22>
 8009f8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f8e:	f000 fa46 	bl	800a41e <__retarget_lock_acquire_recursive>
 8009f92:	89a3      	ldrh	r3, [r4, #12]
 8009f94:	0719      	lsls	r1, r3, #28
 8009f96:	d502      	bpl.n	8009f9e <_puts_r+0x2e>
 8009f98:	6923      	ldr	r3, [r4, #16]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d135      	bne.n	800a00a <_puts_r+0x9a>
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	f000 f8fb 	bl	800a19c <__swsetup_r>
 8009fa6:	b380      	cbz	r0, 800a00a <_puts_r+0x9a>
 8009fa8:	f04f 35ff 	mov.w	r5, #4294967295
 8009fac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009fae:	07da      	lsls	r2, r3, #31
 8009fb0:	d405      	bmi.n	8009fbe <_puts_r+0x4e>
 8009fb2:	89a3      	ldrh	r3, [r4, #12]
 8009fb4:	059b      	lsls	r3, r3, #22
 8009fb6:	d402      	bmi.n	8009fbe <_puts_r+0x4e>
 8009fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fba:	f000 fa31 	bl	800a420 <__retarget_lock_release_recursive>
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	bd70      	pop	{r4, r5, r6, pc}
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	da04      	bge.n	8009fd0 <_puts_r+0x60>
 8009fc6:	69a2      	ldr	r2, [r4, #24]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	dc17      	bgt.n	8009ffc <_puts_r+0x8c>
 8009fcc:	290a      	cmp	r1, #10
 8009fce:	d015      	beq.n	8009ffc <_puts_r+0x8c>
 8009fd0:	6823      	ldr	r3, [r4, #0]
 8009fd2:	1c5a      	adds	r2, r3, #1
 8009fd4:	6022      	str	r2, [r4, #0]
 8009fd6:	7019      	strb	r1, [r3, #0]
 8009fd8:	68a3      	ldr	r3, [r4, #8]
 8009fda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	60a3      	str	r3, [r4, #8]
 8009fe2:	2900      	cmp	r1, #0
 8009fe4:	d1ed      	bne.n	8009fc2 <_puts_r+0x52>
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	da11      	bge.n	800a00e <_puts_r+0x9e>
 8009fea:	4622      	mov	r2, r4
 8009fec:	210a      	movs	r1, #10
 8009fee:	4628      	mov	r0, r5
 8009ff0:	f000 f895 	bl	800a11e <__swbuf_r>
 8009ff4:	3001      	adds	r0, #1
 8009ff6:	d0d7      	beq.n	8009fa8 <_puts_r+0x38>
 8009ff8:	250a      	movs	r5, #10
 8009ffa:	e7d7      	b.n	8009fac <_puts_r+0x3c>
 8009ffc:	4622      	mov	r2, r4
 8009ffe:	4628      	mov	r0, r5
 800a000:	f000 f88d 	bl	800a11e <__swbuf_r>
 800a004:	3001      	adds	r0, #1
 800a006:	d1e7      	bne.n	8009fd8 <_puts_r+0x68>
 800a008:	e7ce      	b.n	8009fa8 <_puts_r+0x38>
 800a00a:	3e01      	subs	r6, #1
 800a00c:	e7e4      	b.n	8009fd8 <_puts_r+0x68>
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	1c5a      	adds	r2, r3, #1
 800a012:	6022      	str	r2, [r4, #0]
 800a014:	220a      	movs	r2, #10
 800a016:	701a      	strb	r2, [r3, #0]
 800a018:	e7ee      	b.n	8009ff8 <_puts_r+0x88>
	...

0800a01c <puts>:
 800a01c:	4b02      	ldr	r3, [pc, #8]	@ (800a028 <puts+0xc>)
 800a01e:	4601      	mov	r1, r0
 800a020:	6818      	ldr	r0, [r3, #0]
 800a022:	f7ff bfa5 	b.w	8009f70 <_puts_r>
 800a026:	bf00      	nop
 800a028:	2000001c 	.word	0x2000001c

0800a02c <sniprintf>:
 800a02c:	b40c      	push	{r2, r3}
 800a02e:	b530      	push	{r4, r5, lr}
 800a030:	4b18      	ldr	r3, [pc, #96]	@ (800a094 <sniprintf+0x68>)
 800a032:	1e0c      	subs	r4, r1, #0
 800a034:	681d      	ldr	r5, [r3, #0]
 800a036:	b09d      	sub	sp, #116	@ 0x74
 800a038:	da08      	bge.n	800a04c <sniprintf+0x20>
 800a03a:	238b      	movs	r3, #139	@ 0x8b
 800a03c:	602b      	str	r3, [r5, #0]
 800a03e:	f04f 30ff 	mov.w	r0, #4294967295
 800a042:	b01d      	add	sp, #116	@ 0x74
 800a044:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a048:	b002      	add	sp, #8
 800a04a:	4770      	bx	lr
 800a04c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a050:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a054:	f04f 0300 	mov.w	r3, #0
 800a058:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a05a:	bf14      	ite	ne
 800a05c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a060:	4623      	moveq	r3, r4
 800a062:	9304      	str	r3, [sp, #16]
 800a064:	9307      	str	r3, [sp, #28]
 800a066:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a06a:	9002      	str	r0, [sp, #8]
 800a06c:	9006      	str	r0, [sp, #24]
 800a06e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a072:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a074:	ab21      	add	r3, sp, #132	@ 0x84
 800a076:	a902      	add	r1, sp, #8
 800a078:	4628      	mov	r0, r5
 800a07a:	9301      	str	r3, [sp, #4]
 800a07c:	f000 fb34 	bl	800a6e8 <_svfiprintf_r>
 800a080:	1c43      	adds	r3, r0, #1
 800a082:	bfbc      	itt	lt
 800a084:	238b      	movlt	r3, #139	@ 0x8b
 800a086:	602b      	strlt	r3, [r5, #0]
 800a088:	2c00      	cmp	r4, #0
 800a08a:	d0da      	beq.n	800a042 <sniprintf+0x16>
 800a08c:	9b02      	ldr	r3, [sp, #8]
 800a08e:	2200      	movs	r2, #0
 800a090:	701a      	strb	r2, [r3, #0]
 800a092:	e7d6      	b.n	800a042 <sniprintf+0x16>
 800a094:	2000001c 	.word	0x2000001c

0800a098 <__sread>:
 800a098:	b510      	push	{r4, lr}
 800a09a:	460c      	mov	r4, r1
 800a09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0a0:	f000 f96e 	bl	800a380 <_read_r>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	bfab      	itete	ge
 800a0a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a0aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a0ac:	181b      	addge	r3, r3, r0
 800a0ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a0b2:	bfac      	ite	ge
 800a0b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a0b6:	81a3      	strhlt	r3, [r4, #12]
 800a0b8:	bd10      	pop	{r4, pc}

0800a0ba <__swrite>:
 800a0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0be:	461f      	mov	r7, r3
 800a0c0:	898b      	ldrh	r3, [r1, #12]
 800a0c2:	05db      	lsls	r3, r3, #23
 800a0c4:	4605      	mov	r5, r0
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	4616      	mov	r6, r2
 800a0ca:	d505      	bpl.n	800a0d8 <__swrite+0x1e>
 800a0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f000 f942 	bl	800a35c <_lseek_r>
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a0e2:	81a3      	strh	r3, [r4, #12]
 800a0e4:	4632      	mov	r2, r6
 800a0e6:	463b      	mov	r3, r7
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ee:	f000 b959 	b.w	800a3a4 <_write_r>

0800a0f2 <__sseek>:
 800a0f2:	b510      	push	{r4, lr}
 800a0f4:	460c      	mov	r4, r1
 800a0f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0fa:	f000 f92f 	bl	800a35c <_lseek_r>
 800a0fe:	1c43      	adds	r3, r0, #1
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	bf15      	itete	ne
 800a104:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a106:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a10a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a10e:	81a3      	strheq	r3, [r4, #12]
 800a110:	bf18      	it	ne
 800a112:	81a3      	strhne	r3, [r4, #12]
 800a114:	bd10      	pop	{r4, pc}

0800a116 <__sclose>:
 800a116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a11a:	f000 b8b1 	b.w	800a280 <_close_r>

0800a11e <__swbuf_r>:
 800a11e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a120:	460e      	mov	r6, r1
 800a122:	4614      	mov	r4, r2
 800a124:	4605      	mov	r5, r0
 800a126:	b118      	cbz	r0, 800a130 <__swbuf_r+0x12>
 800a128:	6a03      	ldr	r3, [r0, #32]
 800a12a:	b90b      	cbnz	r3, 800a130 <__swbuf_r+0x12>
 800a12c:	f7ff fed8 	bl	8009ee0 <__sinit>
 800a130:	69a3      	ldr	r3, [r4, #24]
 800a132:	60a3      	str	r3, [r4, #8]
 800a134:	89a3      	ldrh	r3, [r4, #12]
 800a136:	071a      	lsls	r2, r3, #28
 800a138:	d501      	bpl.n	800a13e <__swbuf_r+0x20>
 800a13a:	6923      	ldr	r3, [r4, #16]
 800a13c:	b943      	cbnz	r3, 800a150 <__swbuf_r+0x32>
 800a13e:	4621      	mov	r1, r4
 800a140:	4628      	mov	r0, r5
 800a142:	f000 f82b 	bl	800a19c <__swsetup_r>
 800a146:	b118      	cbz	r0, 800a150 <__swbuf_r+0x32>
 800a148:	f04f 37ff 	mov.w	r7, #4294967295
 800a14c:	4638      	mov	r0, r7
 800a14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a150:	6823      	ldr	r3, [r4, #0]
 800a152:	6922      	ldr	r2, [r4, #16]
 800a154:	1a98      	subs	r0, r3, r2
 800a156:	6963      	ldr	r3, [r4, #20]
 800a158:	b2f6      	uxtb	r6, r6
 800a15a:	4283      	cmp	r3, r0
 800a15c:	4637      	mov	r7, r6
 800a15e:	dc05      	bgt.n	800a16c <__swbuf_r+0x4e>
 800a160:	4621      	mov	r1, r4
 800a162:	4628      	mov	r0, r5
 800a164:	f000 ff0e 	bl	800af84 <_fflush_r>
 800a168:	2800      	cmp	r0, #0
 800a16a:	d1ed      	bne.n	800a148 <__swbuf_r+0x2a>
 800a16c:	68a3      	ldr	r3, [r4, #8]
 800a16e:	3b01      	subs	r3, #1
 800a170:	60a3      	str	r3, [r4, #8]
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	1c5a      	adds	r2, r3, #1
 800a176:	6022      	str	r2, [r4, #0]
 800a178:	701e      	strb	r6, [r3, #0]
 800a17a:	6962      	ldr	r2, [r4, #20]
 800a17c:	1c43      	adds	r3, r0, #1
 800a17e:	429a      	cmp	r2, r3
 800a180:	d004      	beq.n	800a18c <__swbuf_r+0x6e>
 800a182:	89a3      	ldrh	r3, [r4, #12]
 800a184:	07db      	lsls	r3, r3, #31
 800a186:	d5e1      	bpl.n	800a14c <__swbuf_r+0x2e>
 800a188:	2e0a      	cmp	r6, #10
 800a18a:	d1df      	bne.n	800a14c <__swbuf_r+0x2e>
 800a18c:	4621      	mov	r1, r4
 800a18e:	4628      	mov	r0, r5
 800a190:	f000 fef8 	bl	800af84 <_fflush_r>
 800a194:	2800      	cmp	r0, #0
 800a196:	d0d9      	beq.n	800a14c <__swbuf_r+0x2e>
 800a198:	e7d6      	b.n	800a148 <__swbuf_r+0x2a>
	...

0800a19c <__swsetup_r>:
 800a19c:	b538      	push	{r3, r4, r5, lr}
 800a19e:	4b29      	ldr	r3, [pc, #164]	@ (800a244 <__swsetup_r+0xa8>)
 800a1a0:	4605      	mov	r5, r0
 800a1a2:	6818      	ldr	r0, [r3, #0]
 800a1a4:	460c      	mov	r4, r1
 800a1a6:	b118      	cbz	r0, 800a1b0 <__swsetup_r+0x14>
 800a1a8:	6a03      	ldr	r3, [r0, #32]
 800a1aa:	b90b      	cbnz	r3, 800a1b0 <__swsetup_r+0x14>
 800a1ac:	f7ff fe98 	bl	8009ee0 <__sinit>
 800a1b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1b4:	0719      	lsls	r1, r3, #28
 800a1b6:	d422      	bmi.n	800a1fe <__swsetup_r+0x62>
 800a1b8:	06da      	lsls	r2, r3, #27
 800a1ba:	d407      	bmi.n	800a1cc <__swsetup_r+0x30>
 800a1bc:	2209      	movs	r2, #9
 800a1be:	602a      	str	r2, [r5, #0]
 800a1c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1c4:	81a3      	strh	r3, [r4, #12]
 800a1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ca:	e033      	b.n	800a234 <__swsetup_r+0x98>
 800a1cc:	0758      	lsls	r0, r3, #29
 800a1ce:	d512      	bpl.n	800a1f6 <__swsetup_r+0x5a>
 800a1d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1d2:	b141      	cbz	r1, 800a1e6 <__swsetup_r+0x4a>
 800a1d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1d8:	4299      	cmp	r1, r3
 800a1da:	d002      	beq.n	800a1e2 <__swsetup_r+0x46>
 800a1dc:	4628      	mov	r0, r5
 800a1de:	f000 f92f 	bl	800a440 <_free_r>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1e6:	89a3      	ldrh	r3, [r4, #12]
 800a1e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a1ec:	81a3      	strh	r3, [r4, #12]
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	6063      	str	r3, [r4, #4]
 800a1f2:	6923      	ldr	r3, [r4, #16]
 800a1f4:	6023      	str	r3, [r4, #0]
 800a1f6:	89a3      	ldrh	r3, [r4, #12]
 800a1f8:	f043 0308 	orr.w	r3, r3, #8
 800a1fc:	81a3      	strh	r3, [r4, #12]
 800a1fe:	6923      	ldr	r3, [r4, #16]
 800a200:	b94b      	cbnz	r3, 800a216 <__swsetup_r+0x7a>
 800a202:	89a3      	ldrh	r3, [r4, #12]
 800a204:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a20c:	d003      	beq.n	800a216 <__swsetup_r+0x7a>
 800a20e:	4621      	mov	r1, r4
 800a210:	4628      	mov	r0, r5
 800a212:	f000 ff05 	bl	800b020 <__smakebuf_r>
 800a216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a21a:	f013 0201 	ands.w	r2, r3, #1
 800a21e:	d00a      	beq.n	800a236 <__swsetup_r+0x9a>
 800a220:	2200      	movs	r2, #0
 800a222:	60a2      	str	r2, [r4, #8]
 800a224:	6962      	ldr	r2, [r4, #20]
 800a226:	4252      	negs	r2, r2
 800a228:	61a2      	str	r2, [r4, #24]
 800a22a:	6922      	ldr	r2, [r4, #16]
 800a22c:	b942      	cbnz	r2, 800a240 <__swsetup_r+0xa4>
 800a22e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a232:	d1c5      	bne.n	800a1c0 <__swsetup_r+0x24>
 800a234:	bd38      	pop	{r3, r4, r5, pc}
 800a236:	0799      	lsls	r1, r3, #30
 800a238:	bf58      	it	pl
 800a23a:	6962      	ldrpl	r2, [r4, #20]
 800a23c:	60a2      	str	r2, [r4, #8]
 800a23e:	e7f4      	b.n	800a22a <__swsetup_r+0x8e>
 800a240:	2000      	movs	r0, #0
 800a242:	e7f7      	b.n	800a234 <__swsetup_r+0x98>
 800a244:	2000001c 	.word	0x2000001c

0800a248 <memset>:
 800a248:	4402      	add	r2, r0
 800a24a:	4603      	mov	r3, r0
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d100      	bne.n	800a252 <memset+0xa>
 800a250:	4770      	bx	lr
 800a252:	f803 1b01 	strb.w	r1, [r3], #1
 800a256:	e7f9      	b.n	800a24c <memset+0x4>

0800a258 <strncpy>:
 800a258:	b510      	push	{r4, lr}
 800a25a:	3901      	subs	r1, #1
 800a25c:	4603      	mov	r3, r0
 800a25e:	b132      	cbz	r2, 800a26e <strncpy+0x16>
 800a260:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a264:	f803 4b01 	strb.w	r4, [r3], #1
 800a268:	3a01      	subs	r2, #1
 800a26a:	2c00      	cmp	r4, #0
 800a26c:	d1f7      	bne.n	800a25e <strncpy+0x6>
 800a26e:	441a      	add	r2, r3
 800a270:	2100      	movs	r1, #0
 800a272:	4293      	cmp	r3, r2
 800a274:	d100      	bne.n	800a278 <strncpy+0x20>
 800a276:	bd10      	pop	{r4, pc}
 800a278:	f803 1b01 	strb.w	r1, [r3], #1
 800a27c:	e7f9      	b.n	800a272 <strncpy+0x1a>
	...

0800a280 <_close_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	4d06      	ldr	r5, [pc, #24]	@ (800a29c <_close_r+0x1c>)
 800a284:	2300      	movs	r3, #0
 800a286:	4604      	mov	r4, r0
 800a288:	4608      	mov	r0, r1
 800a28a:	602b      	str	r3, [r5, #0]
 800a28c:	f7f7 facf 	bl	800182e <_close>
 800a290:	1c43      	adds	r3, r0, #1
 800a292:	d102      	bne.n	800a29a <_close_r+0x1a>
 800a294:	682b      	ldr	r3, [r5, #0]
 800a296:	b103      	cbz	r3, 800a29a <_close_r+0x1a>
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	bd38      	pop	{r3, r4, r5, pc}
 800a29c:	200097dc 	.word	0x200097dc

0800a2a0 <_reclaim_reent>:
 800a2a0:	4b2d      	ldr	r3, [pc, #180]	@ (800a358 <_reclaim_reent+0xb8>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4283      	cmp	r3, r0
 800a2a6:	b570      	push	{r4, r5, r6, lr}
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	d053      	beq.n	800a354 <_reclaim_reent+0xb4>
 800a2ac:	69c3      	ldr	r3, [r0, #28]
 800a2ae:	b31b      	cbz	r3, 800a2f8 <_reclaim_reent+0x58>
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	b163      	cbz	r3, 800a2ce <_reclaim_reent+0x2e>
 800a2b4:	2500      	movs	r5, #0
 800a2b6:	69e3      	ldr	r3, [r4, #28]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	5959      	ldr	r1, [r3, r5]
 800a2bc:	b9b1      	cbnz	r1, 800a2ec <_reclaim_reent+0x4c>
 800a2be:	3504      	adds	r5, #4
 800a2c0:	2d80      	cmp	r5, #128	@ 0x80
 800a2c2:	d1f8      	bne.n	800a2b6 <_reclaim_reent+0x16>
 800a2c4:	69e3      	ldr	r3, [r4, #28]
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	68d9      	ldr	r1, [r3, #12]
 800a2ca:	f000 f8b9 	bl	800a440 <_free_r>
 800a2ce:	69e3      	ldr	r3, [r4, #28]
 800a2d0:	6819      	ldr	r1, [r3, #0]
 800a2d2:	b111      	cbz	r1, 800a2da <_reclaim_reent+0x3a>
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f000 f8b3 	bl	800a440 <_free_r>
 800a2da:	69e3      	ldr	r3, [r4, #28]
 800a2dc:	689d      	ldr	r5, [r3, #8]
 800a2de:	b15d      	cbz	r5, 800a2f8 <_reclaim_reent+0x58>
 800a2e0:	4629      	mov	r1, r5
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	682d      	ldr	r5, [r5, #0]
 800a2e6:	f000 f8ab 	bl	800a440 <_free_r>
 800a2ea:	e7f8      	b.n	800a2de <_reclaim_reent+0x3e>
 800a2ec:	680e      	ldr	r6, [r1, #0]
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f000 f8a6 	bl	800a440 <_free_r>
 800a2f4:	4631      	mov	r1, r6
 800a2f6:	e7e1      	b.n	800a2bc <_reclaim_reent+0x1c>
 800a2f8:	6961      	ldr	r1, [r4, #20]
 800a2fa:	b111      	cbz	r1, 800a302 <_reclaim_reent+0x62>
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f000 f89f 	bl	800a440 <_free_r>
 800a302:	69e1      	ldr	r1, [r4, #28]
 800a304:	b111      	cbz	r1, 800a30c <_reclaim_reent+0x6c>
 800a306:	4620      	mov	r0, r4
 800a308:	f000 f89a 	bl	800a440 <_free_r>
 800a30c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a30e:	b111      	cbz	r1, 800a316 <_reclaim_reent+0x76>
 800a310:	4620      	mov	r0, r4
 800a312:	f000 f895 	bl	800a440 <_free_r>
 800a316:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a318:	b111      	cbz	r1, 800a320 <_reclaim_reent+0x80>
 800a31a:	4620      	mov	r0, r4
 800a31c:	f000 f890 	bl	800a440 <_free_r>
 800a320:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a322:	b111      	cbz	r1, 800a32a <_reclaim_reent+0x8a>
 800a324:	4620      	mov	r0, r4
 800a326:	f000 f88b 	bl	800a440 <_free_r>
 800a32a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a32c:	b111      	cbz	r1, 800a334 <_reclaim_reent+0x94>
 800a32e:	4620      	mov	r0, r4
 800a330:	f000 f886 	bl	800a440 <_free_r>
 800a334:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a336:	b111      	cbz	r1, 800a33e <_reclaim_reent+0x9e>
 800a338:	4620      	mov	r0, r4
 800a33a:	f000 f881 	bl	800a440 <_free_r>
 800a33e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a340:	b111      	cbz	r1, 800a348 <_reclaim_reent+0xa8>
 800a342:	4620      	mov	r0, r4
 800a344:	f000 f87c 	bl	800a440 <_free_r>
 800a348:	6a23      	ldr	r3, [r4, #32]
 800a34a:	b11b      	cbz	r3, 800a354 <_reclaim_reent+0xb4>
 800a34c:	4620      	mov	r0, r4
 800a34e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a352:	4718      	bx	r3
 800a354:	bd70      	pop	{r4, r5, r6, pc}
 800a356:	bf00      	nop
 800a358:	2000001c 	.word	0x2000001c

0800a35c <_lseek_r>:
 800a35c:	b538      	push	{r3, r4, r5, lr}
 800a35e:	4d07      	ldr	r5, [pc, #28]	@ (800a37c <_lseek_r+0x20>)
 800a360:	4604      	mov	r4, r0
 800a362:	4608      	mov	r0, r1
 800a364:	4611      	mov	r1, r2
 800a366:	2200      	movs	r2, #0
 800a368:	602a      	str	r2, [r5, #0]
 800a36a:	461a      	mov	r2, r3
 800a36c:	f7f7 fa86 	bl	800187c <_lseek>
 800a370:	1c43      	adds	r3, r0, #1
 800a372:	d102      	bne.n	800a37a <_lseek_r+0x1e>
 800a374:	682b      	ldr	r3, [r5, #0]
 800a376:	b103      	cbz	r3, 800a37a <_lseek_r+0x1e>
 800a378:	6023      	str	r3, [r4, #0]
 800a37a:	bd38      	pop	{r3, r4, r5, pc}
 800a37c:	200097dc 	.word	0x200097dc

0800a380 <_read_r>:
 800a380:	b538      	push	{r3, r4, r5, lr}
 800a382:	4d07      	ldr	r5, [pc, #28]	@ (800a3a0 <_read_r+0x20>)
 800a384:	4604      	mov	r4, r0
 800a386:	4608      	mov	r0, r1
 800a388:	4611      	mov	r1, r2
 800a38a:	2200      	movs	r2, #0
 800a38c:	602a      	str	r2, [r5, #0]
 800a38e:	461a      	mov	r2, r3
 800a390:	f7f7 fa14 	bl	80017bc <_read>
 800a394:	1c43      	adds	r3, r0, #1
 800a396:	d102      	bne.n	800a39e <_read_r+0x1e>
 800a398:	682b      	ldr	r3, [r5, #0]
 800a39a:	b103      	cbz	r3, 800a39e <_read_r+0x1e>
 800a39c:	6023      	str	r3, [r4, #0]
 800a39e:	bd38      	pop	{r3, r4, r5, pc}
 800a3a0:	200097dc 	.word	0x200097dc

0800a3a4 <_write_r>:
 800a3a4:	b538      	push	{r3, r4, r5, lr}
 800a3a6:	4d07      	ldr	r5, [pc, #28]	@ (800a3c4 <_write_r+0x20>)
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	4608      	mov	r0, r1
 800a3ac:	4611      	mov	r1, r2
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	602a      	str	r2, [r5, #0]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	f7f7 fa1f 	bl	80017f6 <_write>
 800a3b8:	1c43      	adds	r3, r0, #1
 800a3ba:	d102      	bne.n	800a3c2 <_write_r+0x1e>
 800a3bc:	682b      	ldr	r3, [r5, #0]
 800a3be:	b103      	cbz	r3, 800a3c2 <_write_r+0x1e>
 800a3c0:	6023      	str	r3, [r4, #0]
 800a3c2:	bd38      	pop	{r3, r4, r5, pc}
 800a3c4:	200097dc 	.word	0x200097dc

0800a3c8 <__errno>:
 800a3c8:	4b01      	ldr	r3, [pc, #4]	@ (800a3d0 <__errno+0x8>)
 800a3ca:	6818      	ldr	r0, [r3, #0]
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	2000001c 	.word	0x2000001c

0800a3d4 <__libc_init_array>:
 800a3d4:	b570      	push	{r4, r5, r6, lr}
 800a3d6:	4d0d      	ldr	r5, [pc, #52]	@ (800a40c <__libc_init_array+0x38>)
 800a3d8:	4c0d      	ldr	r4, [pc, #52]	@ (800a410 <__libc_init_array+0x3c>)
 800a3da:	1b64      	subs	r4, r4, r5
 800a3dc:	10a4      	asrs	r4, r4, #2
 800a3de:	2600      	movs	r6, #0
 800a3e0:	42a6      	cmp	r6, r4
 800a3e2:	d109      	bne.n	800a3f8 <__libc_init_array+0x24>
 800a3e4:	4d0b      	ldr	r5, [pc, #44]	@ (800a414 <__libc_init_array+0x40>)
 800a3e6:	4c0c      	ldr	r4, [pc, #48]	@ (800a418 <__libc_init_array+0x44>)
 800a3e8:	f000 fed8 	bl	800b19c <_init>
 800a3ec:	1b64      	subs	r4, r4, r5
 800a3ee:	10a4      	asrs	r4, r4, #2
 800a3f0:	2600      	movs	r6, #0
 800a3f2:	42a6      	cmp	r6, r4
 800a3f4:	d105      	bne.n	800a402 <__libc_init_array+0x2e>
 800a3f6:	bd70      	pop	{r4, r5, r6, pc}
 800a3f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3fc:	4798      	blx	r3
 800a3fe:	3601      	adds	r6, #1
 800a400:	e7ee      	b.n	800a3e0 <__libc_init_array+0xc>
 800a402:	f855 3b04 	ldr.w	r3, [r5], #4
 800a406:	4798      	blx	r3
 800a408:	3601      	adds	r6, #1
 800a40a:	e7f2      	b.n	800a3f2 <__libc_init_array+0x1e>
 800a40c:	0800b550 	.word	0x0800b550
 800a410:	0800b550 	.word	0x0800b550
 800a414:	0800b550 	.word	0x0800b550
 800a418:	0800b558 	.word	0x0800b558

0800a41c <__retarget_lock_init_recursive>:
 800a41c:	4770      	bx	lr

0800a41e <__retarget_lock_acquire_recursive>:
 800a41e:	4770      	bx	lr

0800a420 <__retarget_lock_release_recursive>:
 800a420:	4770      	bx	lr

0800a422 <memcpy>:
 800a422:	440a      	add	r2, r1
 800a424:	4291      	cmp	r1, r2
 800a426:	f100 33ff 	add.w	r3, r0, #4294967295
 800a42a:	d100      	bne.n	800a42e <memcpy+0xc>
 800a42c:	4770      	bx	lr
 800a42e:	b510      	push	{r4, lr}
 800a430:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a434:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a438:	4291      	cmp	r1, r2
 800a43a:	d1f9      	bne.n	800a430 <memcpy+0xe>
 800a43c:	bd10      	pop	{r4, pc}
	...

0800a440 <_free_r>:
 800a440:	b538      	push	{r3, r4, r5, lr}
 800a442:	4605      	mov	r5, r0
 800a444:	2900      	cmp	r1, #0
 800a446:	d041      	beq.n	800a4cc <_free_r+0x8c>
 800a448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a44c:	1f0c      	subs	r4, r1, #4
 800a44e:	2b00      	cmp	r3, #0
 800a450:	bfb8      	it	lt
 800a452:	18e4      	addlt	r4, r4, r3
 800a454:	f000 f8e0 	bl	800a618 <__malloc_lock>
 800a458:	4a1d      	ldr	r2, [pc, #116]	@ (800a4d0 <_free_r+0x90>)
 800a45a:	6813      	ldr	r3, [r2, #0]
 800a45c:	b933      	cbnz	r3, 800a46c <_free_r+0x2c>
 800a45e:	6063      	str	r3, [r4, #4]
 800a460:	6014      	str	r4, [r2, #0]
 800a462:	4628      	mov	r0, r5
 800a464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a468:	f000 b8dc 	b.w	800a624 <__malloc_unlock>
 800a46c:	42a3      	cmp	r3, r4
 800a46e:	d908      	bls.n	800a482 <_free_r+0x42>
 800a470:	6820      	ldr	r0, [r4, #0]
 800a472:	1821      	adds	r1, r4, r0
 800a474:	428b      	cmp	r3, r1
 800a476:	bf01      	itttt	eq
 800a478:	6819      	ldreq	r1, [r3, #0]
 800a47a:	685b      	ldreq	r3, [r3, #4]
 800a47c:	1809      	addeq	r1, r1, r0
 800a47e:	6021      	streq	r1, [r4, #0]
 800a480:	e7ed      	b.n	800a45e <_free_r+0x1e>
 800a482:	461a      	mov	r2, r3
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	b10b      	cbz	r3, 800a48c <_free_r+0x4c>
 800a488:	42a3      	cmp	r3, r4
 800a48a:	d9fa      	bls.n	800a482 <_free_r+0x42>
 800a48c:	6811      	ldr	r1, [r2, #0]
 800a48e:	1850      	adds	r0, r2, r1
 800a490:	42a0      	cmp	r0, r4
 800a492:	d10b      	bne.n	800a4ac <_free_r+0x6c>
 800a494:	6820      	ldr	r0, [r4, #0]
 800a496:	4401      	add	r1, r0
 800a498:	1850      	adds	r0, r2, r1
 800a49a:	4283      	cmp	r3, r0
 800a49c:	6011      	str	r1, [r2, #0]
 800a49e:	d1e0      	bne.n	800a462 <_free_r+0x22>
 800a4a0:	6818      	ldr	r0, [r3, #0]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	6053      	str	r3, [r2, #4]
 800a4a6:	4408      	add	r0, r1
 800a4a8:	6010      	str	r0, [r2, #0]
 800a4aa:	e7da      	b.n	800a462 <_free_r+0x22>
 800a4ac:	d902      	bls.n	800a4b4 <_free_r+0x74>
 800a4ae:	230c      	movs	r3, #12
 800a4b0:	602b      	str	r3, [r5, #0]
 800a4b2:	e7d6      	b.n	800a462 <_free_r+0x22>
 800a4b4:	6820      	ldr	r0, [r4, #0]
 800a4b6:	1821      	adds	r1, r4, r0
 800a4b8:	428b      	cmp	r3, r1
 800a4ba:	bf04      	itt	eq
 800a4bc:	6819      	ldreq	r1, [r3, #0]
 800a4be:	685b      	ldreq	r3, [r3, #4]
 800a4c0:	6063      	str	r3, [r4, #4]
 800a4c2:	bf04      	itt	eq
 800a4c4:	1809      	addeq	r1, r1, r0
 800a4c6:	6021      	streq	r1, [r4, #0]
 800a4c8:	6054      	str	r4, [r2, #4]
 800a4ca:	e7ca      	b.n	800a462 <_free_r+0x22>
 800a4cc:	bd38      	pop	{r3, r4, r5, pc}
 800a4ce:	bf00      	nop
 800a4d0:	200097e8 	.word	0x200097e8

0800a4d4 <sbrk_aligned>:
 800a4d4:	b570      	push	{r4, r5, r6, lr}
 800a4d6:	4e0f      	ldr	r6, [pc, #60]	@ (800a514 <sbrk_aligned+0x40>)
 800a4d8:	460c      	mov	r4, r1
 800a4da:	6831      	ldr	r1, [r6, #0]
 800a4dc:	4605      	mov	r5, r0
 800a4de:	b911      	cbnz	r1, 800a4e6 <sbrk_aligned+0x12>
 800a4e0:	f000 fe16 	bl	800b110 <_sbrk_r>
 800a4e4:	6030      	str	r0, [r6, #0]
 800a4e6:	4621      	mov	r1, r4
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	f000 fe11 	bl	800b110 <_sbrk_r>
 800a4ee:	1c43      	adds	r3, r0, #1
 800a4f0:	d103      	bne.n	800a4fa <sbrk_aligned+0x26>
 800a4f2:	f04f 34ff 	mov.w	r4, #4294967295
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	bd70      	pop	{r4, r5, r6, pc}
 800a4fa:	1cc4      	adds	r4, r0, #3
 800a4fc:	f024 0403 	bic.w	r4, r4, #3
 800a500:	42a0      	cmp	r0, r4
 800a502:	d0f8      	beq.n	800a4f6 <sbrk_aligned+0x22>
 800a504:	1a21      	subs	r1, r4, r0
 800a506:	4628      	mov	r0, r5
 800a508:	f000 fe02 	bl	800b110 <_sbrk_r>
 800a50c:	3001      	adds	r0, #1
 800a50e:	d1f2      	bne.n	800a4f6 <sbrk_aligned+0x22>
 800a510:	e7ef      	b.n	800a4f2 <sbrk_aligned+0x1e>
 800a512:	bf00      	nop
 800a514:	200097e4 	.word	0x200097e4

0800a518 <_malloc_r>:
 800a518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a51c:	1ccd      	adds	r5, r1, #3
 800a51e:	f025 0503 	bic.w	r5, r5, #3
 800a522:	3508      	adds	r5, #8
 800a524:	2d0c      	cmp	r5, #12
 800a526:	bf38      	it	cc
 800a528:	250c      	movcc	r5, #12
 800a52a:	2d00      	cmp	r5, #0
 800a52c:	4606      	mov	r6, r0
 800a52e:	db01      	blt.n	800a534 <_malloc_r+0x1c>
 800a530:	42a9      	cmp	r1, r5
 800a532:	d904      	bls.n	800a53e <_malloc_r+0x26>
 800a534:	230c      	movs	r3, #12
 800a536:	6033      	str	r3, [r6, #0]
 800a538:	2000      	movs	r0, #0
 800a53a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a53e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a614 <_malloc_r+0xfc>
 800a542:	f000 f869 	bl	800a618 <__malloc_lock>
 800a546:	f8d8 3000 	ldr.w	r3, [r8]
 800a54a:	461c      	mov	r4, r3
 800a54c:	bb44      	cbnz	r4, 800a5a0 <_malloc_r+0x88>
 800a54e:	4629      	mov	r1, r5
 800a550:	4630      	mov	r0, r6
 800a552:	f7ff ffbf 	bl	800a4d4 <sbrk_aligned>
 800a556:	1c43      	adds	r3, r0, #1
 800a558:	4604      	mov	r4, r0
 800a55a:	d158      	bne.n	800a60e <_malloc_r+0xf6>
 800a55c:	f8d8 4000 	ldr.w	r4, [r8]
 800a560:	4627      	mov	r7, r4
 800a562:	2f00      	cmp	r7, #0
 800a564:	d143      	bne.n	800a5ee <_malloc_r+0xd6>
 800a566:	2c00      	cmp	r4, #0
 800a568:	d04b      	beq.n	800a602 <_malloc_r+0xea>
 800a56a:	6823      	ldr	r3, [r4, #0]
 800a56c:	4639      	mov	r1, r7
 800a56e:	4630      	mov	r0, r6
 800a570:	eb04 0903 	add.w	r9, r4, r3
 800a574:	f000 fdcc 	bl	800b110 <_sbrk_r>
 800a578:	4581      	cmp	r9, r0
 800a57a:	d142      	bne.n	800a602 <_malloc_r+0xea>
 800a57c:	6821      	ldr	r1, [r4, #0]
 800a57e:	1a6d      	subs	r5, r5, r1
 800a580:	4629      	mov	r1, r5
 800a582:	4630      	mov	r0, r6
 800a584:	f7ff ffa6 	bl	800a4d4 <sbrk_aligned>
 800a588:	3001      	adds	r0, #1
 800a58a:	d03a      	beq.n	800a602 <_malloc_r+0xea>
 800a58c:	6823      	ldr	r3, [r4, #0]
 800a58e:	442b      	add	r3, r5
 800a590:	6023      	str	r3, [r4, #0]
 800a592:	f8d8 3000 	ldr.w	r3, [r8]
 800a596:	685a      	ldr	r2, [r3, #4]
 800a598:	bb62      	cbnz	r2, 800a5f4 <_malloc_r+0xdc>
 800a59a:	f8c8 7000 	str.w	r7, [r8]
 800a59e:	e00f      	b.n	800a5c0 <_malloc_r+0xa8>
 800a5a0:	6822      	ldr	r2, [r4, #0]
 800a5a2:	1b52      	subs	r2, r2, r5
 800a5a4:	d420      	bmi.n	800a5e8 <_malloc_r+0xd0>
 800a5a6:	2a0b      	cmp	r2, #11
 800a5a8:	d917      	bls.n	800a5da <_malloc_r+0xc2>
 800a5aa:	1961      	adds	r1, r4, r5
 800a5ac:	42a3      	cmp	r3, r4
 800a5ae:	6025      	str	r5, [r4, #0]
 800a5b0:	bf18      	it	ne
 800a5b2:	6059      	strne	r1, [r3, #4]
 800a5b4:	6863      	ldr	r3, [r4, #4]
 800a5b6:	bf08      	it	eq
 800a5b8:	f8c8 1000 	streq.w	r1, [r8]
 800a5bc:	5162      	str	r2, [r4, r5]
 800a5be:	604b      	str	r3, [r1, #4]
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	f000 f82f 	bl	800a624 <__malloc_unlock>
 800a5c6:	f104 000b 	add.w	r0, r4, #11
 800a5ca:	1d23      	adds	r3, r4, #4
 800a5cc:	f020 0007 	bic.w	r0, r0, #7
 800a5d0:	1ac2      	subs	r2, r0, r3
 800a5d2:	bf1c      	itt	ne
 800a5d4:	1a1b      	subne	r3, r3, r0
 800a5d6:	50a3      	strne	r3, [r4, r2]
 800a5d8:	e7af      	b.n	800a53a <_malloc_r+0x22>
 800a5da:	6862      	ldr	r2, [r4, #4]
 800a5dc:	42a3      	cmp	r3, r4
 800a5de:	bf0c      	ite	eq
 800a5e0:	f8c8 2000 	streq.w	r2, [r8]
 800a5e4:	605a      	strne	r2, [r3, #4]
 800a5e6:	e7eb      	b.n	800a5c0 <_malloc_r+0xa8>
 800a5e8:	4623      	mov	r3, r4
 800a5ea:	6864      	ldr	r4, [r4, #4]
 800a5ec:	e7ae      	b.n	800a54c <_malloc_r+0x34>
 800a5ee:	463c      	mov	r4, r7
 800a5f0:	687f      	ldr	r7, [r7, #4]
 800a5f2:	e7b6      	b.n	800a562 <_malloc_r+0x4a>
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	42a3      	cmp	r3, r4
 800a5fa:	d1fb      	bne.n	800a5f4 <_malloc_r+0xdc>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	6053      	str	r3, [r2, #4]
 800a600:	e7de      	b.n	800a5c0 <_malloc_r+0xa8>
 800a602:	230c      	movs	r3, #12
 800a604:	6033      	str	r3, [r6, #0]
 800a606:	4630      	mov	r0, r6
 800a608:	f000 f80c 	bl	800a624 <__malloc_unlock>
 800a60c:	e794      	b.n	800a538 <_malloc_r+0x20>
 800a60e:	6005      	str	r5, [r0, #0]
 800a610:	e7d6      	b.n	800a5c0 <_malloc_r+0xa8>
 800a612:	bf00      	nop
 800a614:	200097e8 	.word	0x200097e8

0800a618 <__malloc_lock>:
 800a618:	4801      	ldr	r0, [pc, #4]	@ (800a620 <__malloc_lock+0x8>)
 800a61a:	f7ff bf00 	b.w	800a41e <__retarget_lock_acquire_recursive>
 800a61e:	bf00      	nop
 800a620:	200097e0 	.word	0x200097e0

0800a624 <__malloc_unlock>:
 800a624:	4801      	ldr	r0, [pc, #4]	@ (800a62c <__malloc_unlock+0x8>)
 800a626:	f7ff befb 	b.w	800a420 <__retarget_lock_release_recursive>
 800a62a:	bf00      	nop
 800a62c:	200097e0 	.word	0x200097e0

0800a630 <__ssputs_r>:
 800a630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a634:	688e      	ldr	r6, [r1, #8]
 800a636:	461f      	mov	r7, r3
 800a638:	42be      	cmp	r6, r7
 800a63a:	680b      	ldr	r3, [r1, #0]
 800a63c:	4682      	mov	sl, r0
 800a63e:	460c      	mov	r4, r1
 800a640:	4690      	mov	r8, r2
 800a642:	d82d      	bhi.n	800a6a0 <__ssputs_r+0x70>
 800a644:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a648:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a64c:	d026      	beq.n	800a69c <__ssputs_r+0x6c>
 800a64e:	6965      	ldr	r5, [r4, #20]
 800a650:	6909      	ldr	r1, [r1, #16]
 800a652:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a656:	eba3 0901 	sub.w	r9, r3, r1
 800a65a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a65e:	1c7b      	adds	r3, r7, #1
 800a660:	444b      	add	r3, r9
 800a662:	106d      	asrs	r5, r5, #1
 800a664:	429d      	cmp	r5, r3
 800a666:	bf38      	it	cc
 800a668:	461d      	movcc	r5, r3
 800a66a:	0553      	lsls	r3, r2, #21
 800a66c:	d527      	bpl.n	800a6be <__ssputs_r+0x8e>
 800a66e:	4629      	mov	r1, r5
 800a670:	f7ff ff52 	bl	800a518 <_malloc_r>
 800a674:	4606      	mov	r6, r0
 800a676:	b360      	cbz	r0, 800a6d2 <__ssputs_r+0xa2>
 800a678:	6921      	ldr	r1, [r4, #16]
 800a67a:	464a      	mov	r2, r9
 800a67c:	f7ff fed1 	bl	800a422 <memcpy>
 800a680:	89a3      	ldrh	r3, [r4, #12]
 800a682:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a68a:	81a3      	strh	r3, [r4, #12]
 800a68c:	6126      	str	r6, [r4, #16]
 800a68e:	6165      	str	r5, [r4, #20]
 800a690:	444e      	add	r6, r9
 800a692:	eba5 0509 	sub.w	r5, r5, r9
 800a696:	6026      	str	r6, [r4, #0]
 800a698:	60a5      	str	r5, [r4, #8]
 800a69a:	463e      	mov	r6, r7
 800a69c:	42be      	cmp	r6, r7
 800a69e:	d900      	bls.n	800a6a2 <__ssputs_r+0x72>
 800a6a0:	463e      	mov	r6, r7
 800a6a2:	6820      	ldr	r0, [r4, #0]
 800a6a4:	4632      	mov	r2, r6
 800a6a6:	4641      	mov	r1, r8
 800a6a8:	f000 fcf6 	bl	800b098 <memmove>
 800a6ac:	68a3      	ldr	r3, [r4, #8]
 800a6ae:	1b9b      	subs	r3, r3, r6
 800a6b0:	60a3      	str	r3, [r4, #8]
 800a6b2:	6823      	ldr	r3, [r4, #0]
 800a6b4:	4433      	add	r3, r6
 800a6b6:	6023      	str	r3, [r4, #0]
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6be:	462a      	mov	r2, r5
 800a6c0:	f000 fd36 	bl	800b130 <_realloc_r>
 800a6c4:	4606      	mov	r6, r0
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d1e0      	bne.n	800a68c <__ssputs_r+0x5c>
 800a6ca:	6921      	ldr	r1, [r4, #16]
 800a6cc:	4650      	mov	r0, sl
 800a6ce:	f7ff feb7 	bl	800a440 <_free_r>
 800a6d2:	230c      	movs	r3, #12
 800a6d4:	f8ca 3000 	str.w	r3, [sl]
 800a6d8:	89a3      	ldrh	r3, [r4, #12]
 800a6da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6de:	81a3      	strh	r3, [r4, #12]
 800a6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e4:	e7e9      	b.n	800a6ba <__ssputs_r+0x8a>
	...

0800a6e8 <_svfiprintf_r>:
 800a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	4698      	mov	r8, r3
 800a6ee:	898b      	ldrh	r3, [r1, #12]
 800a6f0:	061b      	lsls	r3, r3, #24
 800a6f2:	b09d      	sub	sp, #116	@ 0x74
 800a6f4:	4607      	mov	r7, r0
 800a6f6:	460d      	mov	r5, r1
 800a6f8:	4614      	mov	r4, r2
 800a6fa:	d510      	bpl.n	800a71e <_svfiprintf_r+0x36>
 800a6fc:	690b      	ldr	r3, [r1, #16]
 800a6fe:	b973      	cbnz	r3, 800a71e <_svfiprintf_r+0x36>
 800a700:	2140      	movs	r1, #64	@ 0x40
 800a702:	f7ff ff09 	bl	800a518 <_malloc_r>
 800a706:	6028      	str	r0, [r5, #0]
 800a708:	6128      	str	r0, [r5, #16]
 800a70a:	b930      	cbnz	r0, 800a71a <_svfiprintf_r+0x32>
 800a70c:	230c      	movs	r3, #12
 800a70e:	603b      	str	r3, [r7, #0]
 800a710:	f04f 30ff 	mov.w	r0, #4294967295
 800a714:	b01d      	add	sp, #116	@ 0x74
 800a716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a71a:	2340      	movs	r3, #64	@ 0x40
 800a71c:	616b      	str	r3, [r5, #20]
 800a71e:	2300      	movs	r3, #0
 800a720:	9309      	str	r3, [sp, #36]	@ 0x24
 800a722:	2320      	movs	r3, #32
 800a724:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a728:	f8cd 800c 	str.w	r8, [sp, #12]
 800a72c:	2330      	movs	r3, #48	@ 0x30
 800a72e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a8cc <_svfiprintf_r+0x1e4>
 800a732:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a736:	f04f 0901 	mov.w	r9, #1
 800a73a:	4623      	mov	r3, r4
 800a73c:	469a      	mov	sl, r3
 800a73e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a742:	b10a      	cbz	r2, 800a748 <_svfiprintf_r+0x60>
 800a744:	2a25      	cmp	r2, #37	@ 0x25
 800a746:	d1f9      	bne.n	800a73c <_svfiprintf_r+0x54>
 800a748:	ebba 0b04 	subs.w	fp, sl, r4
 800a74c:	d00b      	beq.n	800a766 <_svfiprintf_r+0x7e>
 800a74e:	465b      	mov	r3, fp
 800a750:	4622      	mov	r2, r4
 800a752:	4629      	mov	r1, r5
 800a754:	4638      	mov	r0, r7
 800a756:	f7ff ff6b 	bl	800a630 <__ssputs_r>
 800a75a:	3001      	adds	r0, #1
 800a75c:	f000 80a7 	beq.w	800a8ae <_svfiprintf_r+0x1c6>
 800a760:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a762:	445a      	add	r2, fp
 800a764:	9209      	str	r2, [sp, #36]	@ 0x24
 800a766:	f89a 3000 	ldrb.w	r3, [sl]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f000 809f 	beq.w	800a8ae <_svfiprintf_r+0x1c6>
 800a770:	2300      	movs	r3, #0
 800a772:	f04f 32ff 	mov.w	r2, #4294967295
 800a776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a77a:	f10a 0a01 	add.w	sl, sl, #1
 800a77e:	9304      	str	r3, [sp, #16]
 800a780:	9307      	str	r3, [sp, #28]
 800a782:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a786:	931a      	str	r3, [sp, #104]	@ 0x68
 800a788:	4654      	mov	r4, sl
 800a78a:	2205      	movs	r2, #5
 800a78c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a790:	484e      	ldr	r0, [pc, #312]	@ (800a8cc <_svfiprintf_r+0x1e4>)
 800a792:	f7f5 fd25 	bl	80001e0 <memchr>
 800a796:	9a04      	ldr	r2, [sp, #16]
 800a798:	b9d8      	cbnz	r0, 800a7d2 <_svfiprintf_r+0xea>
 800a79a:	06d0      	lsls	r0, r2, #27
 800a79c:	bf44      	itt	mi
 800a79e:	2320      	movmi	r3, #32
 800a7a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7a4:	0711      	lsls	r1, r2, #28
 800a7a6:	bf44      	itt	mi
 800a7a8:	232b      	movmi	r3, #43	@ 0x2b
 800a7aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a7b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7b4:	d015      	beq.n	800a7e2 <_svfiprintf_r+0xfa>
 800a7b6:	9a07      	ldr	r2, [sp, #28]
 800a7b8:	4654      	mov	r4, sl
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	f04f 0c0a 	mov.w	ip, #10
 800a7c0:	4621      	mov	r1, r4
 800a7c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7c6:	3b30      	subs	r3, #48	@ 0x30
 800a7c8:	2b09      	cmp	r3, #9
 800a7ca:	d94b      	bls.n	800a864 <_svfiprintf_r+0x17c>
 800a7cc:	b1b0      	cbz	r0, 800a7fc <_svfiprintf_r+0x114>
 800a7ce:	9207      	str	r2, [sp, #28]
 800a7d0:	e014      	b.n	800a7fc <_svfiprintf_r+0x114>
 800a7d2:	eba0 0308 	sub.w	r3, r0, r8
 800a7d6:	fa09 f303 	lsl.w	r3, r9, r3
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	9304      	str	r3, [sp, #16]
 800a7de:	46a2      	mov	sl, r4
 800a7e0:	e7d2      	b.n	800a788 <_svfiprintf_r+0xa0>
 800a7e2:	9b03      	ldr	r3, [sp, #12]
 800a7e4:	1d19      	adds	r1, r3, #4
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	9103      	str	r1, [sp, #12]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	bfbb      	ittet	lt
 800a7ee:	425b      	neglt	r3, r3
 800a7f0:	f042 0202 	orrlt.w	r2, r2, #2
 800a7f4:	9307      	strge	r3, [sp, #28]
 800a7f6:	9307      	strlt	r3, [sp, #28]
 800a7f8:	bfb8      	it	lt
 800a7fa:	9204      	strlt	r2, [sp, #16]
 800a7fc:	7823      	ldrb	r3, [r4, #0]
 800a7fe:	2b2e      	cmp	r3, #46	@ 0x2e
 800a800:	d10a      	bne.n	800a818 <_svfiprintf_r+0x130>
 800a802:	7863      	ldrb	r3, [r4, #1]
 800a804:	2b2a      	cmp	r3, #42	@ 0x2a
 800a806:	d132      	bne.n	800a86e <_svfiprintf_r+0x186>
 800a808:	9b03      	ldr	r3, [sp, #12]
 800a80a:	1d1a      	adds	r2, r3, #4
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	9203      	str	r2, [sp, #12]
 800a810:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a814:	3402      	adds	r4, #2
 800a816:	9305      	str	r3, [sp, #20]
 800a818:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a8dc <_svfiprintf_r+0x1f4>
 800a81c:	7821      	ldrb	r1, [r4, #0]
 800a81e:	2203      	movs	r2, #3
 800a820:	4650      	mov	r0, sl
 800a822:	f7f5 fcdd 	bl	80001e0 <memchr>
 800a826:	b138      	cbz	r0, 800a838 <_svfiprintf_r+0x150>
 800a828:	9b04      	ldr	r3, [sp, #16]
 800a82a:	eba0 000a 	sub.w	r0, r0, sl
 800a82e:	2240      	movs	r2, #64	@ 0x40
 800a830:	4082      	lsls	r2, r0
 800a832:	4313      	orrs	r3, r2
 800a834:	3401      	adds	r4, #1
 800a836:	9304      	str	r3, [sp, #16]
 800a838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a83c:	4824      	ldr	r0, [pc, #144]	@ (800a8d0 <_svfiprintf_r+0x1e8>)
 800a83e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a842:	2206      	movs	r2, #6
 800a844:	f7f5 fccc 	bl	80001e0 <memchr>
 800a848:	2800      	cmp	r0, #0
 800a84a:	d036      	beq.n	800a8ba <_svfiprintf_r+0x1d2>
 800a84c:	4b21      	ldr	r3, [pc, #132]	@ (800a8d4 <_svfiprintf_r+0x1ec>)
 800a84e:	bb1b      	cbnz	r3, 800a898 <_svfiprintf_r+0x1b0>
 800a850:	9b03      	ldr	r3, [sp, #12]
 800a852:	3307      	adds	r3, #7
 800a854:	f023 0307 	bic.w	r3, r3, #7
 800a858:	3308      	adds	r3, #8
 800a85a:	9303      	str	r3, [sp, #12]
 800a85c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a85e:	4433      	add	r3, r6
 800a860:	9309      	str	r3, [sp, #36]	@ 0x24
 800a862:	e76a      	b.n	800a73a <_svfiprintf_r+0x52>
 800a864:	fb0c 3202 	mla	r2, ip, r2, r3
 800a868:	460c      	mov	r4, r1
 800a86a:	2001      	movs	r0, #1
 800a86c:	e7a8      	b.n	800a7c0 <_svfiprintf_r+0xd8>
 800a86e:	2300      	movs	r3, #0
 800a870:	3401      	adds	r4, #1
 800a872:	9305      	str	r3, [sp, #20]
 800a874:	4619      	mov	r1, r3
 800a876:	f04f 0c0a 	mov.w	ip, #10
 800a87a:	4620      	mov	r0, r4
 800a87c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a880:	3a30      	subs	r2, #48	@ 0x30
 800a882:	2a09      	cmp	r2, #9
 800a884:	d903      	bls.n	800a88e <_svfiprintf_r+0x1a6>
 800a886:	2b00      	cmp	r3, #0
 800a888:	d0c6      	beq.n	800a818 <_svfiprintf_r+0x130>
 800a88a:	9105      	str	r1, [sp, #20]
 800a88c:	e7c4      	b.n	800a818 <_svfiprintf_r+0x130>
 800a88e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a892:	4604      	mov	r4, r0
 800a894:	2301      	movs	r3, #1
 800a896:	e7f0      	b.n	800a87a <_svfiprintf_r+0x192>
 800a898:	ab03      	add	r3, sp, #12
 800a89a:	9300      	str	r3, [sp, #0]
 800a89c:	462a      	mov	r2, r5
 800a89e:	4b0e      	ldr	r3, [pc, #56]	@ (800a8d8 <_svfiprintf_r+0x1f0>)
 800a8a0:	a904      	add	r1, sp, #16
 800a8a2:	4638      	mov	r0, r7
 800a8a4:	f3af 8000 	nop.w
 800a8a8:	1c42      	adds	r2, r0, #1
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	d1d6      	bne.n	800a85c <_svfiprintf_r+0x174>
 800a8ae:	89ab      	ldrh	r3, [r5, #12]
 800a8b0:	065b      	lsls	r3, r3, #25
 800a8b2:	f53f af2d 	bmi.w	800a710 <_svfiprintf_r+0x28>
 800a8b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8b8:	e72c      	b.n	800a714 <_svfiprintf_r+0x2c>
 800a8ba:	ab03      	add	r3, sp, #12
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	462a      	mov	r2, r5
 800a8c0:	4b05      	ldr	r3, [pc, #20]	@ (800a8d8 <_svfiprintf_r+0x1f0>)
 800a8c2:	a904      	add	r1, sp, #16
 800a8c4:	4638      	mov	r0, r7
 800a8c6:	f000 f9bb 	bl	800ac40 <_printf_i>
 800a8ca:	e7ed      	b.n	800a8a8 <_svfiprintf_r+0x1c0>
 800a8cc:	0800b514 	.word	0x0800b514
 800a8d0:	0800b51e 	.word	0x0800b51e
 800a8d4:	00000000 	.word	0x00000000
 800a8d8:	0800a631 	.word	0x0800a631
 800a8dc:	0800b51a 	.word	0x0800b51a

0800a8e0 <__sfputc_r>:
 800a8e0:	6893      	ldr	r3, [r2, #8]
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	b410      	push	{r4}
 800a8e8:	6093      	str	r3, [r2, #8]
 800a8ea:	da08      	bge.n	800a8fe <__sfputc_r+0x1e>
 800a8ec:	6994      	ldr	r4, [r2, #24]
 800a8ee:	42a3      	cmp	r3, r4
 800a8f0:	db01      	blt.n	800a8f6 <__sfputc_r+0x16>
 800a8f2:	290a      	cmp	r1, #10
 800a8f4:	d103      	bne.n	800a8fe <__sfputc_r+0x1e>
 800a8f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8fa:	f7ff bc10 	b.w	800a11e <__swbuf_r>
 800a8fe:	6813      	ldr	r3, [r2, #0]
 800a900:	1c58      	adds	r0, r3, #1
 800a902:	6010      	str	r0, [r2, #0]
 800a904:	7019      	strb	r1, [r3, #0]
 800a906:	4608      	mov	r0, r1
 800a908:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <__sfputs_r>:
 800a90e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a910:	4606      	mov	r6, r0
 800a912:	460f      	mov	r7, r1
 800a914:	4614      	mov	r4, r2
 800a916:	18d5      	adds	r5, r2, r3
 800a918:	42ac      	cmp	r4, r5
 800a91a:	d101      	bne.n	800a920 <__sfputs_r+0x12>
 800a91c:	2000      	movs	r0, #0
 800a91e:	e007      	b.n	800a930 <__sfputs_r+0x22>
 800a920:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a924:	463a      	mov	r2, r7
 800a926:	4630      	mov	r0, r6
 800a928:	f7ff ffda 	bl	800a8e0 <__sfputc_r>
 800a92c:	1c43      	adds	r3, r0, #1
 800a92e:	d1f3      	bne.n	800a918 <__sfputs_r+0xa>
 800a930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a934 <_vfiprintf_r>:
 800a934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a938:	460d      	mov	r5, r1
 800a93a:	b09d      	sub	sp, #116	@ 0x74
 800a93c:	4614      	mov	r4, r2
 800a93e:	4698      	mov	r8, r3
 800a940:	4606      	mov	r6, r0
 800a942:	b118      	cbz	r0, 800a94c <_vfiprintf_r+0x18>
 800a944:	6a03      	ldr	r3, [r0, #32]
 800a946:	b90b      	cbnz	r3, 800a94c <_vfiprintf_r+0x18>
 800a948:	f7ff faca 	bl	8009ee0 <__sinit>
 800a94c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a94e:	07d9      	lsls	r1, r3, #31
 800a950:	d405      	bmi.n	800a95e <_vfiprintf_r+0x2a>
 800a952:	89ab      	ldrh	r3, [r5, #12]
 800a954:	059a      	lsls	r2, r3, #22
 800a956:	d402      	bmi.n	800a95e <_vfiprintf_r+0x2a>
 800a958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a95a:	f7ff fd60 	bl	800a41e <__retarget_lock_acquire_recursive>
 800a95e:	89ab      	ldrh	r3, [r5, #12]
 800a960:	071b      	lsls	r3, r3, #28
 800a962:	d501      	bpl.n	800a968 <_vfiprintf_r+0x34>
 800a964:	692b      	ldr	r3, [r5, #16]
 800a966:	b99b      	cbnz	r3, 800a990 <_vfiprintf_r+0x5c>
 800a968:	4629      	mov	r1, r5
 800a96a:	4630      	mov	r0, r6
 800a96c:	f7ff fc16 	bl	800a19c <__swsetup_r>
 800a970:	b170      	cbz	r0, 800a990 <_vfiprintf_r+0x5c>
 800a972:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a974:	07dc      	lsls	r4, r3, #31
 800a976:	d504      	bpl.n	800a982 <_vfiprintf_r+0x4e>
 800a978:	f04f 30ff 	mov.w	r0, #4294967295
 800a97c:	b01d      	add	sp, #116	@ 0x74
 800a97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a982:	89ab      	ldrh	r3, [r5, #12]
 800a984:	0598      	lsls	r0, r3, #22
 800a986:	d4f7      	bmi.n	800a978 <_vfiprintf_r+0x44>
 800a988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a98a:	f7ff fd49 	bl	800a420 <__retarget_lock_release_recursive>
 800a98e:	e7f3      	b.n	800a978 <_vfiprintf_r+0x44>
 800a990:	2300      	movs	r3, #0
 800a992:	9309      	str	r3, [sp, #36]	@ 0x24
 800a994:	2320      	movs	r3, #32
 800a996:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a99a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a99e:	2330      	movs	r3, #48	@ 0x30
 800a9a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ab50 <_vfiprintf_r+0x21c>
 800a9a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9a8:	f04f 0901 	mov.w	r9, #1
 800a9ac:	4623      	mov	r3, r4
 800a9ae:	469a      	mov	sl, r3
 800a9b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9b4:	b10a      	cbz	r2, 800a9ba <_vfiprintf_r+0x86>
 800a9b6:	2a25      	cmp	r2, #37	@ 0x25
 800a9b8:	d1f9      	bne.n	800a9ae <_vfiprintf_r+0x7a>
 800a9ba:	ebba 0b04 	subs.w	fp, sl, r4
 800a9be:	d00b      	beq.n	800a9d8 <_vfiprintf_r+0xa4>
 800a9c0:	465b      	mov	r3, fp
 800a9c2:	4622      	mov	r2, r4
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	f7ff ffa1 	bl	800a90e <__sfputs_r>
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	f000 80a7 	beq.w	800ab20 <_vfiprintf_r+0x1ec>
 800a9d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9d4:	445a      	add	r2, fp
 800a9d6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	f000 809f 	beq.w	800ab20 <_vfiprintf_r+0x1ec>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9ec:	f10a 0a01 	add.w	sl, sl, #1
 800a9f0:	9304      	str	r3, [sp, #16]
 800a9f2:	9307      	str	r3, [sp, #28]
 800a9f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9f8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9fa:	4654      	mov	r4, sl
 800a9fc:	2205      	movs	r2, #5
 800a9fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa02:	4853      	ldr	r0, [pc, #332]	@ (800ab50 <_vfiprintf_r+0x21c>)
 800aa04:	f7f5 fbec 	bl	80001e0 <memchr>
 800aa08:	9a04      	ldr	r2, [sp, #16]
 800aa0a:	b9d8      	cbnz	r0, 800aa44 <_vfiprintf_r+0x110>
 800aa0c:	06d1      	lsls	r1, r2, #27
 800aa0e:	bf44      	itt	mi
 800aa10:	2320      	movmi	r3, #32
 800aa12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa16:	0713      	lsls	r3, r2, #28
 800aa18:	bf44      	itt	mi
 800aa1a:	232b      	movmi	r3, #43	@ 0x2b
 800aa1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa20:	f89a 3000 	ldrb.w	r3, [sl]
 800aa24:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa26:	d015      	beq.n	800aa54 <_vfiprintf_r+0x120>
 800aa28:	9a07      	ldr	r2, [sp, #28]
 800aa2a:	4654      	mov	r4, sl
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	f04f 0c0a 	mov.w	ip, #10
 800aa32:	4621      	mov	r1, r4
 800aa34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa38:	3b30      	subs	r3, #48	@ 0x30
 800aa3a:	2b09      	cmp	r3, #9
 800aa3c:	d94b      	bls.n	800aad6 <_vfiprintf_r+0x1a2>
 800aa3e:	b1b0      	cbz	r0, 800aa6e <_vfiprintf_r+0x13a>
 800aa40:	9207      	str	r2, [sp, #28]
 800aa42:	e014      	b.n	800aa6e <_vfiprintf_r+0x13a>
 800aa44:	eba0 0308 	sub.w	r3, r0, r8
 800aa48:	fa09 f303 	lsl.w	r3, r9, r3
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	9304      	str	r3, [sp, #16]
 800aa50:	46a2      	mov	sl, r4
 800aa52:	e7d2      	b.n	800a9fa <_vfiprintf_r+0xc6>
 800aa54:	9b03      	ldr	r3, [sp, #12]
 800aa56:	1d19      	adds	r1, r3, #4
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	9103      	str	r1, [sp, #12]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	bfbb      	ittet	lt
 800aa60:	425b      	neglt	r3, r3
 800aa62:	f042 0202 	orrlt.w	r2, r2, #2
 800aa66:	9307      	strge	r3, [sp, #28]
 800aa68:	9307      	strlt	r3, [sp, #28]
 800aa6a:	bfb8      	it	lt
 800aa6c:	9204      	strlt	r2, [sp, #16]
 800aa6e:	7823      	ldrb	r3, [r4, #0]
 800aa70:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa72:	d10a      	bne.n	800aa8a <_vfiprintf_r+0x156>
 800aa74:	7863      	ldrb	r3, [r4, #1]
 800aa76:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa78:	d132      	bne.n	800aae0 <_vfiprintf_r+0x1ac>
 800aa7a:	9b03      	ldr	r3, [sp, #12]
 800aa7c:	1d1a      	adds	r2, r3, #4
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	9203      	str	r2, [sp, #12]
 800aa82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa86:	3402      	adds	r4, #2
 800aa88:	9305      	str	r3, [sp, #20]
 800aa8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ab60 <_vfiprintf_r+0x22c>
 800aa8e:	7821      	ldrb	r1, [r4, #0]
 800aa90:	2203      	movs	r2, #3
 800aa92:	4650      	mov	r0, sl
 800aa94:	f7f5 fba4 	bl	80001e0 <memchr>
 800aa98:	b138      	cbz	r0, 800aaaa <_vfiprintf_r+0x176>
 800aa9a:	9b04      	ldr	r3, [sp, #16]
 800aa9c:	eba0 000a 	sub.w	r0, r0, sl
 800aaa0:	2240      	movs	r2, #64	@ 0x40
 800aaa2:	4082      	lsls	r2, r0
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	3401      	adds	r4, #1
 800aaa8:	9304      	str	r3, [sp, #16]
 800aaaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaae:	4829      	ldr	r0, [pc, #164]	@ (800ab54 <_vfiprintf_r+0x220>)
 800aab0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aab4:	2206      	movs	r2, #6
 800aab6:	f7f5 fb93 	bl	80001e0 <memchr>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	d03f      	beq.n	800ab3e <_vfiprintf_r+0x20a>
 800aabe:	4b26      	ldr	r3, [pc, #152]	@ (800ab58 <_vfiprintf_r+0x224>)
 800aac0:	bb1b      	cbnz	r3, 800ab0a <_vfiprintf_r+0x1d6>
 800aac2:	9b03      	ldr	r3, [sp, #12]
 800aac4:	3307      	adds	r3, #7
 800aac6:	f023 0307 	bic.w	r3, r3, #7
 800aaca:	3308      	adds	r3, #8
 800aacc:	9303      	str	r3, [sp, #12]
 800aace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aad0:	443b      	add	r3, r7
 800aad2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aad4:	e76a      	b.n	800a9ac <_vfiprintf_r+0x78>
 800aad6:	fb0c 3202 	mla	r2, ip, r2, r3
 800aada:	460c      	mov	r4, r1
 800aadc:	2001      	movs	r0, #1
 800aade:	e7a8      	b.n	800aa32 <_vfiprintf_r+0xfe>
 800aae0:	2300      	movs	r3, #0
 800aae2:	3401      	adds	r4, #1
 800aae4:	9305      	str	r3, [sp, #20]
 800aae6:	4619      	mov	r1, r3
 800aae8:	f04f 0c0a 	mov.w	ip, #10
 800aaec:	4620      	mov	r0, r4
 800aaee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaf2:	3a30      	subs	r2, #48	@ 0x30
 800aaf4:	2a09      	cmp	r2, #9
 800aaf6:	d903      	bls.n	800ab00 <_vfiprintf_r+0x1cc>
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d0c6      	beq.n	800aa8a <_vfiprintf_r+0x156>
 800aafc:	9105      	str	r1, [sp, #20]
 800aafe:	e7c4      	b.n	800aa8a <_vfiprintf_r+0x156>
 800ab00:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab04:	4604      	mov	r4, r0
 800ab06:	2301      	movs	r3, #1
 800ab08:	e7f0      	b.n	800aaec <_vfiprintf_r+0x1b8>
 800ab0a:	ab03      	add	r3, sp, #12
 800ab0c:	9300      	str	r3, [sp, #0]
 800ab0e:	462a      	mov	r2, r5
 800ab10:	4b12      	ldr	r3, [pc, #72]	@ (800ab5c <_vfiprintf_r+0x228>)
 800ab12:	a904      	add	r1, sp, #16
 800ab14:	4630      	mov	r0, r6
 800ab16:	f3af 8000 	nop.w
 800ab1a:	4607      	mov	r7, r0
 800ab1c:	1c78      	adds	r0, r7, #1
 800ab1e:	d1d6      	bne.n	800aace <_vfiprintf_r+0x19a>
 800ab20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab22:	07d9      	lsls	r1, r3, #31
 800ab24:	d405      	bmi.n	800ab32 <_vfiprintf_r+0x1fe>
 800ab26:	89ab      	ldrh	r3, [r5, #12]
 800ab28:	059a      	lsls	r2, r3, #22
 800ab2a:	d402      	bmi.n	800ab32 <_vfiprintf_r+0x1fe>
 800ab2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab2e:	f7ff fc77 	bl	800a420 <__retarget_lock_release_recursive>
 800ab32:	89ab      	ldrh	r3, [r5, #12]
 800ab34:	065b      	lsls	r3, r3, #25
 800ab36:	f53f af1f 	bmi.w	800a978 <_vfiprintf_r+0x44>
 800ab3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab3c:	e71e      	b.n	800a97c <_vfiprintf_r+0x48>
 800ab3e:	ab03      	add	r3, sp, #12
 800ab40:	9300      	str	r3, [sp, #0]
 800ab42:	462a      	mov	r2, r5
 800ab44:	4b05      	ldr	r3, [pc, #20]	@ (800ab5c <_vfiprintf_r+0x228>)
 800ab46:	a904      	add	r1, sp, #16
 800ab48:	4630      	mov	r0, r6
 800ab4a:	f000 f879 	bl	800ac40 <_printf_i>
 800ab4e:	e7e4      	b.n	800ab1a <_vfiprintf_r+0x1e6>
 800ab50:	0800b514 	.word	0x0800b514
 800ab54:	0800b51e 	.word	0x0800b51e
 800ab58:	00000000 	.word	0x00000000
 800ab5c:	0800a90f 	.word	0x0800a90f
 800ab60:	0800b51a 	.word	0x0800b51a

0800ab64 <_printf_common>:
 800ab64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab68:	4616      	mov	r6, r2
 800ab6a:	4698      	mov	r8, r3
 800ab6c:	688a      	ldr	r2, [r1, #8]
 800ab6e:	690b      	ldr	r3, [r1, #16]
 800ab70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab74:	4293      	cmp	r3, r2
 800ab76:	bfb8      	it	lt
 800ab78:	4613      	movlt	r3, r2
 800ab7a:	6033      	str	r3, [r6, #0]
 800ab7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab80:	4607      	mov	r7, r0
 800ab82:	460c      	mov	r4, r1
 800ab84:	b10a      	cbz	r2, 800ab8a <_printf_common+0x26>
 800ab86:	3301      	adds	r3, #1
 800ab88:	6033      	str	r3, [r6, #0]
 800ab8a:	6823      	ldr	r3, [r4, #0]
 800ab8c:	0699      	lsls	r1, r3, #26
 800ab8e:	bf42      	ittt	mi
 800ab90:	6833      	ldrmi	r3, [r6, #0]
 800ab92:	3302      	addmi	r3, #2
 800ab94:	6033      	strmi	r3, [r6, #0]
 800ab96:	6825      	ldr	r5, [r4, #0]
 800ab98:	f015 0506 	ands.w	r5, r5, #6
 800ab9c:	d106      	bne.n	800abac <_printf_common+0x48>
 800ab9e:	f104 0a19 	add.w	sl, r4, #25
 800aba2:	68e3      	ldr	r3, [r4, #12]
 800aba4:	6832      	ldr	r2, [r6, #0]
 800aba6:	1a9b      	subs	r3, r3, r2
 800aba8:	42ab      	cmp	r3, r5
 800abaa:	dc26      	bgt.n	800abfa <_printf_common+0x96>
 800abac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800abb0:	6822      	ldr	r2, [r4, #0]
 800abb2:	3b00      	subs	r3, #0
 800abb4:	bf18      	it	ne
 800abb6:	2301      	movne	r3, #1
 800abb8:	0692      	lsls	r2, r2, #26
 800abba:	d42b      	bmi.n	800ac14 <_printf_common+0xb0>
 800abbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800abc0:	4641      	mov	r1, r8
 800abc2:	4638      	mov	r0, r7
 800abc4:	47c8      	blx	r9
 800abc6:	3001      	adds	r0, #1
 800abc8:	d01e      	beq.n	800ac08 <_printf_common+0xa4>
 800abca:	6823      	ldr	r3, [r4, #0]
 800abcc:	6922      	ldr	r2, [r4, #16]
 800abce:	f003 0306 	and.w	r3, r3, #6
 800abd2:	2b04      	cmp	r3, #4
 800abd4:	bf02      	ittt	eq
 800abd6:	68e5      	ldreq	r5, [r4, #12]
 800abd8:	6833      	ldreq	r3, [r6, #0]
 800abda:	1aed      	subeq	r5, r5, r3
 800abdc:	68a3      	ldr	r3, [r4, #8]
 800abde:	bf0c      	ite	eq
 800abe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abe4:	2500      	movne	r5, #0
 800abe6:	4293      	cmp	r3, r2
 800abe8:	bfc4      	itt	gt
 800abea:	1a9b      	subgt	r3, r3, r2
 800abec:	18ed      	addgt	r5, r5, r3
 800abee:	2600      	movs	r6, #0
 800abf0:	341a      	adds	r4, #26
 800abf2:	42b5      	cmp	r5, r6
 800abf4:	d11a      	bne.n	800ac2c <_printf_common+0xc8>
 800abf6:	2000      	movs	r0, #0
 800abf8:	e008      	b.n	800ac0c <_printf_common+0xa8>
 800abfa:	2301      	movs	r3, #1
 800abfc:	4652      	mov	r2, sl
 800abfe:	4641      	mov	r1, r8
 800ac00:	4638      	mov	r0, r7
 800ac02:	47c8      	blx	r9
 800ac04:	3001      	adds	r0, #1
 800ac06:	d103      	bne.n	800ac10 <_printf_common+0xac>
 800ac08:	f04f 30ff 	mov.w	r0, #4294967295
 800ac0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac10:	3501      	adds	r5, #1
 800ac12:	e7c6      	b.n	800aba2 <_printf_common+0x3e>
 800ac14:	18e1      	adds	r1, r4, r3
 800ac16:	1c5a      	adds	r2, r3, #1
 800ac18:	2030      	movs	r0, #48	@ 0x30
 800ac1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac1e:	4422      	add	r2, r4
 800ac20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac28:	3302      	adds	r3, #2
 800ac2a:	e7c7      	b.n	800abbc <_printf_common+0x58>
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	4622      	mov	r2, r4
 800ac30:	4641      	mov	r1, r8
 800ac32:	4638      	mov	r0, r7
 800ac34:	47c8      	blx	r9
 800ac36:	3001      	adds	r0, #1
 800ac38:	d0e6      	beq.n	800ac08 <_printf_common+0xa4>
 800ac3a:	3601      	adds	r6, #1
 800ac3c:	e7d9      	b.n	800abf2 <_printf_common+0x8e>
	...

0800ac40 <_printf_i>:
 800ac40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac44:	7e0f      	ldrb	r7, [r1, #24]
 800ac46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac48:	2f78      	cmp	r7, #120	@ 0x78
 800ac4a:	4691      	mov	r9, r2
 800ac4c:	4680      	mov	r8, r0
 800ac4e:	460c      	mov	r4, r1
 800ac50:	469a      	mov	sl, r3
 800ac52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac56:	d807      	bhi.n	800ac68 <_printf_i+0x28>
 800ac58:	2f62      	cmp	r7, #98	@ 0x62
 800ac5a:	d80a      	bhi.n	800ac72 <_printf_i+0x32>
 800ac5c:	2f00      	cmp	r7, #0
 800ac5e:	f000 80d1 	beq.w	800ae04 <_printf_i+0x1c4>
 800ac62:	2f58      	cmp	r7, #88	@ 0x58
 800ac64:	f000 80b8 	beq.w	800add8 <_printf_i+0x198>
 800ac68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac70:	e03a      	b.n	800ace8 <_printf_i+0xa8>
 800ac72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac76:	2b15      	cmp	r3, #21
 800ac78:	d8f6      	bhi.n	800ac68 <_printf_i+0x28>
 800ac7a:	a101      	add	r1, pc, #4	@ (adr r1, 800ac80 <_printf_i+0x40>)
 800ac7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac80:	0800acd9 	.word	0x0800acd9
 800ac84:	0800aced 	.word	0x0800aced
 800ac88:	0800ac69 	.word	0x0800ac69
 800ac8c:	0800ac69 	.word	0x0800ac69
 800ac90:	0800ac69 	.word	0x0800ac69
 800ac94:	0800ac69 	.word	0x0800ac69
 800ac98:	0800aced 	.word	0x0800aced
 800ac9c:	0800ac69 	.word	0x0800ac69
 800aca0:	0800ac69 	.word	0x0800ac69
 800aca4:	0800ac69 	.word	0x0800ac69
 800aca8:	0800ac69 	.word	0x0800ac69
 800acac:	0800adeb 	.word	0x0800adeb
 800acb0:	0800ad17 	.word	0x0800ad17
 800acb4:	0800ada5 	.word	0x0800ada5
 800acb8:	0800ac69 	.word	0x0800ac69
 800acbc:	0800ac69 	.word	0x0800ac69
 800acc0:	0800ae0d 	.word	0x0800ae0d
 800acc4:	0800ac69 	.word	0x0800ac69
 800acc8:	0800ad17 	.word	0x0800ad17
 800accc:	0800ac69 	.word	0x0800ac69
 800acd0:	0800ac69 	.word	0x0800ac69
 800acd4:	0800adad 	.word	0x0800adad
 800acd8:	6833      	ldr	r3, [r6, #0]
 800acda:	1d1a      	adds	r2, r3, #4
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	6032      	str	r2, [r6, #0]
 800ace0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ace4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ace8:	2301      	movs	r3, #1
 800acea:	e09c      	b.n	800ae26 <_printf_i+0x1e6>
 800acec:	6833      	ldr	r3, [r6, #0]
 800acee:	6820      	ldr	r0, [r4, #0]
 800acf0:	1d19      	adds	r1, r3, #4
 800acf2:	6031      	str	r1, [r6, #0]
 800acf4:	0606      	lsls	r6, r0, #24
 800acf6:	d501      	bpl.n	800acfc <_printf_i+0xbc>
 800acf8:	681d      	ldr	r5, [r3, #0]
 800acfa:	e003      	b.n	800ad04 <_printf_i+0xc4>
 800acfc:	0645      	lsls	r5, r0, #25
 800acfe:	d5fb      	bpl.n	800acf8 <_printf_i+0xb8>
 800ad00:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad04:	2d00      	cmp	r5, #0
 800ad06:	da03      	bge.n	800ad10 <_printf_i+0xd0>
 800ad08:	232d      	movs	r3, #45	@ 0x2d
 800ad0a:	426d      	negs	r5, r5
 800ad0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad10:	4858      	ldr	r0, [pc, #352]	@ (800ae74 <_printf_i+0x234>)
 800ad12:	230a      	movs	r3, #10
 800ad14:	e011      	b.n	800ad3a <_printf_i+0xfa>
 800ad16:	6821      	ldr	r1, [r4, #0]
 800ad18:	6833      	ldr	r3, [r6, #0]
 800ad1a:	0608      	lsls	r0, r1, #24
 800ad1c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad20:	d402      	bmi.n	800ad28 <_printf_i+0xe8>
 800ad22:	0649      	lsls	r1, r1, #25
 800ad24:	bf48      	it	mi
 800ad26:	b2ad      	uxthmi	r5, r5
 800ad28:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad2a:	4852      	ldr	r0, [pc, #328]	@ (800ae74 <_printf_i+0x234>)
 800ad2c:	6033      	str	r3, [r6, #0]
 800ad2e:	bf14      	ite	ne
 800ad30:	230a      	movne	r3, #10
 800ad32:	2308      	moveq	r3, #8
 800ad34:	2100      	movs	r1, #0
 800ad36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad3a:	6866      	ldr	r6, [r4, #4]
 800ad3c:	60a6      	str	r6, [r4, #8]
 800ad3e:	2e00      	cmp	r6, #0
 800ad40:	db05      	blt.n	800ad4e <_printf_i+0x10e>
 800ad42:	6821      	ldr	r1, [r4, #0]
 800ad44:	432e      	orrs	r6, r5
 800ad46:	f021 0104 	bic.w	r1, r1, #4
 800ad4a:	6021      	str	r1, [r4, #0]
 800ad4c:	d04b      	beq.n	800ade6 <_printf_i+0x1a6>
 800ad4e:	4616      	mov	r6, r2
 800ad50:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad54:	fb03 5711 	mls	r7, r3, r1, r5
 800ad58:	5dc7      	ldrb	r7, [r0, r7]
 800ad5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad5e:	462f      	mov	r7, r5
 800ad60:	42bb      	cmp	r3, r7
 800ad62:	460d      	mov	r5, r1
 800ad64:	d9f4      	bls.n	800ad50 <_printf_i+0x110>
 800ad66:	2b08      	cmp	r3, #8
 800ad68:	d10b      	bne.n	800ad82 <_printf_i+0x142>
 800ad6a:	6823      	ldr	r3, [r4, #0]
 800ad6c:	07df      	lsls	r7, r3, #31
 800ad6e:	d508      	bpl.n	800ad82 <_printf_i+0x142>
 800ad70:	6923      	ldr	r3, [r4, #16]
 800ad72:	6861      	ldr	r1, [r4, #4]
 800ad74:	4299      	cmp	r1, r3
 800ad76:	bfde      	ittt	le
 800ad78:	2330      	movle	r3, #48	@ 0x30
 800ad7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad82:	1b92      	subs	r2, r2, r6
 800ad84:	6122      	str	r2, [r4, #16]
 800ad86:	f8cd a000 	str.w	sl, [sp]
 800ad8a:	464b      	mov	r3, r9
 800ad8c:	aa03      	add	r2, sp, #12
 800ad8e:	4621      	mov	r1, r4
 800ad90:	4640      	mov	r0, r8
 800ad92:	f7ff fee7 	bl	800ab64 <_printf_common>
 800ad96:	3001      	adds	r0, #1
 800ad98:	d14a      	bne.n	800ae30 <_printf_i+0x1f0>
 800ad9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad9e:	b004      	add	sp, #16
 800ada0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada4:	6823      	ldr	r3, [r4, #0]
 800ada6:	f043 0320 	orr.w	r3, r3, #32
 800adaa:	6023      	str	r3, [r4, #0]
 800adac:	4832      	ldr	r0, [pc, #200]	@ (800ae78 <_printf_i+0x238>)
 800adae:	2778      	movs	r7, #120	@ 0x78
 800adb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800adb4:	6823      	ldr	r3, [r4, #0]
 800adb6:	6831      	ldr	r1, [r6, #0]
 800adb8:	061f      	lsls	r7, r3, #24
 800adba:	f851 5b04 	ldr.w	r5, [r1], #4
 800adbe:	d402      	bmi.n	800adc6 <_printf_i+0x186>
 800adc0:	065f      	lsls	r7, r3, #25
 800adc2:	bf48      	it	mi
 800adc4:	b2ad      	uxthmi	r5, r5
 800adc6:	6031      	str	r1, [r6, #0]
 800adc8:	07d9      	lsls	r1, r3, #31
 800adca:	bf44      	itt	mi
 800adcc:	f043 0320 	orrmi.w	r3, r3, #32
 800add0:	6023      	strmi	r3, [r4, #0]
 800add2:	b11d      	cbz	r5, 800addc <_printf_i+0x19c>
 800add4:	2310      	movs	r3, #16
 800add6:	e7ad      	b.n	800ad34 <_printf_i+0xf4>
 800add8:	4826      	ldr	r0, [pc, #152]	@ (800ae74 <_printf_i+0x234>)
 800adda:	e7e9      	b.n	800adb0 <_printf_i+0x170>
 800addc:	6823      	ldr	r3, [r4, #0]
 800adde:	f023 0320 	bic.w	r3, r3, #32
 800ade2:	6023      	str	r3, [r4, #0]
 800ade4:	e7f6      	b.n	800add4 <_printf_i+0x194>
 800ade6:	4616      	mov	r6, r2
 800ade8:	e7bd      	b.n	800ad66 <_printf_i+0x126>
 800adea:	6833      	ldr	r3, [r6, #0]
 800adec:	6825      	ldr	r5, [r4, #0]
 800adee:	6961      	ldr	r1, [r4, #20]
 800adf0:	1d18      	adds	r0, r3, #4
 800adf2:	6030      	str	r0, [r6, #0]
 800adf4:	062e      	lsls	r6, r5, #24
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	d501      	bpl.n	800adfe <_printf_i+0x1be>
 800adfa:	6019      	str	r1, [r3, #0]
 800adfc:	e002      	b.n	800ae04 <_printf_i+0x1c4>
 800adfe:	0668      	lsls	r0, r5, #25
 800ae00:	d5fb      	bpl.n	800adfa <_printf_i+0x1ba>
 800ae02:	8019      	strh	r1, [r3, #0]
 800ae04:	2300      	movs	r3, #0
 800ae06:	6123      	str	r3, [r4, #16]
 800ae08:	4616      	mov	r6, r2
 800ae0a:	e7bc      	b.n	800ad86 <_printf_i+0x146>
 800ae0c:	6833      	ldr	r3, [r6, #0]
 800ae0e:	1d1a      	adds	r2, r3, #4
 800ae10:	6032      	str	r2, [r6, #0]
 800ae12:	681e      	ldr	r6, [r3, #0]
 800ae14:	6862      	ldr	r2, [r4, #4]
 800ae16:	2100      	movs	r1, #0
 800ae18:	4630      	mov	r0, r6
 800ae1a:	f7f5 f9e1 	bl	80001e0 <memchr>
 800ae1e:	b108      	cbz	r0, 800ae24 <_printf_i+0x1e4>
 800ae20:	1b80      	subs	r0, r0, r6
 800ae22:	6060      	str	r0, [r4, #4]
 800ae24:	6863      	ldr	r3, [r4, #4]
 800ae26:	6123      	str	r3, [r4, #16]
 800ae28:	2300      	movs	r3, #0
 800ae2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae2e:	e7aa      	b.n	800ad86 <_printf_i+0x146>
 800ae30:	6923      	ldr	r3, [r4, #16]
 800ae32:	4632      	mov	r2, r6
 800ae34:	4649      	mov	r1, r9
 800ae36:	4640      	mov	r0, r8
 800ae38:	47d0      	blx	sl
 800ae3a:	3001      	adds	r0, #1
 800ae3c:	d0ad      	beq.n	800ad9a <_printf_i+0x15a>
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	079b      	lsls	r3, r3, #30
 800ae42:	d413      	bmi.n	800ae6c <_printf_i+0x22c>
 800ae44:	68e0      	ldr	r0, [r4, #12]
 800ae46:	9b03      	ldr	r3, [sp, #12]
 800ae48:	4298      	cmp	r0, r3
 800ae4a:	bfb8      	it	lt
 800ae4c:	4618      	movlt	r0, r3
 800ae4e:	e7a6      	b.n	800ad9e <_printf_i+0x15e>
 800ae50:	2301      	movs	r3, #1
 800ae52:	4632      	mov	r2, r6
 800ae54:	4649      	mov	r1, r9
 800ae56:	4640      	mov	r0, r8
 800ae58:	47d0      	blx	sl
 800ae5a:	3001      	adds	r0, #1
 800ae5c:	d09d      	beq.n	800ad9a <_printf_i+0x15a>
 800ae5e:	3501      	adds	r5, #1
 800ae60:	68e3      	ldr	r3, [r4, #12]
 800ae62:	9903      	ldr	r1, [sp, #12]
 800ae64:	1a5b      	subs	r3, r3, r1
 800ae66:	42ab      	cmp	r3, r5
 800ae68:	dcf2      	bgt.n	800ae50 <_printf_i+0x210>
 800ae6a:	e7eb      	b.n	800ae44 <_printf_i+0x204>
 800ae6c:	2500      	movs	r5, #0
 800ae6e:	f104 0619 	add.w	r6, r4, #25
 800ae72:	e7f5      	b.n	800ae60 <_printf_i+0x220>
 800ae74:	0800b525 	.word	0x0800b525
 800ae78:	0800b536 	.word	0x0800b536

0800ae7c <__sflush_r>:
 800ae7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae84:	0716      	lsls	r6, r2, #28
 800ae86:	4605      	mov	r5, r0
 800ae88:	460c      	mov	r4, r1
 800ae8a:	d454      	bmi.n	800af36 <__sflush_r+0xba>
 800ae8c:	684b      	ldr	r3, [r1, #4]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	dc02      	bgt.n	800ae98 <__sflush_r+0x1c>
 800ae92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	dd48      	ble.n	800af2a <__sflush_r+0xae>
 800ae98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae9a:	2e00      	cmp	r6, #0
 800ae9c:	d045      	beq.n	800af2a <__sflush_r+0xae>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aea4:	682f      	ldr	r7, [r5, #0]
 800aea6:	6a21      	ldr	r1, [r4, #32]
 800aea8:	602b      	str	r3, [r5, #0]
 800aeaa:	d030      	beq.n	800af0e <__sflush_r+0x92>
 800aeac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aeae:	89a3      	ldrh	r3, [r4, #12]
 800aeb0:	0759      	lsls	r1, r3, #29
 800aeb2:	d505      	bpl.n	800aec0 <__sflush_r+0x44>
 800aeb4:	6863      	ldr	r3, [r4, #4]
 800aeb6:	1ad2      	subs	r2, r2, r3
 800aeb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aeba:	b10b      	cbz	r3, 800aec0 <__sflush_r+0x44>
 800aebc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aebe:	1ad2      	subs	r2, r2, r3
 800aec0:	2300      	movs	r3, #0
 800aec2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aec4:	6a21      	ldr	r1, [r4, #32]
 800aec6:	4628      	mov	r0, r5
 800aec8:	47b0      	blx	r6
 800aeca:	1c43      	adds	r3, r0, #1
 800aecc:	89a3      	ldrh	r3, [r4, #12]
 800aece:	d106      	bne.n	800aede <__sflush_r+0x62>
 800aed0:	6829      	ldr	r1, [r5, #0]
 800aed2:	291d      	cmp	r1, #29
 800aed4:	d82b      	bhi.n	800af2e <__sflush_r+0xb2>
 800aed6:	4a2a      	ldr	r2, [pc, #168]	@ (800af80 <__sflush_r+0x104>)
 800aed8:	40ca      	lsrs	r2, r1
 800aeda:	07d6      	lsls	r6, r2, #31
 800aedc:	d527      	bpl.n	800af2e <__sflush_r+0xb2>
 800aede:	2200      	movs	r2, #0
 800aee0:	6062      	str	r2, [r4, #4]
 800aee2:	04d9      	lsls	r1, r3, #19
 800aee4:	6922      	ldr	r2, [r4, #16]
 800aee6:	6022      	str	r2, [r4, #0]
 800aee8:	d504      	bpl.n	800aef4 <__sflush_r+0x78>
 800aeea:	1c42      	adds	r2, r0, #1
 800aeec:	d101      	bne.n	800aef2 <__sflush_r+0x76>
 800aeee:	682b      	ldr	r3, [r5, #0]
 800aef0:	b903      	cbnz	r3, 800aef4 <__sflush_r+0x78>
 800aef2:	6560      	str	r0, [r4, #84]	@ 0x54
 800aef4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aef6:	602f      	str	r7, [r5, #0]
 800aef8:	b1b9      	cbz	r1, 800af2a <__sflush_r+0xae>
 800aefa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aefe:	4299      	cmp	r1, r3
 800af00:	d002      	beq.n	800af08 <__sflush_r+0x8c>
 800af02:	4628      	mov	r0, r5
 800af04:	f7ff fa9c 	bl	800a440 <_free_r>
 800af08:	2300      	movs	r3, #0
 800af0a:	6363      	str	r3, [r4, #52]	@ 0x34
 800af0c:	e00d      	b.n	800af2a <__sflush_r+0xae>
 800af0e:	2301      	movs	r3, #1
 800af10:	4628      	mov	r0, r5
 800af12:	47b0      	blx	r6
 800af14:	4602      	mov	r2, r0
 800af16:	1c50      	adds	r0, r2, #1
 800af18:	d1c9      	bne.n	800aeae <__sflush_r+0x32>
 800af1a:	682b      	ldr	r3, [r5, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d0c6      	beq.n	800aeae <__sflush_r+0x32>
 800af20:	2b1d      	cmp	r3, #29
 800af22:	d001      	beq.n	800af28 <__sflush_r+0xac>
 800af24:	2b16      	cmp	r3, #22
 800af26:	d11e      	bne.n	800af66 <__sflush_r+0xea>
 800af28:	602f      	str	r7, [r5, #0]
 800af2a:	2000      	movs	r0, #0
 800af2c:	e022      	b.n	800af74 <__sflush_r+0xf8>
 800af2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af32:	b21b      	sxth	r3, r3
 800af34:	e01b      	b.n	800af6e <__sflush_r+0xf2>
 800af36:	690f      	ldr	r7, [r1, #16]
 800af38:	2f00      	cmp	r7, #0
 800af3a:	d0f6      	beq.n	800af2a <__sflush_r+0xae>
 800af3c:	0793      	lsls	r3, r2, #30
 800af3e:	680e      	ldr	r6, [r1, #0]
 800af40:	bf08      	it	eq
 800af42:	694b      	ldreq	r3, [r1, #20]
 800af44:	600f      	str	r7, [r1, #0]
 800af46:	bf18      	it	ne
 800af48:	2300      	movne	r3, #0
 800af4a:	eba6 0807 	sub.w	r8, r6, r7
 800af4e:	608b      	str	r3, [r1, #8]
 800af50:	f1b8 0f00 	cmp.w	r8, #0
 800af54:	dde9      	ble.n	800af2a <__sflush_r+0xae>
 800af56:	6a21      	ldr	r1, [r4, #32]
 800af58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af5a:	4643      	mov	r3, r8
 800af5c:	463a      	mov	r2, r7
 800af5e:	4628      	mov	r0, r5
 800af60:	47b0      	blx	r6
 800af62:	2800      	cmp	r0, #0
 800af64:	dc08      	bgt.n	800af78 <__sflush_r+0xfc>
 800af66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af6e:	81a3      	strh	r3, [r4, #12]
 800af70:	f04f 30ff 	mov.w	r0, #4294967295
 800af74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af78:	4407      	add	r7, r0
 800af7a:	eba8 0800 	sub.w	r8, r8, r0
 800af7e:	e7e7      	b.n	800af50 <__sflush_r+0xd4>
 800af80:	20400001 	.word	0x20400001

0800af84 <_fflush_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	690b      	ldr	r3, [r1, #16]
 800af88:	4605      	mov	r5, r0
 800af8a:	460c      	mov	r4, r1
 800af8c:	b913      	cbnz	r3, 800af94 <_fflush_r+0x10>
 800af8e:	2500      	movs	r5, #0
 800af90:	4628      	mov	r0, r5
 800af92:	bd38      	pop	{r3, r4, r5, pc}
 800af94:	b118      	cbz	r0, 800af9e <_fflush_r+0x1a>
 800af96:	6a03      	ldr	r3, [r0, #32]
 800af98:	b90b      	cbnz	r3, 800af9e <_fflush_r+0x1a>
 800af9a:	f7fe ffa1 	bl	8009ee0 <__sinit>
 800af9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d0f3      	beq.n	800af8e <_fflush_r+0xa>
 800afa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800afa8:	07d0      	lsls	r0, r2, #31
 800afaa:	d404      	bmi.n	800afb6 <_fflush_r+0x32>
 800afac:	0599      	lsls	r1, r3, #22
 800afae:	d402      	bmi.n	800afb6 <_fflush_r+0x32>
 800afb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afb2:	f7ff fa34 	bl	800a41e <__retarget_lock_acquire_recursive>
 800afb6:	4628      	mov	r0, r5
 800afb8:	4621      	mov	r1, r4
 800afba:	f7ff ff5f 	bl	800ae7c <__sflush_r>
 800afbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800afc0:	07da      	lsls	r2, r3, #31
 800afc2:	4605      	mov	r5, r0
 800afc4:	d4e4      	bmi.n	800af90 <_fflush_r+0xc>
 800afc6:	89a3      	ldrh	r3, [r4, #12]
 800afc8:	059b      	lsls	r3, r3, #22
 800afca:	d4e1      	bmi.n	800af90 <_fflush_r+0xc>
 800afcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afce:	f7ff fa27 	bl	800a420 <__retarget_lock_release_recursive>
 800afd2:	e7dd      	b.n	800af90 <_fflush_r+0xc>

0800afd4 <__swhatbuf_r>:
 800afd4:	b570      	push	{r4, r5, r6, lr}
 800afd6:	460c      	mov	r4, r1
 800afd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afdc:	2900      	cmp	r1, #0
 800afde:	b096      	sub	sp, #88	@ 0x58
 800afe0:	4615      	mov	r5, r2
 800afe2:	461e      	mov	r6, r3
 800afe4:	da0d      	bge.n	800b002 <__swhatbuf_r+0x2e>
 800afe6:	89a3      	ldrh	r3, [r4, #12]
 800afe8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800afec:	f04f 0100 	mov.w	r1, #0
 800aff0:	bf14      	ite	ne
 800aff2:	2340      	movne	r3, #64	@ 0x40
 800aff4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aff8:	2000      	movs	r0, #0
 800affa:	6031      	str	r1, [r6, #0]
 800affc:	602b      	str	r3, [r5, #0]
 800affe:	b016      	add	sp, #88	@ 0x58
 800b000:	bd70      	pop	{r4, r5, r6, pc}
 800b002:	466a      	mov	r2, sp
 800b004:	f000 f862 	bl	800b0cc <_fstat_r>
 800b008:	2800      	cmp	r0, #0
 800b00a:	dbec      	blt.n	800afe6 <__swhatbuf_r+0x12>
 800b00c:	9901      	ldr	r1, [sp, #4]
 800b00e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b012:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b016:	4259      	negs	r1, r3
 800b018:	4159      	adcs	r1, r3
 800b01a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b01e:	e7eb      	b.n	800aff8 <__swhatbuf_r+0x24>

0800b020 <__smakebuf_r>:
 800b020:	898b      	ldrh	r3, [r1, #12]
 800b022:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b024:	079d      	lsls	r5, r3, #30
 800b026:	4606      	mov	r6, r0
 800b028:	460c      	mov	r4, r1
 800b02a:	d507      	bpl.n	800b03c <__smakebuf_r+0x1c>
 800b02c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b030:	6023      	str	r3, [r4, #0]
 800b032:	6123      	str	r3, [r4, #16]
 800b034:	2301      	movs	r3, #1
 800b036:	6163      	str	r3, [r4, #20]
 800b038:	b003      	add	sp, #12
 800b03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b03c:	ab01      	add	r3, sp, #4
 800b03e:	466a      	mov	r2, sp
 800b040:	f7ff ffc8 	bl	800afd4 <__swhatbuf_r>
 800b044:	9f00      	ldr	r7, [sp, #0]
 800b046:	4605      	mov	r5, r0
 800b048:	4639      	mov	r1, r7
 800b04a:	4630      	mov	r0, r6
 800b04c:	f7ff fa64 	bl	800a518 <_malloc_r>
 800b050:	b948      	cbnz	r0, 800b066 <__smakebuf_r+0x46>
 800b052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b056:	059a      	lsls	r2, r3, #22
 800b058:	d4ee      	bmi.n	800b038 <__smakebuf_r+0x18>
 800b05a:	f023 0303 	bic.w	r3, r3, #3
 800b05e:	f043 0302 	orr.w	r3, r3, #2
 800b062:	81a3      	strh	r3, [r4, #12]
 800b064:	e7e2      	b.n	800b02c <__smakebuf_r+0xc>
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	6020      	str	r0, [r4, #0]
 800b06a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b06e:	81a3      	strh	r3, [r4, #12]
 800b070:	9b01      	ldr	r3, [sp, #4]
 800b072:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b076:	b15b      	cbz	r3, 800b090 <__smakebuf_r+0x70>
 800b078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b07c:	4630      	mov	r0, r6
 800b07e:	f000 f837 	bl	800b0f0 <_isatty_r>
 800b082:	b128      	cbz	r0, 800b090 <__smakebuf_r+0x70>
 800b084:	89a3      	ldrh	r3, [r4, #12]
 800b086:	f023 0303 	bic.w	r3, r3, #3
 800b08a:	f043 0301 	orr.w	r3, r3, #1
 800b08e:	81a3      	strh	r3, [r4, #12]
 800b090:	89a3      	ldrh	r3, [r4, #12]
 800b092:	431d      	orrs	r5, r3
 800b094:	81a5      	strh	r5, [r4, #12]
 800b096:	e7cf      	b.n	800b038 <__smakebuf_r+0x18>

0800b098 <memmove>:
 800b098:	4288      	cmp	r0, r1
 800b09a:	b510      	push	{r4, lr}
 800b09c:	eb01 0402 	add.w	r4, r1, r2
 800b0a0:	d902      	bls.n	800b0a8 <memmove+0x10>
 800b0a2:	4284      	cmp	r4, r0
 800b0a4:	4623      	mov	r3, r4
 800b0a6:	d807      	bhi.n	800b0b8 <memmove+0x20>
 800b0a8:	1e43      	subs	r3, r0, #1
 800b0aa:	42a1      	cmp	r1, r4
 800b0ac:	d008      	beq.n	800b0c0 <memmove+0x28>
 800b0ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0b6:	e7f8      	b.n	800b0aa <memmove+0x12>
 800b0b8:	4402      	add	r2, r0
 800b0ba:	4601      	mov	r1, r0
 800b0bc:	428a      	cmp	r2, r1
 800b0be:	d100      	bne.n	800b0c2 <memmove+0x2a>
 800b0c0:	bd10      	pop	{r4, pc}
 800b0c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0ca:	e7f7      	b.n	800b0bc <memmove+0x24>

0800b0cc <_fstat_r>:
 800b0cc:	b538      	push	{r3, r4, r5, lr}
 800b0ce:	4d07      	ldr	r5, [pc, #28]	@ (800b0ec <_fstat_r+0x20>)
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	4608      	mov	r0, r1
 800b0d6:	4611      	mov	r1, r2
 800b0d8:	602b      	str	r3, [r5, #0]
 800b0da:	f7f6 fbb4 	bl	8001846 <_fstat>
 800b0de:	1c43      	adds	r3, r0, #1
 800b0e0:	d102      	bne.n	800b0e8 <_fstat_r+0x1c>
 800b0e2:	682b      	ldr	r3, [r5, #0]
 800b0e4:	b103      	cbz	r3, 800b0e8 <_fstat_r+0x1c>
 800b0e6:	6023      	str	r3, [r4, #0]
 800b0e8:	bd38      	pop	{r3, r4, r5, pc}
 800b0ea:	bf00      	nop
 800b0ec:	200097dc 	.word	0x200097dc

0800b0f0 <_isatty_r>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	4d06      	ldr	r5, [pc, #24]	@ (800b10c <_isatty_r+0x1c>)
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	4608      	mov	r0, r1
 800b0fa:	602b      	str	r3, [r5, #0]
 800b0fc:	f7f6 fbb3 	bl	8001866 <_isatty>
 800b100:	1c43      	adds	r3, r0, #1
 800b102:	d102      	bne.n	800b10a <_isatty_r+0x1a>
 800b104:	682b      	ldr	r3, [r5, #0]
 800b106:	b103      	cbz	r3, 800b10a <_isatty_r+0x1a>
 800b108:	6023      	str	r3, [r4, #0]
 800b10a:	bd38      	pop	{r3, r4, r5, pc}
 800b10c:	200097dc 	.word	0x200097dc

0800b110 <_sbrk_r>:
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	4d06      	ldr	r5, [pc, #24]	@ (800b12c <_sbrk_r+0x1c>)
 800b114:	2300      	movs	r3, #0
 800b116:	4604      	mov	r4, r0
 800b118:	4608      	mov	r0, r1
 800b11a:	602b      	str	r3, [r5, #0]
 800b11c:	f7f6 fbbc 	bl	8001898 <_sbrk>
 800b120:	1c43      	adds	r3, r0, #1
 800b122:	d102      	bne.n	800b12a <_sbrk_r+0x1a>
 800b124:	682b      	ldr	r3, [r5, #0]
 800b126:	b103      	cbz	r3, 800b12a <_sbrk_r+0x1a>
 800b128:	6023      	str	r3, [r4, #0]
 800b12a:	bd38      	pop	{r3, r4, r5, pc}
 800b12c:	200097dc 	.word	0x200097dc

0800b130 <_realloc_r>:
 800b130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b134:	4607      	mov	r7, r0
 800b136:	4614      	mov	r4, r2
 800b138:	460d      	mov	r5, r1
 800b13a:	b921      	cbnz	r1, 800b146 <_realloc_r+0x16>
 800b13c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b140:	4611      	mov	r1, r2
 800b142:	f7ff b9e9 	b.w	800a518 <_malloc_r>
 800b146:	b92a      	cbnz	r2, 800b154 <_realloc_r+0x24>
 800b148:	f7ff f97a 	bl	800a440 <_free_r>
 800b14c:	4625      	mov	r5, r4
 800b14e:	4628      	mov	r0, r5
 800b150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b154:	f000 f81a 	bl	800b18c <_malloc_usable_size_r>
 800b158:	4284      	cmp	r4, r0
 800b15a:	4606      	mov	r6, r0
 800b15c:	d802      	bhi.n	800b164 <_realloc_r+0x34>
 800b15e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b162:	d8f4      	bhi.n	800b14e <_realloc_r+0x1e>
 800b164:	4621      	mov	r1, r4
 800b166:	4638      	mov	r0, r7
 800b168:	f7ff f9d6 	bl	800a518 <_malloc_r>
 800b16c:	4680      	mov	r8, r0
 800b16e:	b908      	cbnz	r0, 800b174 <_realloc_r+0x44>
 800b170:	4645      	mov	r5, r8
 800b172:	e7ec      	b.n	800b14e <_realloc_r+0x1e>
 800b174:	42b4      	cmp	r4, r6
 800b176:	4622      	mov	r2, r4
 800b178:	4629      	mov	r1, r5
 800b17a:	bf28      	it	cs
 800b17c:	4632      	movcs	r2, r6
 800b17e:	f7ff f950 	bl	800a422 <memcpy>
 800b182:	4629      	mov	r1, r5
 800b184:	4638      	mov	r0, r7
 800b186:	f7ff f95b 	bl	800a440 <_free_r>
 800b18a:	e7f1      	b.n	800b170 <_realloc_r+0x40>

0800b18c <_malloc_usable_size_r>:
 800b18c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b190:	1f18      	subs	r0, r3, #4
 800b192:	2b00      	cmp	r3, #0
 800b194:	bfbc      	itt	lt
 800b196:	580b      	ldrlt	r3, [r1, r0]
 800b198:	18c0      	addlt	r0, r0, r3
 800b19a:	4770      	bx	lr

0800b19c <_init>:
 800b19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b19e:	bf00      	nop
 800b1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1a2:	bc08      	pop	{r3}
 800b1a4:	469e      	mov	lr, r3
 800b1a6:	4770      	bx	lr

0800b1a8 <_fini>:
 800b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1aa:	bf00      	nop
 800b1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ae:	bc08      	pop	{r3}
 800b1b0:	469e      	mov	lr, r3
 800b1b2:	4770      	bx	lr
