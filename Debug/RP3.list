
RP3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ae0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08008c70  08008c70  00009c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e34  08008e34  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008e34  08008e34  00009e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e3c  08008e3c  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008e3c  08008e3c  00009e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e44  08008e44  00009e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008e48  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009770  2000006c  08008eb4  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200097dc  08008eb4  0000a7dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002abec  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053ea  00000000  00000000  00034c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002490  00000000  00000000  0003a078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c91  00000000  00000000  0003c508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000907c  00000000  00000000  0003e199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029c90  00000000  00000000  00047215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d437  00000000  00000000  00070ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017e2dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a370  00000000  00000000  0017e320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  00188690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c58 	.word	0x08008c58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08008c58 	.word	0x08008c58

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <HelloWorldTask>:
/* USER CODE BEGIN PV */


osThreadId_t helloTaskHandle;
void HelloWorldTask(void *argument)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b087      	sub	sp, #28
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	osDelay(3000);
 8000514:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000518:	f005 f8a2 	bl	8005660 <osDelay>
    char msg[] = "Hello World!\r\n";
 800051c:	4b0e      	ldr	r3, [pc, #56]	@ (8000558 <HelloWorldTask+0x4c>)
 800051e:	f107 0408 	add.w	r4, r7, #8
 8000522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000524:	c407      	stmia	r4!, {r0, r1, r2}
 8000526:	8023      	strh	r3, [r4, #0]
 8000528:	3402      	adds	r4, #2
 800052a:	0c1b      	lsrs	r3, r3, #16
 800052c:	7023      	strb	r3, [r4, #0]

    for(;;)
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800052e:	f107 0308 	add.w	r3, r7, #8
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff fe4c 	bl	80001d0 <strlen>
 8000538:	4603      	mov	r3, r0
 800053a:	b29a      	uxth	r2, r3
 800053c:	f107 0108 	add.w	r1, r7, #8
 8000540:	f04f 33ff 	mov.w	r3, #4294967295
 8000544:	4805      	ldr	r0, [pc, #20]	@ (800055c <HelloWorldTask+0x50>)
 8000546:	f003 ff61 	bl	800440c <HAL_UART_Transmit>
        osDelay(1000); // 1 Sekunde warten
 800054a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800054e:	f005 f887 	bl	8005660 <osDelay>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000552:	bf00      	nop
 8000554:	e7eb      	b.n	800052e <HelloWorldTask+0x22>
 8000556:	bf00      	nop
 8000558:	08008c7c 	.word	0x08008c7c
 800055c:	20000220 	.word	0x20000220

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f001 f8c9 	bl	80016fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f848 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f000 fa50 	bl	8000a10 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000570:	f000 f8a6 	bl	80006c0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000574:	f000 f8dc 	bl	8000730 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000578:	f000 f91a 	bl	80007b0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800057c:	f000 f97c 	bl	8000878 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000580:	f000 f9b8 	bl	80008f4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000584:	f000 f9e6 	bl	8000954 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000588:	f000 fa14 	bl	80009b4 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 800058c:	f000 f936 	bl	80007fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000590:	f004 ff8a 	bl	80054a8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  spiMutexHandle = osMutexNew(&spiMutex_attributes);
 8000594:	4810      	ldr	r0, [pc, #64]	@ (80005d8 <main+0x78>)
 8000596:	f005 f87e 	bl	8005696 <osMutexNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a0f      	ldr	r2, [pc, #60]	@ (80005dc <main+0x7c>)
 800059e:	6013      	str	r3, [r2, #0]
  if (spiMutexHandle == NULL) {
 80005a0:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <main+0x7c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d102      	bne.n	80005ae <main+0x4e>
      printf("Fehler: SPI-Mutex konnte nicht erstellt werden!\r\n");
 80005a8:	480d      	ldr	r0, [pc, #52]	@ (80005e0 <main+0x80>)
 80005aa:	f007 ff55 	bl	8008458 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ae:	4a0d      	ldr	r2, [pc, #52]	@ (80005e4 <main+0x84>)
 80005b0:	2100      	movs	r1, #0
 80005b2:	480d      	ldr	r0, [pc, #52]	@ (80005e8 <main+0x88>)
 80005b4:	f004 ffc2 	bl	800553c <osThreadNew>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a0c      	ldr	r2, [pc, #48]	@ (80005ec <main+0x8c>)
 80005bc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  helloTaskHandle = osThreadNew(HelloWorldTask, NULL, &helloTask_attributes);
 80005be:	4a0c      	ldr	r2, [pc, #48]	@ (80005f0 <main+0x90>)
 80005c0:	2100      	movs	r1, #0
 80005c2:	480c      	ldr	r0, [pc, #48]	@ (80005f4 <main+0x94>)
 80005c4:	f004 ffba 	bl	800553c <osThreadNew>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a0b      	ldr	r2, [pc, #44]	@ (80005f8 <main+0x98>)
 80005cc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005ce:	f004 ff8f 	bl	80054f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d2:	bf00      	nop
 80005d4:	e7fd      	b.n	80005d2 <main+0x72>
 80005d6:	bf00      	nop
 80005d8:	08008ddc 	.word	0x08008ddc
 80005dc:	2000081c 	.word	0x2000081c
 80005e0:	08008d48 	.word	0x08008d48
 80005e4:	08008d94 	.word	0x08008d94
 80005e8:	08000d4d 	.word	0x08000d4d
 80005ec:	20000814 	.word	0x20000814
 80005f0:	08008db8 	.word	0x08008db8
 80005f4:	0800050d 	.word	0x0800050d
 80005f8:	20000818 	.word	0x20000818

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	@ 0x58
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2244      	movs	r2, #68	@ 0x44
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f008 f804 	bl	8008618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000622:	f001 ff1d 	bl	8002460 <HAL_PWREx_ControlVoltageScaling>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800062c:	f000 fba8 	bl	8000d80 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000630:	f001 fef8 	bl	8002424 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000634:	4b21      	ldr	r3, [pc, #132]	@ (80006bc <SystemClock_Config+0xc0>)
 8000636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800063a:	4a20      	ldr	r2, [pc, #128]	@ (80006bc <SystemClock_Config+0xc0>)
 800063c:	f023 0318 	bic.w	r3, r3, #24
 8000640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000644:	2314      	movs	r3, #20
 8000646:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000654:	2360      	movs	r3, #96	@ 0x60
 8000656:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800065c:	2301      	movs	r3, #1
 800065e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000660:	2301      	movs	r3, #1
 8000662:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000664:	2328      	movs	r3, #40	@ 0x28
 8000666:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000668:	2307      	movs	r3, #7
 800066a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4618      	mov	r0, r3
 800067a:	f002 f813 	bl	80026a4 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000684:	f000 fb7c 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2303      	movs	r3, #3
 800068e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	2104      	movs	r1, #4
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 fbdb 	bl	8002e5c <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006ac:	f000 fb68 	bl	8000d80 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006b0:	f003 f914 	bl	80038dc <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b4:	bf00      	nop
 80006b6:	3758      	adds	r7, #88	@ 0x58
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000

080006c0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80006c4:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <MX_DFSDM1_Init+0x68>)
 80006c6:	4a19      	ldr	r2, [pc, #100]	@ (800072c <MX_DFSDM1_Init+0x6c>)
 80006c8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80006ca:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <MX_DFSDM1_Init+0x68>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006d0:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <MX_DFSDM1_Init+0x68>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006d6:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_DFSDM1_Init+0x68>)
 80006d8:	2202      	movs	r2, #2
 80006da:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <MX_DFSDM1_Init+0x68>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_DFSDM1_Init+0x68>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_DFSDM1_Init+0x68>)
 80006ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ee:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <MX_DFSDM1_Init+0x68>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_DFSDM1_Init+0x68>)
 80006f8:	2204      	movs	r2, #4
 80006fa:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <MX_DFSDM1_Init+0x68>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_DFSDM1_Init+0x68>)
 8000704:	2201      	movs	r2, #1
 8000706:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000708:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <MX_DFSDM1_Init+0x68>)
 800070a:	2200      	movs	r2, #0
 800070c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800070e:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_DFSDM1_Init+0x68>)
 8000710:	2200      	movs	r2, #0
 8000712:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	@ (8000728 <MX_DFSDM1_Init+0x68>)
 8000716:	f001 f92f 	bl	8001978 <HAL_DFSDM_ChannelInit>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000720:	f000 fb2e 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000088 	.word	0x20000088
 800072c:	40016020 	.word	0x40016020

08000730 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <MX_I2C2_Init+0x74>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	@ (80007a8 <MX_I2C2_Init+0x78>)
 8000738:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800073a:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <MX_I2C2_Init+0x74>)
 800073c:	4a1b      	ldr	r2, [pc, #108]	@ (80007ac <MX_I2C2_Init+0x7c>)
 800073e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000740:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <MX_I2C2_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000746:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <MX_I2C2_Init+0x74>)
 8000748:	2201      	movs	r2, #1
 800074a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <MX_I2C2_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000752:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_I2C2_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <MX_I2C2_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_I2C2_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_I2C2_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800076a:	480e      	ldr	r0, [pc, #56]	@ (80007a4 <MX_I2C2_Init+0x74>)
 800076c:	f001 fbf5 	bl	8001f5a <HAL_I2C_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000776:	f000 fb03 	bl	8000d80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800077a:	2100      	movs	r1, #0
 800077c:	4809      	ldr	r0, [pc, #36]	@ (80007a4 <MX_I2C2_Init+0x74>)
 800077e:	f001 fc87 	bl	8002090 <HAL_I2CEx_ConfigAnalogFilter>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000788:	f000 fafa 	bl	8000d80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800078c:	2100      	movs	r1, #0
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_I2C2_Init+0x74>)
 8000790:	f001 fcc9 	bl	8002126 <HAL_I2CEx_ConfigDigitalFilter>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800079a:	f000 faf1 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000c0 	.word	0x200000c0
 80007a8:	40005800 	.word	0x40005800
 80007ac:	10d19ce4 	.word	0x10d19ce4

080007b0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_QUADSPI_Init+0x44>)
 80007b6:	4a10      	ldr	r2, [pc, #64]	@ (80007f8 <MX_QUADSPI_Init+0x48>)
 80007b8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_QUADSPI_Init+0x44>)
 80007bc:	2202      	movs	r2, #2
 80007be:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_QUADSPI_Init+0x44>)
 80007c2:	2204      	movs	r2, #4
 80007c4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <MX_QUADSPI_Init+0x44>)
 80007c8:	2210      	movs	r2, #16
 80007ca:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_QUADSPI_Init+0x44>)
 80007ce:	2217      	movs	r2, #23
 80007d0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <MX_QUADSPI_Init+0x44>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_QUADSPI_Init+0x44>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_QUADSPI_Init+0x44>)
 80007e0:	f001 fea4 	bl	800252c <HAL_QSPI_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007ea:	f000 fac9 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000114 	.word	0x20000114
 80007f8:	a0001000 	.word	0xa0001000

080007fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000802:	4a1c      	ldr	r2, [pc, #112]	@ (8000874 <MX_SPI1_Init+0x78>)
 8000804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000806:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000808:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800080c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800080e:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000814:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000816:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800081a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_SPI1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000822:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000828:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_SPI1_Init+0x74>)
 800082a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800082e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <MX_SPI1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_SPI1_Init+0x74>)
 800084a:	2207      	movs	r2, #7
 800084c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800084e:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000856:	2208      	movs	r2, #8
 8000858:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_SPI1_Init+0x74>)
 800085c:	f003 fa20 	bl	8003ca0 <HAL_SPI_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000866:	f000 fa8b 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000158 	.word	0x20000158
 8000874:	40013000 	.word	0x40013000

08000878 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800087c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <MX_SPI3_Init+0x74>)
 800087e:	4a1c      	ldr	r2, [pc, #112]	@ (80008f0 <MX_SPI3_Init+0x78>)
 8000880:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000882:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <MX_SPI3_Init+0x74>)
 8000884:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000888:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800088a:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_SPI3_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000890:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <MX_SPI3_Init+0x74>)
 8000892:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000896:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_SPI3_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089e:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008aa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008ae:	2208      	movs	r2, #8
 80008b0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008c6:	2207      	movs	r2, #7
 80008c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008d2:	2208      	movs	r2, #8
 80008d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008d8:	f003 f9e2 	bl	8003ca0 <HAL_SPI_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008e2:	f000 fa4d 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200001bc 	.word	0x200001bc
 80008f0:	40003c00 	.word	0x40003c00

080008f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_USART1_UART_Init+0x58>)
 80008fa:	4a15      	ldr	r2, [pc, #84]	@ (8000950 <MX_USART1_UART_Init+0x5c>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008fe:	4b13      	ldr	r3, [pc, #76]	@ (800094c <MX_USART1_UART_Init+0x58>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_USART1_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_USART1_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_USART1_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_USART1_UART_Init+0x58>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_USART1_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_USART1_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_USART1_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_USART1_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_USART1_UART_Init+0x58>)
 8000938:	f003 fd1a 	bl	8004370 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000942:	f000 fa1d 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000220 	.word	0x20000220
 8000950:	40013800 	.word	0x40013800

08000954 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_USART3_UART_Init+0x58>)
 800095a:	4a15      	ldr	r2, [pc, #84]	@ (80009b0 <MX_USART3_UART_Init+0x5c>)
 800095c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800095e:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <MX_USART3_UART_Init+0x58>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_USART3_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_USART3_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <MX_USART3_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <MX_USART3_UART_Init+0x58>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <MX_USART3_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <MX_USART3_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <MX_USART3_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <MX_USART3_UART_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_USART3_UART_Init+0x58>)
 8000998:	f003 fcea 	bl	8004370 <HAL_UART_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009a2:	f000 f9ed 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200002a8 	.word	0x200002a8
 80009b0:	40004800 	.word	0x40004800

080009b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c2:	2206      	movs	r2, #6
 80009c4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c8:	2202      	movs	r2, #2
 80009ca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ce:	2202      	movs	r2, #2
 80009d0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009e4:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f8:	f001 fbe1 	bl	80021be <HAL_PCD_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a02:	f000 f9bd 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000330 	.word	0x20000330

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	@ 0x28
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a26:	4bbd      	ldr	r3, [pc, #756]	@ (8000d1c <MX_GPIO_Init+0x30c>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	4abc      	ldr	r2, [pc, #752]	@ (8000d1c <MX_GPIO_Init+0x30c>)
 8000a2c:	f043 0310 	orr.w	r3, r3, #16
 8000a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a32:	4bba      	ldr	r3, [pc, #744]	@ (8000d1c <MX_GPIO_Init+0x30c>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	f003 0310 	and.w	r3, r3, #16
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	4bb7      	ldr	r3, [pc, #732]	@ (8000d1c <MX_GPIO_Init+0x30c>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	4ab6      	ldr	r2, [pc, #728]	@ (8000d1c <MX_GPIO_Init+0x30c>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a4a:	4bb4      	ldr	r3, [pc, #720]	@ (8000d1c <MX_GPIO_Init+0x30c>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4bb1      	ldr	r3, [pc, #708]	@ (8000d1c <MX_GPIO_Init+0x30c>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	4ab0      	ldr	r2, [pc, #704]	@ (8000d1c <MX_GPIO_Init+0x30c>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a62:	4bae      	ldr	r3, [pc, #696]	@ (8000d1c <MX_GPIO_Init+0x30c>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	4bab      	ldr	r3, [pc, #684]	@ (8000d1c <MX_GPIO_Init+0x30c>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a72:	4aaa      	ldr	r2, [pc, #680]	@ (8000d1c <MX_GPIO_Init+0x30c>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a7a:	4ba8      	ldr	r3, [pc, #672]	@ (8000d1c <MX_GPIO_Init+0x30c>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a86:	4ba5      	ldr	r3, [pc, #660]	@ (8000d1c <MX_GPIO_Init+0x30c>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8a:	4aa4      	ldr	r2, [pc, #656]	@ (8000d1c <MX_GPIO_Init+0x30c>)
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a92:	4ba2      	ldr	r3, [pc, #648]	@ (8000d1c <MX_GPIO_Init+0x30c>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a96:	f003 0308 	and.w	r3, r3, #8
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000aa4:	489e      	ldr	r0, [pc, #632]	@ (8000d20 <MX_GPIO_Init+0x310>)
 8000aa6:	f001 fa1d 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000ab0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab4:	f001 fa16 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000abe:	4899      	ldr	r0, [pc, #612]	@ (8000d24 <MX_GPIO_Init+0x314>)
 8000ac0:	f001 fa10 	bl	8001ee4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000aca:	4897      	ldr	r0, [pc, #604]	@ (8000d28 <MX_GPIO_Init+0x318>)
 8000acc:	f001 fa0a 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ad6:	4894      	ldr	r0, [pc, #592]	@ (8000d28 <MX_GPIO_Init+0x318>)
 8000ad8:	f001 fa04 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000ae2:	4892      	ldr	r0, [pc, #584]	@ (8000d2c <MX_GPIO_Init+0x31c>)
 8000ae4:	f001 f9fe 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2120      	movs	r1, #32
 8000aec:	488d      	ldr	r0, [pc, #564]	@ (8000d24 <MX_GPIO_Init+0x314>)
 8000aee:	f001 f9f9 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2101      	movs	r1, #1
 8000af6:	488a      	ldr	r0, [pc, #552]	@ (8000d20 <MX_GPIO_Init+0x310>)
 8000af8:	f001 f9f4 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000afc:	f240 1315 	movw	r3, #277	@ 0x115
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4882      	ldr	r0, [pc, #520]	@ (8000d20 <MX_GPIO_Init+0x310>)
 8000b16:	f001 f83b 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000b1a:	236a      	movs	r3, #106	@ 0x6a
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	487c      	ldr	r0, [pc, #496]	@ (8000d20 <MX_GPIO_Init+0x310>)
 8000b30:	f001 f82e 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000b34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b3a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4878      	ldr	r0, [pc, #480]	@ (8000d2c <MX_GPIO_Init+0x31c>)
 8000b4c:	f001 f820 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000b50:	233f      	movs	r3, #63	@ 0x3f
 8000b52:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b54:	230b      	movs	r3, #11
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	4872      	ldr	r0, [pc, #456]	@ (8000d2c <MX_GPIO_Init+0x31c>)
 8000b64:	f001 f814 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b78:	2308      	movs	r3, #8
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b86:	f001 f803 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b8a:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba6:	f000 fff3 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000baa:	2308      	movs	r3, #8
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc8:	f000 ffe2 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000bcc:	2310      	movs	r3, #16
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bd0:	230b      	movs	r3, #11
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be2:	f000 ffd5 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000be6:	2301      	movs	r3, #1
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	484a      	ldr	r0, [pc, #296]	@ (8000d24 <MX_GPIO_Init+0x314>)
 8000bfc:	f000 ffc8 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000c00:	2302      	movs	r3, #2
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c04:	230b      	movs	r3, #11
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	4844      	ldr	r0, [pc, #272]	@ (8000d24 <MX_GPIO_Init+0x314>)
 8000c14:	f000 ffbc 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c18:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000c1c:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	483c      	ldr	r0, [pc, #240]	@ (8000d24 <MX_GPIO_Init+0x314>)
 8000c32:	f000 ffad 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c36:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000c3a:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c3c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4836      	ldr	r0, [pc, #216]	@ (8000d28 <MX_GPIO_Init+0x318>)
 8000c4e:	f000 ff9f 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c52:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	482f      	ldr	r0, [pc, #188]	@ (8000d28 <MX_GPIO_Init+0x318>)
 8000c6c:	f000 ff90 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c70:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4828      	ldr	r0, [pc, #160]	@ (8000d2c <MX_GPIO_Init+0x31c>)
 8000c8a:	f000 ff81 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c8e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c94:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4821      	ldr	r0, [pc, #132]	@ (8000d2c <MX_GPIO_Init+0x31c>)
 8000ca6:	f000 ff73 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000caa:	2302      	movs	r3, #2
 8000cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cba:	2305      	movs	r3, #5
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4818      	ldr	r0, [pc, #96]	@ (8000d28 <MX_GPIO_Init+0x318>)
 8000cc6:	f000 ff63 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000cca:	2378      	movs	r3, #120	@ 0x78
 8000ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cda:	2307      	movs	r3, #7
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4810      	ldr	r0, [pc, #64]	@ (8000d28 <MX_GPIO_Init+0x318>)
 8000ce6:	f000 ff53 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000cea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf0:	2312      	movs	r3, #18
 8000cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	4807      	ldr	r0, [pc, #28]	@ (8000d24 <MX_GPIO_Init+0x314>)
 8000d08:	f000 ff42 	bl	8001b90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	2017      	movs	r0, #23
 8000d12:	f000 fe07 	bl	8001924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d16:	2017      	movs	r0, #23
 8000d18:	e00a      	b.n	8000d30 <MX_GPIO_Init+0x320>
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	48001000 	.word	0x48001000
 8000d24:	48000400 	.word	0x48000400
 8000d28:	48000c00 	.word	0x48000c00
 8000d2c:	48000800 	.word	0x48000800
 8000d30:	f000 fe14 	bl	800195c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2105      	movs	r1, #5
 8000d38:	2028      	movs	r0, #40	@ 0x28
 8000d3a:	f000 fdf3 	bl	8001924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d3e:	2028      	movs	r0, #40	@ 0x28
 8000d40:	f000 fe0c 	bl	800195c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	@ 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d54:	2001      	movs	r0, #1
 8000d56:	f004 fc83 	bl	8005660 <osDelay>
 8000d5a:	e7fb      	b.n	8000d54 <StartDefaultTask+0x8>

08000d5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d101      	bne.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d6e:	f000 fcdd 	bl	800172c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40001000 	.word	0x40001000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <Error_Handler+0x8>

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <HAL_MspInit+0x4c>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d96:	4a10      	ldr	r2, [pc, #64]	@ (8000dd8 <HAL_MspInit+0x4c>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <HAL_MspInit+0x4c>)
 8000da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <HAL_MspInit+0x4c>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dae:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <HAL_MspInit+0x4c>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000db6:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <HAL_MspInit+0x4c>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	f06f 0001 	mvn.w	r0, #1
 8000dca:	f000 fdab 	bl	8001924 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000

08000ddc <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b0ac      	sub	sp, #176	@ 0xb0
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2288      	movs	r2, #136	@ 0x88
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f007 fc0b 	bl	8008618 <memset>
  if(DFSDM1_Init == 0)
 8000e02:	4b25      	ldr	r3, [pc, #148]	@ (8000e98 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d142      	bne.n	8000e90 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000e0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f002 fa74 	bl	8003308 <HAL_RCCEx_PeriphCLKConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000e26:	f7ff ffab 	bl	8000d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e9c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8000e9c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e34:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e36:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e42:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e46:	4a15      	ldr	r2, [pc, #84]	@ (8000e9c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e48:	f043 0310 	orr.w	r3, r3, #16
 8000e4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e4e:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e52:	f003 0310 	and.w	r3, r3, #16
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000e5a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000e5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e74:	2306      	movs	r3, #6
 8000e76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e7a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4807      	ldr	r0, [pc, #28]	@ (8000ea0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000e82:	f000 fe85 	bl	8001b90 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000e86:	4b04      	ldr	r3, [pc, #16]	@ (8000e98 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	4a02      	ldr	r2, [pc, #8]	@ (8000e98 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e8e:	6013      	str	r3, [r2, #0]
  }

}
 8000e90:	bf00      	nop
 8000e92:	37b0      	adds	r7, #176	@ 0xb0
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000820 	.word	0x20000820
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48001000 	.word	0x48001000

08000ea4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b0ac      	sub	sp, #176	@ 0xb0
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2288      	movs	r2, #136	@ 0x88
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f007 fba7 	bl	8008618 <memset>
  if(hi2c->Instance==I2C2)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a21      	ldr	r2, [pc, #132]	@ (8000f54 <HAL_I2C_MspInit+0xb0>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d13b      	bne.n	8000f4c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ed4:	2380      	movs	r3, #128	@ 0x80
 8000ed6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 fa11 	bl	8003308 <HAL_RCCEx_PeriphCLKConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000eec:	f7ff ff48 	bl	8000d80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef0:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef4:	4a18      	ldr	r2, [pc, #96]	@ (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efc:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000f08:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f10:	2312      	movs	r3, #18
 8000f12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f22:	2304      	movs	r3, #4
 8000f24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f28:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480b      	ldr	r0, [pc, #44]	@ (8000f5c <HAL_I2C_MspInit+0xb8>)
 8000f30:	f000 fe2e 	bl	8001b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f38:	4a07      	ldr	r2, [pc, #28]	@ (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000f3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000f4c:	bf00      	nop
 8000f4e:	37b0      	adds	r7, #176	@ 0xb0
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40005800 	.word	0x40005800
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	48000400 	.word	0x48000400

08000f60 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	@ 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a17      	ldr	r2, [pc, #92]	@ (8000fdc <HAL_QSPI_MspInit+0x7c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d128      	bne.n	8000fd4 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f82:	4b17      	ldr	r3, [pc, #92]	@ (8000fe0 <HAL_QSPI_MspInit+0x80>)
 8000f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f86:	4a16      	ldr	r2, [pc, #88]	@ (8000fe0 <HAL_QSPI_MspInit+0x80>)
 8000f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8000f8e:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <HAL_QSPI_MspInit+0x80>)
 8000f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <HAL_QSPI_MspInit+0x80>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9e:	4a10      	ldr	r2, [pc, #64]	@ (8000fe0 <HAL_QSPI_MspInit+0x80>)
 8000fa0:	f043 0310 	orr.w	r3, r3, #16
 8000fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <HAL_QSPI_MspInit+0x80>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000fb2:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000fb6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <HAL_QSPI_MspInit+0x84>)
 8000fd0:	f000 fdde 	bl	8001b90 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8000fd4:	bf00      	nop
 8000fd6:	3728      	adds	r7, #40	@ 0x28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	a0001000 	.word	0xa0001000
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	48001000 	.word	0x48001000

08000fe8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08c      	sub	sp, #48	@ 0x30
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a2f      	ldr	r2, [pc, #188]	@ (80010c4 <HAL_SPI_MspInit+0xdc>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d129      	bne.n	800105e <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800100a:	4b2f      	ldr	r3, [pc, #188]	@ (80010c8 <HAL_SPI_MspInit+0xe0>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800100e:	4a2e      	ldr	r2, [pc, #184]	@ (80010c8 <HAL_SPI_MspInit+0xe0>)
 8001010:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001014:	6613      	str	r3, [r2, #96]	@ 0x60
 8001016:	4b2c      	ldr	r3, [pc, #176]	@ (80010c8 <HAL_SPI_MspInit+0xe0>)
 8001018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800101a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b29      	ldr	r3, [pc, #164]	@ (80010c8 <HAL_SPI_MspInit+0xe0>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001026:	4a28      	ldr	r2, [pc, #160]	@ (80010c8 <HAL_SPI_MspInit+0xe0>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102e:	4b26      	ldr	r3, [pc, #152]	@ (80010c8 <HAL_SPI_MspInit+0xe0>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800103a:	23e0      	movs	r3, #224	@ 0xe0
 800103c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800104a:	2305      	movs	r3, #5
 800104c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001058:	f000 fd9a 	bl	8001b90 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 800105c:	e02d      	b.n	80010ba <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a1a      	ldr	r2, [pc, #104]	@ (80010cc <HAL_SPI_MspInit+0xe4>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d128      	bne.n	80010ba <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001068:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <HAL_SPI_MspInit+0xe0>)
 800106a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106c:	4a16      	ldr	r2, [pc, #88]	@ (80010c8 <HAL_SPI_MspInit+0xe0>)
 800106e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001072:	6593      	str	r3, [r2, #88]	@ 0x58
 8001074:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <HAL_SPI_MspInit+0xe0>)
 8001076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001078:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <HAL_SPI_MspInit+0xe0>)
 8001082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001084:	4a10      	ldr	r2, [pc, #64]	@ (80010c8 <HAL_SPI_MspInit+0xe0>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108c:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <HAL_SPI_MspInit+0xe0>)
 800108e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001098:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010aa:	2306      	movs	r3, #6
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	4806      	ldr	r0, [pc, #24]	@ (80010d0 <HAL_SPI_MspInit+0xe8>)
 80010b6:	f000 fd6b 	bl	8001b90 <HAL_GPIO_Init>
}
 80010ba:	bf00      	nop
 80010bc:	3730      	adds	r7, #48	@ 0x30
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40013000 	.word	0x40013000
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40003c00 	.word	0x40003c00
 80010d0:	48000800 	.word	0x48000800

080010d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0ae      	sub	sp, #184	@ 0xb8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	2288      	movs	r2, #136	@ 0x88
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f007 fa8f 	bl	8008618 <memset>
  if(huart->Instance==USART1)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a42      	ldr	r2, [pc, #264]	@ (8001208 <HAL_UART_MspInit+0x134>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d13b      	bne.n	800117c <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001104:	2301      	movs	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001108:	2300      	movs	r3, #0
 800110a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4618      	mov	r0, r3
 8001112:	f002 f8f9 	bl	8003308 <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800111c:	f7ff fe30 	bl	8000d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001120:	4b3a      	ldr	r3, [pc, #232]	@ (800120c <HAL_UART_MspInit+0x138>)
 8001122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001124:	4a39      	ldr	r2, [pc, #228]	@ (800120c <HAL_UART_MspInit+0x138>)
 8001126:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800112a:	6613      	str	r3, [r2, #96]	@ 0x60
 800112c:	4b37      	ldr	r3, [pc, #220]	@ (800120c <HAL_UART_MspInit+0x138>)
 800112e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001130:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001138:	4b34      	ldr	r3, [pc, #208]	@ (800120c <HAL_UART_MspInit+0x138>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113c:	4a33      	ldr	r2, [pc, #204]	@ (800120c <HAL_UART_MspInit+0x138>)
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001144:	4b31      	ldr	r3, [pc, #196]	@ (800120c <HAL_UART_MspInit+0x138>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001150:	23c0      	movs	r3, #192	@ 0xc0
 8001152:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001168:	2307      	movs	r3, #7
 800116a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001172:	4619      	mov	r1, r3
 8001174:	4826      	ldr	r0, [pc, #152]	@ (8001210 <HAL_UART_MspInit+0x13c>)
 8001176:	f000 fd0b 	bl	8001b90 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800117a:	e040      	b.n	80011fe <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a24      	ldr	r2, [pc, #144]	@ (8001214 <HAL_UART_MspInit+0x140>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d13b      	bne.n	80011fe <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001186:	2304      	movs	r3, #4
 8001188:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800118a:	2300      	movs	r3, #0
 800118c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4618      	mov	r0, r3
 8001194:	f002 f8b8 	bl	8003308 <HAL_RCCEx_PeriphCLKConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800119e:	f7ff fdef 	bl	8000d80 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011a2:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <HAL_UART_MspInit+0x138>)
 80011a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a6:	4a19      	ldr	r2, [pc, #100]	@ (800120c <HAL_UART_MspInit+0x138>)
 80011a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ae:	4b17      	ldr	r3, [pc, #92]	@ (800120c <HAL_UART_MspInit+0x138>)
 80011b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ba:	4b14      	ldr	r3, [pc, #80]	@ (800120c <HAL_UART_MspInit+0x138>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	4a13      	ldr	r2, [pc, #76]	@ (800120c <HAL_UART_MspInit+0x138>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <HAL_UART_MspInit+0x138>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80011d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011ec:	2307      	movs	r3, #7
 80011ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011f6:	4619      	mov	r1, r3
 80011f8:	4807      	ldr	r0, [pc, #28]	@ (8001218 <HAL_UART_MspInit+0x144>)
 80011fa:	f000 fcc9 	bl	8001b90 <HAL_GPIO_Init>
}
 80011fe:	bf00      	nop
 8001200:	37b8      	adds	r7, #184	@ 0xb8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40013800 	.word	0x40013800
 800120c:	40021000 	.word	0x40021000
 8001210:	48000400 	.word	0x48000400
 8001214:	40004800 	.word	0x40004800
 8001218:	48000c00 	.word	0x48000c00

0800121c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0ac      	sub	sp, #176	@ 0xb0
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2288      	movs	r2, #136	@ 0x88
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f007 f9eb 	bl	8008618 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800124a:	d17c      	bne.n	8001346 <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800124c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001250:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001252:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001256:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800125a:	2301      	movs	r3, #1
 800125c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800125e:	2301      	movs	r3, #1
 8001260:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001262:	2318      	movs	r3, #24
 8001264:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001266:	2307      	movs	r3, #7
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800126a:	2302      	movs	r3, #2
 800126c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800126e:	2302      	movs	r3, #2
 8001270:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001272:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001276:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4618      	mov	r0, r3
 800127e:	f002 f843 	bl	8003308 <HAL_RCCEx_PeriphCLKConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001288:	f7ff fd7a 	bl	8000d80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128c:	4b30      	ldr	r3, [pc, #192]	@ (8001350 <HAL_PCD_MspInit+0x134>)
 800128e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001290:	4a2f      	ldr	r2, [pc, #188]	@ (8001350 <HAL_PCD_MspInit+0x134>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001298:	4b2d      	ldr	r3, [pc, #180]	@ (8001350 <HAL_PCD_MspInit+0x134>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80012a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012bc:	4619      	mov	r1, r3
 80012be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c2:	f000 fc65 	bl	8001b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80012c6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80012ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012e0:	230a      	movs	r3, #10
 80012e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012ea:	4619      	mov	r1, r3
 80012ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f0:	f000 fc4e 	bl	8001b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012f4:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <HAL_PCD_MspInit+0x134>)
 80012f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f8:	4a15      	ldr	r2, [pc, #84]	@ (8001350 <HAL_PCD_MspInit+0x134>)
 80012fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001300:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <HAL_PCD_MspInit+0x134>)
 8001302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001304:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800130c:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <HAL_PCD_MspInit+0x134>)
 800130e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001310:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d114      	bne.n	8001342 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001318:	4b0d      	ldr	r3, [pc, #52]	@ (8001350 <HAL_PCD_MspInit+0x134>)
 800131a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131c:	4a0c      	ldr	r2, [pc, #48]	@ (8001350 <HAL_PCD_MspInit+0x134>)
 800131e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001322:	6593      	str	r3, [r2, #88]	@ 0x58
 8001324:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <HAL_PCD_MspInit+0x134>)
 8001326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001330:	f001 f8ec 	bl	800250c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_PCD_MspInit+0x134>)
 8001336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001338:	4a05      	ldr	r2, [pc, #20]	@ (8001350 <HAL_PCD_MspInit+0x134>)
 800133a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800133e:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001340:	e001      	b.n	8001346 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001342:	f001 f8e3 	bl	800250c <HAL_PWREx_EnableVddUSB>
}
 8001346:	bf00      	nop
 8001348:	37b0      	adds	r7, #176	@ 0xb0
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000

08001354 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08e      	sub	sp, #56	@ 0x38
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001362:	4b34      	ldr	r3, [pc, #208]	@ (8001434 <HAL_InitTick+0xe0>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001366:	4a33      	ldr	r2, [pc, #204]	@ (8001434 <HAL_InitTick+0xe0>)
 8001368:	f043 0310 	orr.w	r3, r3, #16
 800136c:	6593      	str	r3, [r2, #88]	@ 0x58
 800136e:	4b31      	ldr	r3, [pc, #196]	@ (8001434 <HAL_InitTick+0xe0>)
 8001370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800137a:	f107 0210 	add.w	r2, r7, #16
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f001 ff2d 	bl	80031e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800138e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001390:	2b00      	cmp	r3, #0
 8001392:	d103      	bne.n	800139c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001394:	f001 fefa 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 8001398:	6378      	str	r0, [r7, #52]	@ 0x34
 800139a:	e004      	b.n	80013a6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800139c:	f001 fef6 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 80013a0:	4603      	mov	r3, r0
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013a8:	4a23      	ldr	r2, [pc, #140]	@ (8001438 <HAL_InitTick+0xe4>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	0c9b      	lsrs	r3, r3, #18
 80013b0:	3b01      	subs	r3, #1
 80013b2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013b4:	4b21      	ldr	r3, [pc, #132]	@ (800143c <HAL_InitTick+0xe8>)
 80013b6:	4a22      	ldr	r2, [pc, #136]	@ (8001440 <HAL_InitTick+0xec>)
 80013b8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013ba:	4b20      	ldr	r3, [pc, #128]	@ (800143c <HAL_InitTick+0xe8>)
 80013bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013c0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013c2:	4a1e      	ldr	r2, [pc, #120]	@ (800143c <HAL_InitTick+0xe8>)
 80013c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013c6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013c8:	4b1c      	ldr	r3, [pc, #112]	@ (800143c <HAL_InitTick+0xe8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b1b      	ldr	r3, [pc, #108]	@ (800143c <HAL_InitTick+0xe8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d4:	4b19      	ldr	r3, [pc, #100]	@ (800143c <HAL_InitTick+0xe8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80013da:	4818      	ldr	r0, [pc, #96]	@ (800143c <HAL_InitTick+0xe8>)
 80013dc:	f002 fd03 	bl	8003de6 <HAL_TIM_Base_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80013e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d11b      	bne.n	8001426 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013ee:	4813      	ldr	r0, [pc, #76]	@ (800143c <HAL_InitTick+0xe8>)
 80013f0:	f002 fd5a 	bl	8003ea8 <HAL_TIM_Base_Start_IT>
 80013f4:	4603      	mov	r3, r0
 80013f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80013fa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d111      	bne.n	8001426 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001402:	2036      	movs	r0, #54	@ 0x36
 8001404:	f000 faaa 	bl	800195c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b0f      	cmp	r3, #15
 800140c:	d808      	bhi.n	8001420 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800140e:	2200      	movs	r2, #0
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	2036      	movs	r0, #54	@ 0x36
 8001414:	f000 fa86 	bl	8001924 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001418:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <HAL_InitTick+0xf0>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e002      	b.n	8001426 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001426:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800142a:	4618      	mov	r0, r3
 800142c:	3738      	adds	r7, #56	@ 0x38
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	431bde83 	.word	0x431bde83
 800143c:	20000824 	.word	0x20000824
 8001440:	40001000 	.word	0x40001000
 8001444:	20000004 	.word	0x20000004

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <NMI_Handler+0x4>

08001450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <MemManage_Handler+0x4>

08001460 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <UsageFault_Handler+0x4>

08001470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001482:	2020      	movs	r0, #32
 8001484:	f000 fd46 	bl	8001f14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001488:	2040      	movs	r0, #64	@ 0x40
 800148a:	f000 fd43 	bl	8001f14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800148e:	2080      	movs	r0, #128	@ 0x80
 8001490:	f000 fd40 	bl	8001f14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001494:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001498:	f000 fd3c 	bl	8001f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}

080014a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80014a4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80014a8:	f000 fd34 	bl	8001f14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80014ac:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80014b0:	f000 fd30 	bl	8001f14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80014b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014b8:	f000 fd2c 	bl	8001f14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80014bc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80014c0:	f000 fd28 	bl	8001f14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80014c4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80014c8:	f000 fd24 	bl	8001f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014d4:	4802      	ldr	r0, [pc, #8]	@ (80014e0 <TIM6_DAC_IRQHandler+0x10>)
 80014d6:	f002 fd57 	bl	8003f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000824 	.word	0x20000824

080014e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	e00a      	b.n	800150c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014f6:	f3af 8000 	nop.w
 80014fa:	4601      	mov	r1, r0
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	60ba      	str	r2, [r7, #8]
 8001502:	b2ca      	uxtb	r2, r1
 8001504:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbf0      	blt.n	80014f6 <_read+0x12>
  }

  return len;
 8001514:	687b      	ldr	r3, [r7, #4]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	e009      	b.n	8001544 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	60ba      	str	r2, [r7, #8]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	dbf1      	blt.n	8001530 <_write+0x12>
  }
  return len;
 800154c:	687b      	ldr	r3, [r7, #4]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <_close>:

int _close(int file)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800157e:	605a      	str	r2, [r3, #4]
  return 0;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <_isatty>:

int _isatty(int file)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c8:	4a14      	ldr	r2, [pc, #80]	@ (800161c <_sbrk+0x5c>)
 80015ca:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <_sbrk+0x60>)
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d4:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <_sbrk+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015dc:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <_sbrk+0x64>)
 80015de:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <_sbrk+0x68>)
 80015e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e2:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d207      	bcs.n	8001600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f0:	f007 f8be 	bl	8008770 <__errno>
 80015f4:	4603      	mov	r3, r0
 80015f6:	220c      	movs	r2, #12
 80015f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
 80015fe:	e009      	b.n	8001614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001600:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001606:	4b07      	ldr	r3, [pc, #28]	@ (8001624 <_sbrk+0x64>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	4a05      	ldr	r2, [pc, #20]	@ (8001624 <_sbrk+0x64>)
 8001610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001612:	68fb      	ldr	r3, [r7, #12]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20018000 	.word	0x20018000
 8001620:	00000400 	.word	0x00000400
 8001624:	20000870 	.word	0x20000870
 8001628:	200097e0 	.word	0x200097e0

0800162c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <SystemInit+0x20>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001636:	4a05      	ldr	r2, [pc, #20]	@ (800164c <SystemInit+0x20>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001688 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001654:	f7ff ffea 	bl	800162c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001658:	480c      	ldr	r0, [pc, #48]	@ (800168c <LoopForever+0x6>)
  ldr r1, =_edata
 800165a:	490d      	ldr	r1, [pc, #52]	@ (8001690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800165c:	4a0d      	ldr	r2, [pc, #52]	@ (8001694 <LoopForever+0xe>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001670:	4c0a      	ldr	r4, [pc, #40]	@ (800169c <LoopForever+0x16>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167e:	f007 f87d 	bl	800877c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001682:	f7fe ff6d 	bl	8000560 <main>

08001686 <LoopForever>:

LoopForever:
    b LoopForever
 8001686:	e7fe      	b.n	8001686 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001688:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001694:	08008e48 	.word	0x08008e48
  ldr r2, =_sbss
 8001698:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800169c:	200097dc 	.word	0x200097dc

080016a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC1_2_IRQHandler>

080016a2 <_ZN10WiFiModuleC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
#include "wifi_module.h"
#include "stm32l4xx_hal.h" // für HAL Funktionen
extern UART_HandleTypeDef huart1;


WiFiModule::WiFiModule(SPI_HandleTypeDef *hspi, GPIO_TypeDef* CS_GPIO_Port, uint16_t CS_Pin)
 80016a2:	b480      	push	{r7}
 80016a4:	b085      	sub	sp, #20
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	807b      	strh	r3, [r7, #2]
    : m_hspi(hspi), m_CS_GPIO_Port(CS_GPIO_Port), m_CS_Pin(CS_Pin) {}
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	887a      	ldrh	r2, [r7, #2]
 80016c0:	811a      	strh	r2, [r3, #8]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_Z41__static_initialization_and_destruction_0v>:
    int wifi_read_data(uint8_t* buffer, size_t buffer_len, uint32_t timeout) {
        return wifi.readData(buffer, buffer_len, timeout);
    }
    bool wifi_send_command(const char* cmd, uint32_t timeout){
    	return wifi.sendCommand(cmd, timeout);
    }
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
    WiFiModule wifi(&hspi3, GPIOE, GPIO_PIN_0);
 80016d4:	2301      	movs	r3, #1
 80016d6:	4a03      	ldr	r2, [pc, #12]	@ (80016e4 <_Z41__static_initialization_and_destruction_0v+0x14>)
 80016d8:	4903      	ldr	r1, [pc, #12]	@ (80016e8 <_Z41__static_initialization_and_destruction_0v+0x18>)
 80016da:	4804      	ldr	r0, [pc, #16]	@ (80016ec <_Z41__static_initialization_and_destruction_0v+0x1c>)
 80016dc:	f7ff ffe1 	bl	80016a2 <_ZN10WiFiModuleC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
    }
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	48001000 	.word	0x48001000
 80016e8:	200001bc 	.word	0x200001bc
 80016ec:	20000874 	.word	0x20000874

080016f0 <_GLOBAL__sub_I_wifi>:
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	f7ff ffec 	bl	80016d0 <_Z41__static_initialization_and_destruction_0v>
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001704:	2003      	movs	r0, #3
 8001706:	f000 f902 	bl	800190e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800170a:	200f      	movs	r0, #15
 800170c:	f7ff fe22 	bl	8001354 <HAL_InitTick>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	71fb      	strb	r3, [r7, #7]
 800171a:	e001      	b.n	8001720 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800171c:	f7ff fb36 	bl	8000d8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001720:	79fb      	ldrb	r3, [r7, #7]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <HAL_IncTick+0x20>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_IncTick+0x24>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4a04      	ldr	r2, [pc, #16]	@ (8001750 <HAL_IncTick+0x24>)
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000008 	.word	0x20000008
 8001750:	20000880 	.word	0x20000880

08001754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return uwTick;
 8001758:	4b03      	ldr	r3, [pc, #12]	@ (8001768 <HAL_GetTick+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000880 	.word	0x20000880

0800176c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff ffee 	bl	8001754 <HAL_GetTick>
 8001778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001784:	d005      	beq.n	8001792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <HAL_Delay+0x44>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001792:	bf00      	nop
 8001794:	f7ff ffde 	bl	8001754 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d8f7      	bhi.n	8001794 <HAL_Delay+0x28>
  {
  }
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000008 	.word	0x20000008

080017b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c4:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017d0:	4013      	ands	r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e6:	4a04      	ldr	r2, [pc, #16]	@ (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	60d3      	str	r3, [r2, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001800:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <__NVIC_GetPriorityGrouping+0x18>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	f003 0307 	and.w	r3, r3, #7
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	2b00      	cmp	r3, #0
 8001828:	db0b      	blt.n	8001842 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	f003 021f 	and.w	r2, r3, #31
 8001830:	4907      	ldr	r1, [pc, #28]	@ (8001850 <__NVIC_EnableIRQ+0x38>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	2001      	movs	r0, #1
 800183a:	fa00 f202 	lsl.w	r2, r0, r2
 800183e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000e100 	.word	0xe000e100

08001854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	6039      	str	r1, [r7, #0]
 800185e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	2b00      	cmp	r3, #0
 8001866:	db0a      	blt.n	800187e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	490c      	ldr	r1, [pc, #48]	@ (80018a0 <__NVIC_SetPriority+0x4c>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	440b      	add	r3, r1
 8001878:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800187c:	e00a      	b.n	8001894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4908      	ldr	r1, [pc, #32]	@ (80018a4 <__NVIC_SetPriority+0x50>)
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	3b04      	subs	r3, #4
 800188c:	0112      	lsls	r2, r2, #4
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	440b      	add	r3, r1
 8001892:	761a      	strb	r2, [r3, #24]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000e100 	.word	0xe000e100
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	@ 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f1c3 0307 	rsb	r3, r3, #7
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	bf28      	it	cs
 80018c6:	2304      	movcs	r3, #4
 80018c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3304      	adds	r3, #4
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d902      	bls.n	80018d8 <NVIC_EncodePriority+0x30>
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3b03      	subs	r3, #3
 80018d6:	e000      	b.n	80018da <NVIC_EncodePriority+0x32>
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	f04f 32ff 	mov.w	r2, #4294967295
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	401a      	ands	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43d9      	mvns	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	4313      	orrs	r3, r2
         );
}
 8001902:	4618      	mov	r0, r3
 8001904:	3724      	adds	r7, #36	@ 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ff4c 	bl	80017b4 <__NVIC_SetPriorityGrouping>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001936:	f7ff ff61 	bl	80017fc <__NVIC_GetPriorityGrouping>
 800193a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	68b9      	ldr	r1, [r7, #8]
 8001940:	6978      	ldr	r0, [r7, #20]
 8001942:	f7ff ffb1 	bl	80018a8 <NVIC_EncodePriority>
 8001946:	4602      	mov	r2, r0
 8001948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194c:	4611      	mov	r1, r2
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ff80 	bl	8001854 <__NVIC_SetPriority>
}
 8001954:	bf00      	nop
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ff54 	bl	8001818 <__NVIC_EnableIRQ>
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e0ac      	b.n	8001ae4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f8b2 	bl	8001af8 <DFSDM_GetChannelFromInstance>
 8001994:	4603      	mov	r3, r0
 8001996:	4a55      	ldr	r2, [pc, #340]	@ (8001aec <HAL_DFSDM_ChannelInit+0x174>)
 8001998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e09f      	b.n	8001ae4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff fa19 	bl	8000ddc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80019aa:	4b51      	ldr	r3, [pc, #324]	@ (8001af0 <HAL_DFSDM_ChannelInit+0x178>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4a4f      	ldr	r2, [pc, #316]	@ (8001af0 <HAL_DFSDM_ChannelInit+0x178>)
 80019b2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80019b4:	4b4e      	ldr	r3, [pc, #312]	@ (8001af0 <HAL_DFSDM_ChannelInit+0x178>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d125      	bne.n	8001a08 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80019bc:	4b4d      	ldr	r3, [pc, #308]	@ (8001af4 <HAL_DFSDM_ChannelInit+0x17c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a4c      	ldr	r2, [pc, #304]	@ (8001af4 <HAL_DFSDM_ChannelInit+0x17c>)
 80019c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80019c6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80019c8:	4b4a      	ldr	r3, [pc, #296]	@ (8001af4 <HAL_DFSDM_ChannelInit+0x17c>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4948      	ldr	r1, [pc, #288]	@ (8001af4 <HAL_DFSDM_ChannelInit+0x17c>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80019d6:	4b47      	ldr	r3, [pc, #284]	@ (8001af4 <HAL_DFSDM_ChannelInit+0x17c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a46      	ldr	r2, [pc, #280]	@ (8001af4 <HAL_DFSDM_ChannelInit+0x17c>)
 80019dc:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80019e0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	791b      	ldrb	r3, [r3, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d108      	bne.n	80019fc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80019ea:	4b42      	ldr	r3, [pc, #264]	@ (8001af4 <HAL_DFSDM_ChannelInit+0x17c>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	041b      	lsls	r3, r3, #16
 80019f6:	493f      	ldr	r1, [pc, #252]	@ (8001af4 <HAL_DFSDM_ChannelInit+0x17c>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80019fc:	4b3d      	ldr	r3, [pc, #244]	@ (8001af4 <HAL_DFSDM_ChannelInit+0x17c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a3c      	ldr	r2, [pc, #240]	@ (8001af4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a06:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001a16:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6819      	ldr	r1, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a26:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a2c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 020f 	bic.w	r2, r2, #15
 8001a44:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6819      	ldr	r1, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001a6c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6899      	ldr	r1, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f002 0207 	and.w	r2, r2, #7
 8001a98:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6859      	ldr	r1, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ac4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 f810 	bl	8001af8 <DFSDM_GetChannelFromInstance>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	4904      	ldr	r1, [pc, #16]	@ (8001aec <HAL_DFSDM_ChannelInit+0x174>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000888 	.word	0x20000888
 8001af0:	20000884 	.word	0x20000884
 8001af4:	40016000 	.word	0x40016000

08001af8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a1c      	ldr	r2, [pc, #112]	@ (8001b74 <DFSDM_GetChannelFromInstance+0x7c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d102      	bne.n	8001b0e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	e02b      	b.n	8001b66 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a19      	ldr	r2, [pc, #100]	@ (8001b78 <DFSDM_GetChannelFromInstance+0x80>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d102      	bne.n	8001b1c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001b16:	2301      	movs	r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	e024      	b.n	8001b66 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a17      	ldr	r2, [pc, #92]	@ (8001b7c <DFSDM_GetChannelFromInstance+0x84>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d102      	bne.n	8001b2a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001b24:	2302      	movs	r3, #2
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	e01d      	b.n	8001b66 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a14      	ldr	r2, [pc, #80]	@ (8001b80 <DFSDM_GetChannelFromInstance+0x88>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d102      	bne.n	8001b38 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001b32:	2304      	movs	r3, #4
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	e016      	b.n	8001b66 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a12      	ldr	r2, [pc, #72]	@ (8001b84 <DFSDM_GetChannelFromInstance+0x8c>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d102      	bne.n	8001b46 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001b40:	2305      	movs	r3, #5
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	e00f      	b.n	8001b66 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a0f      	ldr	r2, [pc, #60]	@ (8001b88 <DFSDM_GetChannelFromInstance+0x90>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d102      	bne.n	8001b54 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001b4e:	2306      	movs	r3, #6
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	e008      	b.n	8001b66 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a0d      	ldr	r2, [pc, #52]	@ (8001b8c <DFSDM_GetChannelFromInstance+0x94>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d102      	bne.n	8001b62 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001b5c:	2307      	movs	r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	e001      	b.n	8001b66 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001b62:	2303      	movs	r3, #3
 8001b64:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001b66:	68fb      	ldr	r3, [r7, #12]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	40016000 	.word	0x40016000
 8001b78:	40016020 	.word	0x40016020
 8001b7c:	40016040 	.word	0x40016040
 8001b80:	40016080 	.word	0x40016080
 8001b84:	400160a0 	.word	0x400160a0
 8001b88:	400160c0 	.word	0x400160c0
 8001b8c:	400160e0 	.word	0x400160e0

08001b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9e:	e17f      	b.n	8001ea0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 8171 	beq.w	8001e9a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d005      	beq.n	8001bd0 <HAL_GPIO_Init+0x40>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d130      	bne.n	8001c32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c06:	2201      	movs	r2, #1
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	f003 0201 	and.w	r2, r3, #1
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d118      	bne.n	8001c70 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c44:	2201      	movs	r2, #1
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	08db      	lsrs	r3, r3, #3
 8001c5a:	f003 0201 	and.w	r2, r3, #1
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d017      	beq.n	8001cac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d123      	bne.n	8001d00 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	08da      	lsrs	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3208      	adds	r2, #8
 8001cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	220f      	movs	r2, #15
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	6939      	ldr	r1, [r7, #16]
 8001cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0203 	and.w	r2, r3, #3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80ac 	beq.w	8001e9a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d42:	4b5f      	ldr	r3, [pc, #380]	@ (8001ec0 <HAL_GPIO_Init+0x330>)
 8001d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d46:	4a5e      	ldr	r2, [pc, #376]	@ (8001ec0 <HAL_GPIO_Init+0x330>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ec0 <HAL_GPIO_Init+0x330>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d5a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ec4 <HAL_GPIO_Init+0x334>)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	3302      	adds	r3, #2
 8001d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	220f      	movs	r2, #15
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d84:	d025      	beq.n	8001dd2 <HAL_GPIO_Init+0x242>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4f      	ldr	r2, [pc, #316]	@ (8001ec8 <HAL_GPIO_Init+0x338>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d01f      	beq.n	8001dce <HAL_GPIO_Init+0x23e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4e      	ldr	r2, [pc, #312]	@ (8001ecc <HAL_GPIO_Init+0x33c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d019      	beq.n	8001dca <HAL_GPIO_Init+0x23a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4d      	ldr	r2, [pc, #308]	@ (8001ed0 <HAL_GPIO_Init+0x340>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d013      	beq.n	8001dc6 <HAL_GPIO_Init+0x236>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ed4 <HAL_GPIO_Init+0x344>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00d      	beq.n	8001dc2 <HAL_GPIO_Init+0x232>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ed8 <HAL_GPIO_Init+0x348>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d007      	beq.n	8001dbe <HAL_GPIO_Init+0x22e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4a      	ldr	r2, [pc, #296]	@ (8001edc <HAL_GPIO_Init+0x34c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d101      	bne.n	8001dba <HAL_GPIO_Init+0x22a>
 8001db6:	2306      	movs	r3, #6
 8001db8:	e00c      	b.n	8001dd4 <HAL_GPIO_Init+0x244>
 8001dba:	2307      	movs	r3, #7
 8001dbc:	e00a      	b.n	8001dd4 <HAL_GPIO_Init+0x244>
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	e008      	b.n	8001dd4 <HAL_GPIO_Init+0x244>
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x244>
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e004      	b.n	8001dd4 <HAL_GPIO_Init+0x244>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e002      	b.n	8001dd4 <HAL_GPIO_Init+0x244>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_GPIO_Init+0x244>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	f002 0203 	and.w	r2, r2, #3
 8001dda:	0092      	lsls	r2, r2, #2
 8001ddc:	4093      	lsls	r3, r2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001de4:	4937      	ldr	r1, [pc, #220]	@ (8001ec4 <HAL_GPIO_Init+0x334>)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	089b      	lsrs	r3, r3, #2
 8001dea:	3302      	adds	r3, #2
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001df2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee0 <HAL_GPIO_Init+0x350>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e16:	4a32      	ldr	r2, [pc, #200]	@ (8001ee0 <HAL_GPIO_Init+0x350>)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e1c:	4b30      	ldr	r3, [pc, #192]	@ (8001ee0 <HAL_GPIO_Init+0x350>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e40:	4a27      	ldr	r2, [pc, #156]	@ (8001ee0 <HAL_GPIO_Init+0x350>)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e46:	4b26      	ldr	r3, [pc, #152]	@ (8001ee0 <HAL_GPIO_Init+0x350>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e6a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee0 <HAL_GPIO_Init+0x350>)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee0 <HAL_GPIO_Init+0x350>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e94:	4a12      	ldr	r2, [pc, #72]	@ (8001ee0 <HAL_GPIO_Init+0x350>)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f47f ae78 	bne.w	8001ba0 <HAL_GPIO_Init+0x10>
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	371c      	adds	r7, #28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	48000400 	.word	0x48000400
 8001ecc:	48000800 	.word	0x48000800
 8001ed0:	48000c00 	.word	0x48000c00
 8001ed4:	48001000 	.word	0x48001000
 8001ed8:	48001400 	.word	0x48001400
 8001edc:	48001800 	.word	0x48001800
 8001ee0:	40010400 	.word	0x40010400

08001ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	807b      	strh	r3, [r7, #2]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef4:	787b      	ldrb	r3, [r7, #1]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001efa:	887a      	ldrh	r2, [r7, #2]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f00:	e002      	b.n	8001f08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f02:	887a      	ldrh	r2, [r7, #2]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f1e:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f20:	695a      	ldr	r2, [r3, #20]
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d006      	beq.n	8001f38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f2a:	4a05      	ldr	r2, [pc, #20]	@ (8001f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f806 	bl	8001f44 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40010400 	.word	0x40010400

08001f44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e08d      	b.n	8002088 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d106      	bne.n	8001f86 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7fe ff8f 	bl	8000ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2224      	movs	r2, #36	@ 0x24
 8001f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0201 	bic.w	r2, r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001faa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d107      	bne.n	8001fd4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	e006      	b.n	8001fe2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001fe0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d108      	bne.n	8001ffc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	e007      	b.n	800200c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800200a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800201a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800201e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800202e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69d9      	ldr	r1, [r3, #28]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1a      	ldr	r2, [r3, #32]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0201 	orr.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2220      	movs	r2, #32
 8002074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d138      	bne.n	8002118 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e032      	b.n	800211a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2224      	movs	r2, #36	@ 0x24
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80020e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6819      	ldr	r1, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2220      	movs	r2, #32
 8002108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	e000      	b.n	800211a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002118:	2302      	movs	r3, #2
  }
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b20      	cmp	r3, #32
 800213a:	d139      	bne.n	80021b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002146:	2302      	movs	r3, #2
 8002148:	e033      	b.n	80021b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2224      	movs	r2, #36	@ 0x24
 8002156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0201 	bic.w	r2, r2, #1
 8002168:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002178:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	e000      	b.n	80021b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021b0:	2302      	movs	r3, #2
  }
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af02      	add	r7, sp, #8
 80021c4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e101      	b.n	80023d4 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d106      	bne.n	80021ea <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff f819 	bl	800121c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2203      	movs	r2, #3
 80021ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f002 fe8f 	bl	8004f20 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	7c1a      	ldrb	r2, [r3, #16]
 800220a:	f88d 2000 	strb.w	r2, [sp]
 800220e:	3304      	adds	r3, #4
 8002210:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002212:	f002 fe58 	bl	8004ec6 <USB_CoreInit>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0d5      	b.n	80023d4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2100      	movs	r1, #0
 800222e:	4618      	mov	r0, r3
 8002230:	f002 fe87 	bl	8004f42 <USB_SetCurrentMode>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2202      	movs	r2, #2
 800223e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0c6      	b.n	80023d4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002246:	2300      	movs	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]
 800224a:	e04a      	b.n	80022e2 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	3315      	adds	r3, #21
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002260:	7bfa      	ldrb	r2, [r7, #15]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	3314      	adds	r3, #20
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	b298      	uxth	r0, r3
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	332e      	adds	r3, #46	@ 0x2e
 8002288:	4602      	mov	r2, r0
 800228a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	3318      	adds	r3, #24
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	331c      	adds	r3, #28
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	3320      	adds	r3, #32
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022c8:	7bfa      	ldrb	r2, [r7, #15]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	3324      	adds	r3, #36	@ 0x24
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	3301      	adds	r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	791b      	ldrb	r3, [r3, #4]
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d3af      	bcc.n	800224c <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e044      	b.n	800237c <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	3301      	adds	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	791b      	ldrb	r3, [r3, #4]
 8002380:	7bfa      	ldrb	r2, [r7, #15]
 8002382:	429a      	cmp	r2, r3
 8002384:	d3b5      	bcc.n	80022f2 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	7c1a      	ldrb	r2, [r3, #16]
 800238e:	f88d 2000 	strb.w	r2, [sp]
 8002392:	3304      	adds	r3, #4
 8002394:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002396:	f002 fe21 	bl	8004fdc <USB_DevInit>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e013      	b.n	80023d4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	7b1b      	ldrb	r3, [r3, #12]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d102      	bne.n	80023c8 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f80a 	bl	80023dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f002 ffc6 	bl	800535e <USB_DevDisconnect>

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800240a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800240e:	f043 0303 	orr.w	r3, r3, #3
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002428:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a04      	ldr	r2, [pc, #16]	@ (8002440 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800242e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40007000 	.word	0x40007000

08002444 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002448:	4b04      	ldr	r3, [pc, #16]	@ (800245c <HAL_PWREx_GetVoltageRange+0x18>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40007000 	.word	0x40007000

08002460 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800246e:	d130      	bne.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002470:	4b23      	ldr	r3, [pc, #140]	@ (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800247c:	d038      	beq.n	80024f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800247e:	4b20      	ldr	r3, [pc, #128]	@ (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002486:	4a1e      	ldr	r2, [pc, #120]	@ (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002488:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800248c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800248e:	4b1d      	ldr	r3, [pc, #116]	@ (8002504 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2232      	movs	r2, #50	@ 0x32
 8002494:	fb02 f303 	mul.w	r3, r2, r3
 8002498:	4a1b      	ldr	r2, [pc, #108]	@ (8002508 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	0c9b      	lsrs	r3, r3, #18
 80024a0:	3301      	adds	r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a4:	e002      	b.n	80024ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024ac:	4b14      	ldr	r3, [pc, #80]	@ (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024b8:	d102      	bne.n	80024c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f2      	bne.n	80024a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024cc:	d110      	bne.n	80024f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e00f      	b.n	80024f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024de:	d007      	beq.n	80024f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024e0:	4b07      	ldr	r3, [pc, #28]	@ (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024e8:	4a05      	ldr	r2, [pc, #20]	@ (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40007000 	.word	0x40007000
 8002504:	20000000 	.word	0x20000000
 8002508:	431bde83 	.word	0x431bde83

0800250c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002510:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a04      	ldr	r2, [pc, #16]	@ (8002528 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002516:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800251a:	6053      	str	r3, [r2, #4]
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40007000 	.word	0x40007000

0800252c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af02      	add	r7, sp, #8
 8002532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002534:	f7ff f90e 	bl	8001754 <HAL_GetTick>
 8002538:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e063      	b.n	800260c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10b      	bne.n	8002568 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7fe fd01 	bl	8000f60 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800255e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f858 	bl	8002618 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	3b01      	subs	r3, #1
 8002578:	021a      	lsls	r2, r3, #8
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	2120      	movs	r1, #32
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f850 	bl	8002634 <QSPI_WaitFlagStateUntilTimeout>
 8002594:	4603      	mov	r3, r0
 8002596:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002598:	7afb      	ldrb	r3, [r7, #11]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d131      	bne.n	8002602 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80025a8:	f023 0310 	bic.w	r3, r3, #16
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6852      	ldr	r2, [r2, #4]
 80025b0:	0611      	lsls	r1, r2, #24
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68d2      	ldr	r2, [r2, #12]
 80025b6:	4311      	orrs	r1, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	430b      	orrs	r3, r1
 80025be:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	4b13      	ldr	r3, [pc, #76]	@ (8002614 <HAL_QSPI_Init+0xe8>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6912      	ldr	r2, [r2, #16]
 80025ce:	0411      	lsls	r1, r2, #16
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6952      	ldr	r2, [r2, #20]
 80025d4:	4311      	orrs	r1, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6992      	ldr	r2, [r2, #24]
 80025da:	4311      	orrs	r1, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	430b      	orrs	r3, r1
 80025e2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800260a:	7afb      	ldrb	r3, [r7, #11]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	ffe0f8fe 	.word	0xffe0f8fe

08002618 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	4613      	mov	r3, r2
 8002642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002644:	e01a      	b.n	800267c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264c:	d016      	beq.n	800267c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264e:	f7ff f881 	bl	8001754 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	429a      	cmp	r2, r3
 800265c:	d302      	bcc.n	8002664 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10b      	bne.n	800267c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2204      	movs	r2, #4
 8002668:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e00e      	b.n	800269a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	bf14      	ite	ne
 800268a:	2301      	movne	r3, #1
 800268c:	2300      	moveq	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	429a      	cmp	r2, r3
 8002696:	d1d6      	bne.n	8002646 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e3ca      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026b6:	4b97      	ldr	r3, [pc, #604]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 030c 	and.w	r3, r3, #12
 80026be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026c0:	4b94      	ldr	r3, [pc, #592]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 80e4 	beq.w	80028a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <HAL_RCC_OscConfig+0x4a>
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2b0c      	cmp	r3, #12
 80026e2:	f040 808b 	bne.w	80027fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	f040 8087 	bne.w	80027fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026ee:	4b89      	ldr	r3, [pc, #548]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_RCC_OscConfig+0x62>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e3a2      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1a      	ldr	r2, [r3, #32]
 800270a:	4b82      	ldr	r3, [pc, #520]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d004      	beq.n	8002720 <HAL_RCC_OscConfig+0x7c>
 8002716:	4b7f      	ldr	r3, [pc, #508]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800271e:	e005      	b.n	800272c <HAL_RCC_OscConfig+0x88>
 8002720:	4b7c      	ldr	r3, [pc, #496]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 8002722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800272c:	4293      	cmp	r3, r2
 800272e:	d223      	bcs.n	8002778 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fd87 	bl	8003248 <RCC_SetFlashLatencyFromMSIRange>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e383      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002744:	4b73      	ldr	r3, [pc, #460]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a72      	ldr	r2, [pc, #456]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 800274a:	f043 0308 	orr.w	r3, r3, #8
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	4b70      	ldr	r3, [pc, #448]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	496d      	ldr	r1, [pc, #436]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002762:	4b6c      	ldr	r3, [pc, #432]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	4968      	ldr	r1, [pc, #416]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
 8002776:	e025      	b.n	80027c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002778:	4b66      	ldr	r3, [pc, #408]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a65      	ldr	r2, [pc, #404]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 800277e:	f043 0308 	orr.w	r3, r3, #8
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b63      	ldr	r3, [pc, #396]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	4960      	ldr	r1, [pc, #384]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002796:	4b5f      	ldr	r3, [pc, #380]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	495b      	ldr	r1, [pc, #364]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d109      	bne.n	80027c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 fd47 	bl	8003248 <RCC_SetFlashLatencyFromMSIRange>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e343      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027c4:	f000 fc4a 	bl	800305c <HAL_RCC_GetSysClockFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b52      	ldr	r3, [pc, #328]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	4950      	ldr	r1, [pc, #320]	@ (8002918 <HAL_RCC_OscConfig+0x274>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
 80027e0:	4a4e      	ldr	r2, [pc, #312]	@ (800291c <HAL_RCC_OscConfig+0x278>)
 80027e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027e4:	4b4e      	ldr	r3, [pc, #312]	@ (8002920 <HAL_RCC_OscConfig+0x27c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fdb3 	bl	8001354 <HAL_InitTick>
 80027ee:	4603      	mov	r3, r0
 80027f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d052      	beq.n	800289e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	e327      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d032      	beq.n	800286a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002804:	4b43      	ldr	r3, [pc, #268]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a42      	ldr	r2, [pc, #264]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002810:	f7fe ffa0 	bl	8001754 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002818:	f7fe ff9c 	bl	8001754 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e310      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800282a:	4b3a      	ldr	r3, [pc, #232]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002836:	4b37      	ldr	r3, [pc, #220]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a36      	ldr	r2, [pc, #216]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 800283c:	f043 0308 	orr.w	r3, r3, #8
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b34      	ldr	r3, [pc, #208]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	4931      	ldr	r1, [pc, #196]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 8002850:	4313      	orrs	r3, r2
 8002852:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002854:	4b2f      	ldr	r3, [pc, #188]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	492c      	ldr	r1, [pc, #176]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
 8002868:	e01a      	b.n	80028a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800286a:	4b2a      	ldr	r3, [pc, #168]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a29      	ldr	r2, [pc, #164]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 8002870:	f023 0301 	bic.w	r3, r3, #1
 8002874:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002876:	f7fe ff6d 	bl	8001754 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800287e:	f7fe ff69 	bl	8001754 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e2dd      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002890:	4b20      	ldr	r3, [pc, #128]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x1da>
 800289c:	e000      	b.n	80028a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800289e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d074      	beq.n	8002996 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d005      	beq.n	80028be <HAL_RCC_OscConfig+0x21a>
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	2b0c      	cmp	r3, #12
 80028b6:	d10e      	bne.n	80028d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d10b      	bne.n	80028d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028be:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d064      	beq.n	8002994 <HAL_RCC_OscConfig+0x2f0>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d160      	bne.n	8002994 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e2ba      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028de:	d106      	bne.n	80028ee <HAL_RCC_OscConfig+0x24a>
 80028e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 80028e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	e026      	b.n	800293c <HAL_RCC_OscConfig+0x298>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028f6:	d115      	bne.n	8002924 <HAL_RCC_OscConfig+0x280>
 80028f8:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a05      	ldr	r2, [pc, #20]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 80028fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b03      	ldr	r3, [pc, #12]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a02      	ldr	r2, [pc, #8]	@ (8002914 <HAL_RCC_OscConfig+0x270>)
 800290a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	e014      	b.n	800293c <HAL_RCC_OscConfig+0x298>
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000
 8002918:	08008dec 	.word	0x08008dec
 800291c:	20000000 	.word	0x20000000
 8002920:	20000004 	.word	0x20000004
 8002924:	4ba0      	ldr	r3, [pc, #640]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a9f      	ldr	r2, [pc, #636]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 800292a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b9d      	ldr	r3, [pc, #628]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a9c      	ldr	r2, [pc, #624]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002936:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800293a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d013      	beq.n	800296c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7fe ff06 	bl	8001754 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800294c:	f7fe ff02 	bl	8001754 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b64      	cmp	r3, #100	@ 0x64
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e276      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800295e:	4b92      	ldr	r3, [pc, #584]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x2a8>
 800296a:	e014      	b.n	8002996 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe fef2 	bl	8001754 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002974:	f7fe feee 	bl	8001754 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	@ 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e262      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002986:	4b88      	ldr	r3, [pc, #544]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x2d0>
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d060      	beq.n	8002a64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_OscConfig+0x310>
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2b0c      	cmp	r3, #12
 80029ac:	d119      	bne.n	80029e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d116      	bne.n	80029e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029b4:	4b7c      	ldr	r3, [pc, #496]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_RCC_OscConfig+0x328>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e23f      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029cc:	4b76      	ldr	r3, [pc, #472]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	061b      	lsls	r3, r3, #24
 80029da:	4973      	ldr	r1, [pc, #460]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e0:	e040      	b.n	8002a64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d023      	beq.n	8002a32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ea:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a6e      	ldr	r2, [pc, #440]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 80029f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f6:	f7fe fead 	bl	8001754 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fe:	f7fe fea9 	bl	8001754 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e21d      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a10:	4b65      	ldr	r3, [pc, #404]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1c:	4b62      	ldr	r3, [pc, #392]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	061b      	lsls	r3, r3, #24
 8002a2a:	495f      	ldr	r1, [pc, #380]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]
 8002a30:	e018      	b.n	8002a64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a32:	4b5d      	ldr	r3, [pc, #372]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a5c      	ldr	r2, [pc, #368]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3e:	f7fe fe89 	bl	8001754 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a46:	f7fe fe85 	bl	8001754 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e1f9      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a58:	4b53      	ldr	r3, [pc, #332]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f0      	bne.n	8002a46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d03c      	beq.n	8002aea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d01c      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a78:	4b4b      	ldr	r3, [pc, #300]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a7e:	4a4a      	ldr	r2, [pc, #296]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe fe64 	bl	8001754 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a90:	f7fe fe60 	bl	8001754 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e1d4      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aa2:	4b41      	ldr	r3, [pc, #260]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0ef      	beq.n	8002a90 <HAL_RCC_OscConfig+0x3ec>
 8002ab0:	e01b      	b.n	8002aea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ab8:	4a3b      	ldr	r2, [pc, #236]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac2:	f7fe fe47 	bl	8001754 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aca:	f7fe fe43 	bl	8001754 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e1b7      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002adc:	4b32      	ldr	r3, [pc, #200]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1ef      	bne.n	8002aca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 80a6 	beq.w	8002c44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af8:	2300      	movs	r3, #0
 8002afa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002afc:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10d      	bne.n	8002b24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b08:	4b27      	ldr	r3, [pc, #156]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0c:	4a26      	ldr	r2, [pc, #152]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002b0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b12:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b14:	4b24      	ldr	r3, [pc, #144]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b20:	2301      	movs	r3, #1
 8002b22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b24:	4b21      	ldr	r3, [pc, #132]	@ (8002bac <HAL_RCC_OscConfig+0x508>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d118      	bne.n	8002b62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b30:	4b1e      	ldr	r3, [pc, #120]	@ (8002bac <HAL_RCC_OscConfig+0x508>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1d      	ldr	r2, [pc, #116]	@ (8002bac <HAL_RCC_OscConfig+0x508>)
 8002b36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3c:	f7fe fe0a 	bl	8001754 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b44:	f7fe fe06 	bl	8001754 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e17a      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b56:	4b15      	ldr	r3, [pc, #84]	@ (8002bac <HAL_RCC_OscConfig+0x508>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d108      	bne.n	8002b7c <HAL_RCC_OscConfig+0x4d8>
 8002b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b7a:	e029      	b.n	8002bd0 <HAL_RCC_OscConfig+0x52c>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b05      	cmp	r3, #5
 8002b82:	d115      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x50c>
 8002b84:	4b08      	ldr	r3, [pc, #32]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8a:	4a07      	ldr	r2, [pc, #28]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002b8c:	f043 0304 	orr.w	r3, r3, #4
 8002b90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b94:	4b04      	ldr	r3, [pc, #16]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9a:	4a03      	ldr	r2, [pc, #12]	@ (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ba4:	e014      	b.n	8002bd0 <HAL_RCC_OscConfig+0x52c>
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40007000 	.word	0x40007000
 8002bb0:	4b9c      	ldr	r3, [pc, #624]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb6:	4a9b      	ldr	r2, [pc, #620]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bc0:	4b98      	ldr	r3, [pc, #608]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc6:	4a97      	ldr	r2, [pc, #604]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002bc8:	f023 0304 	bic.w	r3, r3, #4
 8002bcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d016      	beq.n	8002c06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd8:	f7fe fdbc 	bl	8001754 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be0:	f7fe fdb8 	bl	8001754 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e12a      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf6:	4b8b      	ldr	r3, [pc, #556]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0ed      	beq.n	8002be0 <HAL_RCC_OscConfig+0x53c>
 8002c04:	e015      	b.n	8002c32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c06:	f7fe fda5 	bl	8001754 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7fe fda1 	bl	8001754 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e113      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c24:	4b7f      	ldr	r3, [pc, #508]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1ed      	bne.n	8002c0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c32:	7ffb      	ldrb	r3, [r7, #31]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d105      	bne.n	8002c44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c38:	4b7a      	ldr	r3, [pc, #488]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3c:	4a79      	ldr	r2, [pc, #484]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002c3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c42:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80fe 	beq.w	8002e4a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	f040 80d0 	bne.w	8002df8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c58:	4b72      	ldr	r3, [pc, #456]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f003 0203 	and.w	r2, r3, #3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d130      	bne.n	8002cce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c76:	3b01      	subs	r3, #1
 8002c78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d127      	bne.n	8002cce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d11f      	bne.n	8002cce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c98:	2a07      	cmp	r2, #7
 8002c9a:	bf14      	ite	ne
 8002c9c:	2201      	movne	r2, #1
 8002c9e:	2200      	moveq	r2, #0
 8002ca0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d113      	bne.n	8002cce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d109      	bne.n	8002cce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d06e      	beq.n	8002dac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	d069      	beq.n	8002da8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cd4:	4b53      	ldr	r3, [pc, #332]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d105      	bne.n	8002cec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ce0:	4b50      	ldr	r3, [pc, #320]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0ad      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cf0:	4b4c      	ldr	r3, [pc, #304]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a4b      	ldr	r2, [pc, #300]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002cf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cfa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cfc:	f7fe fd2a 	bl	8001754 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d04:	f7fe fd26 	bl	8001754 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e09a      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d16:	4b43      	ldr	r3, [pc, #268]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d22:	4b40      	ldr	r3, [pc, #256]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	4b40      	ldr	r3, [pc, #256]	@ (8002e28 <HAL_RCC_OscConfig+0x784>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d32:	3a01      	subs	r2, #1
 8002d34:	0112      	lsls	r2, r2, #4
 8002d36:	4311      	orrs	r1, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d3c:	0212      	lsls	r2, r2, #8
 8002d3e:	4311      	orrs	r1, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d44:	0852      	lsrs	r2, r2, #1
 8002d46:	3a01      	subs	r2, #1
 8002d48:	0552      	lsls	r2, r2, #21
 8002d4a:	4311      	orrs	r1, r2
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d50:	0852      	lsrs	r2, r2, #1
 8002d52:	3a01      	subs	r2, #1
 8002d54:	0652      	lsls	r2, r2, #25
 8002d56:	4311      	orrs	r1, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d5c:	0912      	lsrs	r2, r2, #4
 8002d5e:	0452      	lsls	r2, r2, #17
 8002d60:	430a      	orrs	r2, r1
 8002d62:	4930      	ldr	r1, [pc, #192]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d68:	4b2e      	ldr	r3, [pc, #184]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002d6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d74:	4b2b      	ldr	r3, [pc, #172]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4a2a      	ldr	r2, [pc, #168]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002d7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d80:	f7fe fce8 	bl	8001754 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fe fce4 	bl	8001754 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e058      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d9a:	4b22      	ldr	r3, [pc, #136]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002da6:	e050      	b.n	8002e4a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e04f      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dac:	4b1d      	ldr	r3, [pc, #116]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d148      	bne.n	8002e4a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002db8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a19      	ldr	r2, [pc, #100]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002dbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dc4:	4b17      	ldr	r3, [pc, #92]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	4a16      	ldr	r2, [pc, #88]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002dca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dd0:	f7fe fcc0 	bl	8001754 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7fe fcbc 	bl	8001754 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e030      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dea:	4b0e      	ldr	r3, [pc, #56]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x734>
 8002df6:	e028      	b.n	8002e4a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2b0c      	cmp	r3, #12
 8002dfc:	d023      	beq.n	8002e46 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfe:	4b09      	ldr	r3, [pc, #36]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a08      	ldr	r2, [pc, #32]	@ (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002e04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0a:	f7fe fca3 	bl	8001754 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e10:	e00c      	b.n	8002e2c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e12:	f7fe fc9f 	bl	8001754 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d905      	bls.n	8002e2c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e013      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
 8002e24:	40021000 	.word	0x40021000
 8002e28:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e2c:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <HAL_RCC_OscConfig+0x7b0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ec      	bne.n	8002e12 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e38:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <HAL_RCC_OscConfig+0x7b0>)
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	4905      	ldr	r1, [pc, #20]	@ (8002e54 <HAL_RCC_OscConfig+0x7b0>)
 8002e3e:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_RCC_OscConfig+0x7b4>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	60cb      	str	r3, [r1, #12]
 8002e44:	e001      	b.n	8002e4a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40021000 	.word	0x40021000
 8002e58:	feeefffc 	.word	0xfeeefffc

08002e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0e7      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e70:	4b75      	ldr	r3, [pc, #468]	@ (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d910      	bls.n	8002ea0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7e:	4b72      	ldr	r3, [pc, #456]	@ (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 0207 	bic.w	r2, r3, #7
 8002e86:	4970      	ldr	r1, [pc, #448]	@ (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b6e      	ldr	r3, [pc, #440]	@ (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0cf      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d010      	beq.n	8002ece <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	4b66      	ldr	r3, [pc, #408]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d908      	bls.n	8002ece <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ebc:	4b63      	ldr	r3, [pc, #396]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	4960      	ldr	r1, [pc, #384]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d04c      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee2:	4b5a      	ldr	r3, [pc, #360]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d121      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e0a6      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002efa:	4b54      	ldr	r3, [pc, #336]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d115      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e09a      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f12:	4b4e      	ldr	r3, [pc, #312]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e08e      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f22:	4b4a      	ldr	r3, [pc, #296]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e086      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f32:	4b46      	ldr	r3, [pc, #280]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f023 0203 	bic.w	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4943      	ldr	r1, [pc, #268]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f44:	f7fe fc06 	bl	8001754 <HAL_GetTick>
 8002f48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4c:	f7fe fc02 	bl	8001754 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e06e      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	4b3a      	ldr	r3, [pc, #232]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 020c 	and.w	r2, r3, #12
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d1eb      	bne.n	8002f4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d010      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	4b31      	ldr	r3, [pc, #196]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d208      	bcs.n	8002fa2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b2e      	ldr	r3, [pc, #184]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	492b      	ldr	r1, [pc, #172]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa2:	4b29      	ldr	r3, [pc, #164]	@ (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d210      	bcs.n	8002fd2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb0:	4b25      	ldr	r3, [pc, #148]	@ (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f023 0207 	bic.w	r2, r3, #7
 8002fb8:	4923      	ldr	r1, [pc, #140]	@ (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc0:	4b21      	ldr	r3, [pc, #132]	@ (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e036      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fde:	4b1b      	ldr	r3, [pc, #108]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	4918      	ldr	r1, [pc, #96]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d009      	beq.n	8003010 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ffc:	4b13      	ldr	r3, [pc, #76]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4910      	ldr	r1, [pc, #64]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 800300c:	4313      	orrs	r3, r2
 800300e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003010:	f000 f824 	bl	800305c <HAL_RCC_GetSysClockFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b0d      	ldr	r3, [pc, #52]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	490b      	ldr	r1, [pc, #44]	@ (8003050 <HAL_RCC_ClockConfig+0x1f4>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
 800302c:	4a09      	ldr	r2, [pc, #36]	@ (8003054 <HAL_RCC_ClockConfig+0x1f8>)
 800302e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003030:	4b09      	ldr	r3, [pc, #36]	@ (8003058 <HAL_RCC_ClockConfig+0x1fc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe f98d 	bl	8001354 <HAL_InitTick>
 800303a:	4603      	mov	r3, r0
 800303c:	72fb      	strb	r3, [r7, #11]

  return status;
 800303e:	7afb      	ldrb	r3, [r7, #11]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40022000 	.word	0x40022000
 800304c:	40021000 	.word	0x40021000
 8003050:	08008dec 	.word	0x08008dec
 8003054:	20000000 	.word	0x20000000
 8003058:	20000004 	.word	0x20000004

0800305c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800305c:	b480      	push	{r7}
 800305e:	b089      	sub	sp, #36	@ 0x24
 8003060:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	2300      	movs	r3, #0
 8003068:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800306a:	4b3e      	ldr	r3, [pc, #248]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003074:	4b3b      	ldr	r3, [pc, #236]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x34>
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	2b0c      	cmp	r3, #12
 8003088:	d121      	bne.n	80030ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d11e      	bne.n	80030ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003090:	4b34      	ldr	r3, [pc, #208]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d107      	bne.n	80030ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800309c:	4b31      	ldr	r3, [pc, #196]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 800309e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030a2:	0a1b      	lsrs	r3, r3, #8
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	e005      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10d      	bne.n	80030e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030cc:	e00a      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d102      	bne.n	80030da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030d4:	4b25      	ldr	r3, [pc, #148]	@ (800316c <HAL_RCC_GetSysClockFreq+0x110>)
 80030d6:	61bb      	str	r3, [r7, #24]
 80030d8:	e004      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030e0:	4b23      	ldr	r3, [pc, #140]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x114>)
 80030e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b0c      	cmp	r3, #12
 80030e8:	d134      	bne.n	8003154 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d003      	beq.n	8003102 <HAL_RCC_GetSysClockFreq+0xa6>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d003      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0xac>
 8003100:	e005      	b.n	800310e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003102:	4b1a      	ldr	r3, [pc, #104]	@ (800316c <HAL_RCC_GetSysClockFreq+0x110>)
 8003104:	617b      	str	r3, [r7, #20]
      break;
 8003106:	e005      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003108:	4b19      	ldr	r3, [pc, #100]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x114>)
 800310a:	617b      	str	r3, [r7, #20]
      break;
 800310c:	e002      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	617b      	str	r3, [r7, #20]
      break;
 8003112:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003114:	4b13      	ldr	r3, [pc, #76]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	3301      	adds	r3, #1
 8003120:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003122:	4b10      	ldr	r3, [pc, #64]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	0a1b      	lsrs	r3, r3, #8
 8003128:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	fb03 f202 	mul.w	r2, r3, r2
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800313a:	4b0a      	ldr	r3, [pc, #40]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	0e5b      	lsrs	r3, r3, #25
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	3301      	adds	r3, #1
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003152:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003154:	69bb      	ldr	r3, [r7, #24]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3724      	adds	r7, #36	@ 0x24
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000
 8003168:	08008e04 	.word	0x08008e04
 800316c:	00f42400 	.word	0x00f42400
 8003170:	007a1200 	.word	0x007a1200

08003174 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003178:	4b03      	ldr	r3, [pc, #12]	@ (8003188 <HAL_RCC_GetHCLKFreq+0x14>)
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	20000000 	.word	0x20000000

0800318c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003190:	f7ff fff0 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 8003194:	4602      	mov	r2, r0
 8003196:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	4904      	ldr	r1, [pc, #16]	@ (80031b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031a2:	5ccb      	ldrb	r3, [r1, r3]
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021000 	.word	0x40021000
 80031b4:	08008dfc 	.word	0x08008dfc

080031b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031bc:	f7ff ffda 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	0adb      	lsrs	r3, r3, #11
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4904      	ldr	r1, [pc, #16]	@ (80031e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000
 80031e0:	08008dfc 	.word	0x08008dfc

080031e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	220f      	movs	r2, #15
 80031f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80031f4:	4b12      	ldr	r3, [pc, #72]	@ (8003240 <HAL_RCC_GetClockConfig+0x5c>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 0203 	and.w	r2, r3, #3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003200:	4b0f      	ldr	r3, [pc, #60]	@ (8003240 <HAL_RCC_GetClockConfig+0x5c>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800320c:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <HAL_RCC_GetClockConfig+0x5c>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003218:	4b09      	ldr	r3, [pc, #36]	@ (8003240 <HAL_RCC_GetClockConfig+0x5c>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	08db      	lsrs	r3, r3, #3
 800321e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003226:	4b07      	ldr	r3, [pc, #28]	@ (8003244 <HAL_RCC_GetClockConfig+0x60>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0207 	and.w	r2, r3, #7
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	601a      	str	r2, [r3, #0]
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40021000 	.word	0x40021000
 8003244:	40022000 	.word	0x40022000

08003248 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003250:	2300      	movs	r3, #0
 8003252:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003254:	4b2a      	ldr	r3, [pc, #168]	@ (8003300 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003260:	f7ff f8f0 	bl	8002444 <HAL_PWREx_GetVoltageRange>
 8003264:	6178      	str	r0, [r7, #20]
 8003266:	e014      	b.n	8003292 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003268:	4b25      	ldr	r3, [pc, #148]	@ (8003300 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326c:	4a24      	ldr	r2, [pc, #144]	@ (8003300 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800326e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003272:	6593      	str	r3, [r2, #88]	@ 0x58
 8003274:	4b22      	ldr	r3, [pc, #136]	@ (8003300 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003280:	f7ff f8e0 	bl	8002444 <HAL_PWREx_GetVoltageRange>
 8003284:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003286:	4b1e      	ldr	r3, [pc, #120]	@ (8003300 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328a:	4a1d      	ldr	r2, [pc, #116]	@ (8003300 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800328c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003290:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003298:	d10b      	bne.n	80032b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b80      	cmp	r3, #128	@ 0x80
 800329e:	d919      	bls.n	80032d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80032a4:	d902      	bls.n	80032ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032a6:	2302      	movs	r3, #2
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	e013      	b.n	80032d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032ac:	2301      	movs	r3, #1
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	e010      	b.n	80032d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b80      	cmp	r3, #128	@ 0x80
 80032b6:	d902      	bls.n	80032be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032b8:	2303      	movs	r3, #3
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	e00a      	b.n	80032d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b80      	cmp	r3, #128	@ 0x80
 80032c2:	d102      	bne.n	80032ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032c4:	2302      	movs	r3, #2
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	e004      	b.n	80032d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b70      	cmp	r3, #112	@ 0x70
 80032ce:	d101      	bne.n	80032d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032d0:	2301      	movs	r3, #1
 80032d2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003304 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f023 0207 	bic.w	r2, r3, #7
 80032dc:	4909      	ldr	r1, [pc, #36]	@ (8003304 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032e4:	4b07      	ldr	r3, [pc, #28]	@ (8003304 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d001      	beq.n	80032f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000
 8003304:	40022000 	.word	0x40022000

08003308 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003310:	2300      	movs	r3, #0
 8003312:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003314:	2300      	movs	r3, #0
 8003316:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003320:	2b00      	cmp	r3, #0
 8003322:	d041      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003328:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800332c:	d02a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800332e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003332:	d824      	bhi.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003334:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003338:	d008      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800333a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800333e:	d81e      	bhi.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003344:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003348:	d010      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800334a:	e018      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800334c:	4b86      	ldr	r3, [pc, #536]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4a85      	ldr	r2, [pc, #532]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003356:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003358:	e015      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3304      	adds	r3, #4
 800335e:	2100      	movs	r1, #0
 8003360:	4618      	mov	r0, r3
 8003362:	f000 facb 	bl	80038fc <RCCEx_PLLSAI1_Config>
 8003366:	4603      	mov	r3, r0
 8003368:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800336a:	e00c      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3320      	adds	r3, #32
 8003370:	2100      	movs	r1, #0
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fbb6 	bl	8003ae4 <RCCEx_PLLSAI2_Config>
 8003378:	4603      	mov	r3, r0
 800337a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800337c:	e003      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	74fb      	strb	r3, [r7, #19]
      break;
 8003382:	e000      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003386:	7cfb      	ldrb	r3, [r7, #19]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10b      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800338c:	4b76      	ldr	r3, [pc, #472]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003392:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800339a:	4973      	ldr	r1, [pc, #460]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033a2:	e001      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a4:	7cfb      	ldrb	r3, [r7, #19]
 80033a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d041      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80033bc:	d02a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80033be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80033c2:	d824      	bhi.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033c8:	d008      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033ce:	d81e      	bhi.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80033d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033d8:	d010      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033da:	e018      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033dc:	4b62      	ldr	r3, [pc, #392]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4a61      	ldr	r2, [pc, #388]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033e8:	e015      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3304      	adds	r3, #4
 80033ee:	2100      	movs	r1, #0
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fa83 	bl	80038fc <RCCEx_PLLSAI1_Config>
 80033f6:	4603      	mov	r3, r0
 80033f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033fa:	e00c      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3320      	adds	r3, #32
 8003400:	2100      	movs	r1, #0
 8003402:	4618      	mov	r0, r3
 8003404:	f000 fb6e 	bl	8003ae4 <RCCEx_PLLSAI2_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800340c:	e003      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	74fb      	strb	r3, [r7, #19]
      break;
 8003412:	e000      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003416:	7cfb      	ldrb	r3, [r7, #19]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10b      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800341c:	4b52      	ldr	r3, [pc, #328]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003422:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800342a:	494f      	ldr	r1, [pc, #316]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003432:	e001      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 80a0 	beq.w	8003586 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003446:	2300      	movs	r3, #0
 8003448:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800344a:	4b47      	ldr	r3, [pc, #284]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800345a:	2300      	movs	r3, #0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00d      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003460:	4b41      	ldr	r3, [pc, #260]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003464:	4a40      	ldr	r2, [pc, #256]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800346a:	6593      	str	r3, [r2, #88]	@ 0x58
 800346c:	4b3e      	ldr	r3, [pc, #248]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003478:	2301      	movs	r3, #1
 800347a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800347c:	4b3b      	ldr	r3, [pc, #236]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a3a      	ldr	r2, [pc, #232]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003486:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003488:	f7fe f964 	bl	8001754 <HAL_GetTick>
 800348c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800348e:	e009      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003490:	f7fe f960 	bl	8001754 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d902      	bls.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	74fb      	strb	r3, [r7, #19]
        break;
 80034a2:	e005      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034a4:	4b31      	ldr	r3, [pc, #196]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ef      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80034b0:	7cfb      	ldrb	r3, [r7, #19]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d15c      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034b6:	4b2c      	ldr	r3, [pc, #176]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01f      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d019      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034d4:	4b24      	ldr	r3, [pc, #144]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034e0:	4b21      	ldr	r3, [pc, #132]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e6:	4a20      	ldr	r2, [pc, #128]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003500:	4a19      	ldr	r2, [pc, #100]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d016      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003512:	f7fe f91f 	bl	8001754 <HAL_GetTick>
 8003516:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003518:	e00b      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f7fe f91b 	bl	8001754 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003528:	4293      	cmp	r3, r2
 800352a:	d902      	bls.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	74fb      	strb	r3, [r7, #19]
            break;
 8003530:	e006      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003532:	4b0d      	ldr	r3, [pc, #52]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0ec      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10c      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003546:	4b08      	ldr	r3, [pc, #32]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003556:	4904      	ldr	r1, [pc, #16]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800355e:	e009      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003560:	7cfb      	ldrb	r3, [r7, #19]
 8003562:	74bb      	strb	r3, [r7, #18]
 8003564:	e006      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
 800356c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003570:	7cfb      	ldrb	r3, [r7, #19]
 8003572:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003574:	7c7b      	ldrb	r3, [r7, #17]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d105      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357a:	4b9e      	ldr	r3, [pc, #632]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357e:	4a9d      	ldr	r2, [pc, #628]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003580:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003584:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003592:	4b98      	ldr	r3, [pc, #608]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003598:	f023 0203 	bic.w	r2, r3, #3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a0:	4994      	ldr	r1, [pc, #592]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035b4:	4b8f      	ldr	r3, [pc, #572]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ba:	f023 020c 	bic.w	r2, r3, #12
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c2:	498c      	ldr	r1, [pc, #560]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035d6:	4b87      	ldr	r3, [pc, #540]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e4:	4983      	ldr	r1, [pc, #524]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035f8:	4b7e      	ldr	r3, [pc, #504]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003606:	497b      	ldr	r1, [pc, #492]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0310 	and.w	r3, r3, #16
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800361a:	4b76      	ldr	r3, [pc, #472]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003620:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003628:	4972      	ldr	r1, [pc, #456]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800363c:	4b6d      	ldr	r3, [pc, #436]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003642:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800364a:	496a      	ldr	r1, [pc, #424]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800365e:	4b65      	ldr	r3, [pc, #404]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003664:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366c:	4961      	ldr	r1, [pc, #388]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003680:	4b5c      	ldr	r3, [pc, #368]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003686:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368e:	4959      	ldr	r1, [pc, #356]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036a2:	4b54      	ldr	r3, [pc, #336]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b0:	4950      	ldr	r1, [pc, #320]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036c4:	4b4b      	ldr	r3, [pc, #300]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d2:	4948      	ldr	r1, [pc, #288]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036e6:	4b43      	ldr	r3, [pc, #268]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f4:	493f      	ldr	r1, [pc, #252]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d028      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003708:	4b3a      	ldr	r3, [pc, #232]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800370e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003716:	4937      	ldr	r1, [pc, #220]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003722:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003726:	d106      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003728:	4b32      	ldr	r3, [pc, #200]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4a31      	ldr	r2, [pc, #196]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003732:	60d3      	str	r3, [r2, #12]
 8003734:	e011      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800373a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800373e:	d10c      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3304      	adds	r3, #4
 8003744:	2101      	movs	r1, #1
 8003746:	4618      	mov	r0, r3
 8003748:	f000 f8d8 	bl	80038fc <RCCEx_PLLSAI1_Config>
 800374c:	4603      	mov	r3, r0
 800374e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003756:	7cfb      	ldrb	r3, [r7, #19]
 8003758:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d028      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003766:	4b23      	ldr	r3, [pc, #140]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003774:	491f      	ldr	r1, [pc, #124]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003780:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003784:	d106      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003786:	4b1b      	ldr	r3, [pc, #108]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	4a1a      	ldr	r2, [pc, #104]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003790:	60d3      	str	r3, [r2, #12]
 8003792:	e011      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003798:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800379c:	d10c      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3304      	adds	r3, #4
 80037a2:	2101      	movs	r1, #1
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 f8a9 	bl	80038fc <RCCEx_PLLSAI1_Config>
 80037aa:	4603      	mov	r3, r0
 80037ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ae:	7cfb      	ldrb	r3, [r7, #19]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d02b      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037c4:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d2:	4908      	ldr	r1, [pc, #32]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037e2:	d109      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037e4:	4b03      	ldr	r3, [pc, #12]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4a02      	ldr	r2, [pc, #8]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037ee:	60d3      	str	r3, [r2, #12]
 80037f0:	e014      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037f2:	bf00      	nop
 80037f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003800:	d10c      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3304      	adds	r3, #4
 8003806:	2101      	movs	r1, #1
 8003808:	4618      	mov	r0, r3
 800380a:	f000 f877 	bl	80038fc <RCCEx_PLLSAI1_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003812:	7cfb      	ldrb	r3, [r7, #19]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d02f      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003828:	4b2b      	ldr	r3, [pc, #172]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003836:	4928      	ldr	r1, [pc, #160]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003842:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003846:	d10d      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3304      	adds	r3, #4
 800384c:	2102      	movs	r1, #2
 800384e:	4618      	mov	r0, r3
 8003850:	f000 f854 	bl	80038fc <RCCEx_PLLSAI1_Config>
 8003854:	4603      	mov	r3, r0
 8003856:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003858:	7cfb      	ldrb	r3, [r7, #19]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d014      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800385e:	7cfb      	ldrb	r3, [r7, #19]
 8003860:	74bb      	strb	r3, [r7, #18]
 8003862:	e011      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800386c:	d10c      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3320      	adds	r3, #32
 8003872:	2102      	movs	r1, #2
 8003874:	4618      	mov	r0, r3
 8003876:	f000 f935 	bl	8003ae4 <RCCEx_PLLSAI2_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800387e:	7cfb      	ldrb	r3, [r7, #19]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003884:	7cfb      	ldrb	r3, [r7, #19]
 8003886:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003894:	4b10      	ldr	r3, [pc, #64]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038a2:	490d      	ldr	r1, [pc, #52]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00b      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038b6:	4b08      	ldr	r3, [pc, #32]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038c6:	4904      	ldr	r1, [pc, #16]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000

080038dc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80038e0:	4b05      	ldr	r3, [pc, #20]	@ (80038f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a04      	ldr	r2, [pc, #16]	@ (80038f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038e6:	f043 0304 	orr.w	r3, r3, #4
 80038ea:	6013      	str	r3, [r2, #0]
}
 80038ec:	bf00      	nop
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000

080038fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800390a:	4b75      	ldr	r3, [pc, #468]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d018      	beq.n	8003948 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003916:	4b72      	ldr	r3, [pc, #456]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f003 0203 	and.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d10d      	bne.n	8003942 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
       ||
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800392e:	4b6c      	ldr	r3, [pc, #432]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	091b      	lsrs	r3, r3, #4
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
       ||
 800393e:	429a      	cmp	r2, r3
 8003940:	d047      	beq.n	80039d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
 8003946:	e044      	b.n	80039d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b03      	cmp	r3, #3
 800394e:	d018      	beq.n	8003982 <RCCEx_PLLSAI1_Config+0x86>
 8003950:	2b03      	cmp	r3, #3
 8003952:	d825      	bhi.n	80039a0 <RCCEx_PLLSAI1_Config+0xa4>
 8003954:	2b01      	cmp	r3, #1
 8003956:	d002      	beq.n	800395e <RCCEx_PLLSAI1_Config+0x62>
 8003958:	2b02      	cmp	r3, #2
 800395a:	d009      	beq.n	8003970 <RCCEx_PLLSAI1_Config+0x74>
 800395c:	e020      	b.n	80039a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800395e:	4b60      	ldr	r3, [pc, #384]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d11d      	bne.n	80039a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800396e:	e01a      	b.n	80039a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003970:	4b5b      	ldr	r3, [pc, #364]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003978:	2b00      	cmp	r3, #0
 800397a:	d116      	bne.n	80039aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003980:	e013      	b.n	80039aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003982:	4b57      	ldr	r3, [pc, #348]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10f      	bne.n	80039ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800398e:	4b54      	ldr	r3, [pc, #336]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800399e:	e006      	b.n	80039ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
      break;
 80039a4:	e004      	b.n	80039b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039a6:	bf00      	nop
 80039a8:	e002      	b.n	80039b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039aa:	bf00      	nop
 80039ac:	e000      	b.n	80039b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10d      	bne.n	80039d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039b6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6819      	ldr	r1, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	430b      	orrs	r3, r1
 80039cc:	4944      	ldr	r1, [pc, #272]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d17d      	bne.n	8003ad4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039d8:	4b41      	ldr	r3, [pc, #260]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a40      	ldr	r2, [pc, #256]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e4:	f7fd feb6 	bl	8001754 <HAL_GetTick>
 80039e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039ea:	e009      	b.n	8003a00 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039ec:	f7fd feb2 	bl	8001754 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d902      	bls.n	8003a00 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	73fb      	strb	r3, [r7, #15]
        break;
 80039fe:	e005      	b.n	8003a0c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a00:	4b37      	ldr	r3, [pc, #220]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1ef      	bne.n	80039ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d160      	bne.n	8003ad4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d111      	bne.n	8003a3c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a18:	4b31      	ldr	r3, [pc, #196]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003a20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6892      	ldr	r2, [r2, #8]
 8003a28:	0211      	lsls	r1, r2, #8
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	68d2      	ldr	r2, [r2, #12]
 8003a2e:	0912      	lsrs	r2, r2, #4
 8003a30:	0452      	lsls	r2, r2, #17
 8003a32:	430a      	orrs	r2, r1
 8003a34:	492a      	ldr	r1, [pc, #168]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	610b      	str	r3, [r1, #16]
 8003a3a:	e027      	b.n	8003a8c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d112      	bne.n	8003a68 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a42:	4b27      	ldr	r3, [pc, #156]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003a4a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6892      	ldr	r2, [r2, #8]
 8003a52:	0211      	lsls	r1, r2, #8
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6912      	ldr	r2, [r2, #16]
 8003a58:	0852      	lsrs	r2, r2, #1
 8003a5a:	3a01      	subs	r2, #1
 8003a5c:	0552      	lsls	r2, r2, #21
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	491f      	ldr	r1, [pc, #124]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	610b      	str	r3, [r1, #16]
 8003a66:	e011      	b.n	8003a8c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a68:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a70:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6892      	ldr	r2, [r2, #8]
 8003a78:	0211      	lsls	r1, r2, #8
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6952      	ldr	r2, [r2, #20]
 8003a7e:	0852      	lsrs	r2, r2, #1
 8003a80:	3a01      	subs	r2, #1
 8003a82:	0652      	lsls	r2, r2, #25
 8003a84:	430a      	orrs	r2, r1
 8003a86:	4916      	ldr	r1, [pc, #88]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a8c:	4b14      	ldr	r3, [pc, #80]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a13      	ldr	r2, [pc, #76]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a98:	f7fd fe5c 	bl	8001754 <HAL_GetTick>
 8003a9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a9e:	e009      	b.n	8003ab4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aa0:	f7fd fe58 	bl	8001754 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d902      	bls.n	8003ab4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ab2:	e005      	b.n	8003ac0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0ef      	beq.n	8003aa0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ac6:	4b06      	ldr	r3, [pc, #24]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	4904      	ldr	r1, [pc, #16]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40021000 	.word	0x40021000

08003ae4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003af2:	4b6a      	ldr	r3, [pc, #424]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d018      	beq.n	8003b30 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003afe:	4b67      	ldr	r3, [pc, #412]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f003 0203 	and.w	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d10d      	bne.n	8003b2a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
       ||
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b16:	4b61      	ldr	r3, [pc, #388]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	091b      	lsrs	r3, r3, #4
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
       ||
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d047      	beq.n	8003bba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
 8003b2e:	e044      	b.n	8003bba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d018      	beq.n	8003b6a <RCCEx_PLLSAI2_Config+0x86>
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	d825      	bhi.n	8003b88 <RCCEx_PLLSAI2_Config+0xa4>
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d002      	beq.n	8003b46 <RCCEx_PLLSAI2_Config+0x62>
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d009      	beq.n	8003b58 <RCCEx_PLLSAI2_Config+0x74>
 8003b44:	e020      	b.n	8003b88 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b46:	4b55      	ldr	r3, [pc, #340]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d11d      	bne.n	8003b8e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b56:	e01a      	b.n	8003b8e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b58:	4b50      	ldr	r3, [pc, #320]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d116      	bne.n	8003b92 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b68:	e013      	b.n	8003b92 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b6a:	4b4c      	ldr	r3, [pc, #304]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10f      	bne.n	8003b96 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b76:	4b49      	ldr	r3, [pc, #292]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b86:	e006      	b.n	8003b96 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b8c:	e004      	b.n	8003b98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b8e:	bf00      	nop
 8003b90:	e002      	b.n	8003b98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b92:	bf00      	nop
 8003b94:	e000      	b.n	8003b98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b96:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10d      	bne.n	8003bba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6819      	ldr	r1, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	4939      	ldr	r1, [pc, #228]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d167      	bne.n	8003c90 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003bc0:	4b36      	ldr	r3, [pc, #216]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a35      	ldr	r2, [pc, #212]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bcc:	f7fd fdc2 	bl	8001754 <HAL_GetTick>
 8003bd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bd2:	e009      	b.n	8003be8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bd4:	f7fd fdbe 	bl	8001754 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d902      	bls.n	8003be8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	73fb      	strb	r3, [r7, #15]
        break;
 8003be6:	e005      	b.n	8003bf4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003be8:	4b2c      	ldr	r3, [pc, #176]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1ef      	bne.n	8003bd4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d14a      	bne.n	8003c90 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d111      	bne.n	8003c24 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c00:	4b26      	ldr	r3, [pc, #152]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003c08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6892      	ldr	r2, [r2, #8]
 8003c10:	0211      	lsls	r1, r2, #8
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	68d2      	ldr	r2, [r2, #12]
 8003c16:	0912      	lsrs	r2, r2, #4
 8003c18:	0452      	lsls	r2, r2, #17
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	491f      	ldr	r1, [pc, #124]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	614b      	str	r3, [r1, #20]
 8003c22:	e011      	b.n	8003c48 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c24:	4b1d      	ldr	r3, [pc, #116]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003c2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6892      	ldr	r2, [r2, #8]
 8003c34:	0211      	lsls	r1, r2, #8
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6912      	ldr	r2, [r2, #16]
 8003c3a:	0852      	lsrs	r2, r2, #1
 8003c3c:	3a01      	subs	r2, #1
 8003c3e:	0652      	lsls	r2, r2, #25
 8003c40:	430a      	orrs	r2, r1
 8003c42:	4916      	ldr	r1, [pc, #88]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c48:	4b14      	ldr	r3, [pc, #80]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a13      	ldr	r2, [pc, #76]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c54:	f7fd fd7e 	bl	8001754 <HAL_GetTick>
 8003c58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c5a:	e009      	b.n	8003c70 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c5c:	f7fd fd7a 	bl	8001754 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d902      	bls.n	8003c70 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	73fb      	strb	r3, [r7, #15]
          break;
 8003c6e:	e005      	b.n	8003c7c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c70:	4b0a      	ldr	r3, [pc, #40]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0ef      	beq.n	8003c5c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c82:	4b06      	ldr	r3, [pc, #24]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	4904      	ldr	r1, [pc, #16]	@ (8003c9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000

08003ca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e095      	b.n	8003dde <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d108      	bne.n	8003ccc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cc2:	d009      	beq.n	8003cd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	61da      	str	r2, [r3, #28]
 8003cca:	e005      	b.n	8003cd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d106      	bne.n	8003cf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fd f978 	bl	8000fe8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d18:	d902      	bls.n	8003d20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	e002      	b.n	8003d26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003d2e:	d007      	beq.n	8003d40 <HAL_SPI_Init+0xa0>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d38:	d002      	beq.n	8003d40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d82:	ea42 0103 	orr.w	r1, r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	0c1b      	lsrs	r3, r3, #16
 8003d9c:	f003 0204 	and.w	r2, r3, #4
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	f003 0310 	and.w	r3, r3, #16
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003dbc:	ea42 0103 	orr.w	r1, r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e049      	b.n	8003e8c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d106      	bne.n	8003e12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f841 	bl	8003e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2202      	movs	r2, #2
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3304      	adds	r3, #4
 8003e22:	4619      	mov	r1, r3
 8003e24:	4610      	mov	r0, r2
 8003e26:	f000 f9df 	bl	80041e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d001      	beq.n	8003ec0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e04f      	b.n	8003f60 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a23      	ldr	r2, [pc, #140]	@ (8003f6c <HAL_TIM_Base_Start_IT+0xc4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d01d      	beq.n	8003f1e <HAL_TIM_Base_Start_IT+0x76>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eea:	d018      	beq.n	8003f1e <HAL_TIM_Base_Start_IT+0x76>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8003f70 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_TIM_Base_Start_IT+0x76>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a1e      	ldr	r2, [pc, #120]	@ (8003f74 <HAL_TIM_Base_Start_IT+0xcc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00e      	beq.n	8003f1e <HAL_TIM_Base_Start_IT+0x76>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1c      	ldr	r2, [pc, #112]	@ (8003f78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d009      	beq.n	8003f1e <HAL_TIM_Base_Start_IT+0x76>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8003f7c <HAL_TIM_Base_Start_IT+0xd4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d004      	beq.n	8003f1e <HAL_TIM_Base_Start_IT+0x76>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a19      	ldr	r2, [pc, #100]	@ (8003f80 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d115      	bne.n	8003f4a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	4b17      	ldr	r3, [pc, #92]	@ (8003f84 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b06      	cmp	r3, #6
 8003f2e:	d015      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0xb4>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f36:	d011      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f48:	e008      	b.n	8003f5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 0201 	orr.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	e000      	b.n	8003f5e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40000400 	.word	0x40000400
 8003f74:	40000800 	.word	0x40000800
 8003f78:	40000c00 	.word	0x40000c00
 8003f7c:	40013400 	.word	0x40013400
 8003f80:	40014000 	.word	0x40014000
 8003f84:	00010007 	.word	0x00010007

08003f88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d020      	beq.n	8003fec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01b      	beq.n	8003fec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0202 	mvn.w	r2, #2
 8003fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f8e9 	bl	80041aa <HAL_TIM_IC_CaptureCallback>
 8003fd8:	e005      	b.n	8003fe6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f8db 	bl	8004196 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f8ec 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d020      	beq.n	8004038 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01b      	beq.n	8004038 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0204 	mvn.w	r2, #4
 8004008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2202      	movs	r2, #2
 800400e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f8c3 	bl	80041aa <HAL_TIM_IC_CaptureCallback>
 8004024:	e005      	b.n	8004032 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f8b5 	bl	8004196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f8c6 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d020      	beq.n	8004084 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01b      	beq.n	8004084 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0208 	mvn.w	r2, #8
 8004054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2204      	movs	r2, #4
 800405a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f89d 	bl	80041aa <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f88f 	bl	8004196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f8a0 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b00      	cmp	r3, #0
 800408c:	d020      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b00      	cmp	r3, #0
 8004096:	d01b      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0210 	mvn.w	r2, #16
 80040a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2208      	movs	r2, #8
 80040a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f877 	bl	80041aa <HAL_TIM_IC_CaptureCallback>
 80040bc:	e005      	b.n	80040ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f869 	bl	8004196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f87a 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00c      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d007      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0201 	mvn.w	r2, #1
 80040ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fc fe34 	bl	8000d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d104      	bne.n	8004108 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00c      	beq.n	8004122 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800411a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f913 	bl	8004348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00c      	beq.n	8004146 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800413e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f90b 	bl	800435c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00c      	beq.n	800416a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d007      	beq.n	800416a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f834 	bl	80041d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00c      	beq.n	800418e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b00      	cmp	r3, #0
 800417c:	d007      	beq.n	800418e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f06f 0220 	mvn.w	r2, #32
 8004186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f8d3 	bl	8004334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800418e:	bf00      	nop
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a46      	ldr	r2, [pc, #280]	@ (8004314 <TIM_Base_SetConfig+0x12c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d013      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004206:	d00f      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a43      	ldr	r2, [pc, #268]	@ (8004318 <TIM_Base_SetConfig+0x130>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00b      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a42      	ldr	r2, [pc, #264]	@ (800431c <TIM_Base_SetConfig+0x134>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d007      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a41      	ldr	r2, [pc, #260]	@ (8004320 <TIM_Base_SetConfig+0x138>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d003      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a40      	ldr	r2, [pc, #256]	@ (8004324 <TIM_Base_SetConfig+0x13c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d108      	bne.n	800423a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800422e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a35      	ldr	r2, [pc, #212]	@ (8004314 <TIM_Base_SetConfig+0x12c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d01f      	beq.n	8004282 <TIM_Base_SetConfig+0x9a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004248:	d01b      	beq.n	8004282 <TIM_Base_SetConfig+0x9a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a32      	ldr	r2, [pc, #200]	@ (8004318 <TIM_Base_SetConfig+0x130>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d017      	beq.n	8004282 <TIM_Base_SetConfig+0x9a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a31      	ldr	r2, [pc, #196]	@ (800431c <TIM_Base_SetConfig+0x134>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d013      	beq.n	8004282 <TIM_Base_SetConfig+0x9a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a30      	ldr	r2, [pc, #192]	@ (8004320 <TIM_Base_SetConfig+0x138>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00f      	beq.n	8004282 <TIM_Base_SetConfig+0x9a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a2f      	ldr	r2, [pc, #188]	@ (8004324 <TIM_Base_SetConfig+0x13c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00b      	beq.n	8004282 <TIM_Base_SetConfig+0x9a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a2e      	ldr	r2, [pc, #184]	@ (8004328 <TIM_Base_SetConfig+0x140>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d007      	beq.n	8004282 <TIM_Base_SetConfig+0x9a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a2d      	ldr	r2, [pc, #180]	@ (800432c <TIM_Base_SetConfig+0x144>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d003      	beq.n	8004282 <TIM_Base_SetConfig+0x9a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a2c      	ldr	r2, [pc, #176]	@ (8004330 <TIM_Base_SetConfig+0x148>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d108      	bne.n	8004294 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a16      	ldr	r2, [pc, #88]	@ (8004314 <TIM_Base_SetConfig+0x12c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d00f      	beq.n	80042e0 <TIM_Base_SetConfig+0xf8>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a18      	ldr	r2, [pc, #96]	@ (8004324 <TIM_Base_SetConfig+0x13c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00b      	beq.n	80042e0 <TIM_Base_SetConfig+0xf8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a17      	ldr	r2, [pc, #92]	@ (8004328 <TIM_Base_SetConfig+0x140>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d007      	beq.n	80042e0 <TIM_Base_SetConfig+0xf8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a16      	ldr	r2, [pc, #88]	@ (800432c <TIM_Base_SetConfig+0x144>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_Base_SetConfig+0xf8>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a15      	ldr	r2, [pc, #84]	@ (8004330 <TIM_Base_SetConfig+0x148>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d103      	bne.n	80042e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d105      	bne.n	8004306 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f023 0201 	bic.w	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	611a      	str	r2, [r3, #16]
  }
}
 8004306:	bf00      	nop
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40000400 	.word	0x40000400
 800431c:	40000800 	.word	0x40000800
 8004320:	40000c00 	.word	0x40000c00
 8004324:	40013400 	.word	0x40013400
 8004328:	40014000 	.word	0x40014000
 800432c:	40014400 	.word	0x40014400
 8004330:	40014800 	.word	0x40014800

08004334 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e040      	b.n	8004404 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fc fe9e 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2224      	movs	r2, #36	@ 0x24
 800439c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0201 	bic.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fb6a 	bl	8004a90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f8af 	bl	8004520 <UART_SetConfig>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e01b      	b.n	8004404 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fbe9 	bl	8004bd4 <UART_CheckIdleState>
 8004402:	4603      	mov	r3, r0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	@ 0x28
 8004410:	af02      	add	r7, sp, #8
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004420:	2b20      	cmp	r3, #32
 8004422:	d177      	bne.n	8004514 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <HAL_UART_Transmit+0x24>
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e070      	b.n	8004516 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2221      	movs	r2, #33	@ 0x21
 8004440:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004442:	f7fd f987 	bl	8001754 <HAL_GetTick>
 8004446:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	88fa      	ldrh	r2, [r7, #6]
 800444c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	88fa      	ldrh	r2, [r7, #6]
 8004454:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004460:	d108      	bne.n	8004474 <HAL_UART_Transmit+0x68>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d104      	bne.n	8004474 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	e003      	b.n	800447c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004478:	2300      	movs	r3, #0
 800447a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800447c:	e02f      	b.n	80044de <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2200      	movs	r2, #0
 8004486:	2180      	movs	r1, #128	@ 0x80
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 fc4b 	bl	8004d24 <UART_WaitOnFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d004      	beq.n	800449e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e03b      	b.n	8004516 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10b      	bne.n	80044bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	881a      	ldrh	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044b0:	b292      	uxth	r2, r2
 80044b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	3302      	adds	r3, #2
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	e007      	b.n	80044cc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	781a      	ldrb	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	3301      	adds	r3, #1
 80044ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1c9      	bne.n	800447e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2200      	movs	r2, #0
 80044f2:	2140      	movs	r1, #64	@ 0x40
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 fc15 	bl	8004d24 <UART_WaitOnFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d004      	beq.n	800450a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e005      	b.n	8004516 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	e000      	b.n	8004516 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004514:	2302      	movs	r3, #2
  }
}
 8004516:	4618      	mov	r0, r3
 8004518:	3720      	adds	r7, #32
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004524:	b08a      	sub	sp, #40	@ 0x28
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	431a      	orrs	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	431a      	orrs	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	4313      	orrs	r3, r2
 8004546:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4ba4      	ldr	r3, [pc, #656]	@ (80047e0 <UART_SetConfig+0x2c0>)
 8004550:	4013      	ands	r3, r2
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	6812      	ldr	r2, [r2, #0]
 8004556:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004558:	430b      	orrs	r3, r1
 800455a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a99      	ldr	r2, [pc, #612]	@ (80047e4 <UART_SetConfig+0x2c4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d004      	beq.n	800458c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004588:	4313      	orrs	r3, r2
 800458a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800459c:	430a      	orrs	r2, r1
 800459e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a90      	ldr	r2, [pc, #576]	@ (80047e8 <UART_SetConfig+0x2c8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d126      	bne.n	80045f8 <UART_SetConfig+0xd8>
 80045aa:	4b90      	ldr	r3, [pc, #576]	@ (80047ec <UART_SetConfig+0x2cc>)
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d81b      	bhi.n	80045f0 <UART_SetConfig+0xd0>
 80045b8:	a201      	add	r2, pc, #4	@ (adr r2, 80045c0 <UART_SetConfig+0xa0>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045d1 	.word	0x080045d1
 80045c4:	080045e1 	.word	0x080045e1
 80045c8:	080045d9 	.word	0x080045d9
 80045cc:	080045e9 	.word	0x080045e9
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045d6:	e116      	b.n	8004806 <UART_SetConfig+0x2e6>
 80045d8:	2302      	movs	r3, #2
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045de:	e112      	b.n	8004806 <UART_SetConfig+0x2e6>
 80045e0:	2304      	movs	r3, #4
 80045e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045e6:	e10e      	b.n	8004806 <UART_SetConfig+0x2e6>
 80045e8:	2308      	movs	r3, #8
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ee:	e10a      	b.n	8004806 <UART_SetConfig+0x2e6>
 80045f0:	2310      	movs	r3, #16
 80045f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045f6:	e106      	b.n	8004806 <UART_SetConfig+0x2e6>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a7c      	ldr	r2, [pc, #496]	@ (80047f0 <UART_SetConfig+0x2d0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d138      	bne.n	8004674 <UART_SetConfig+0x154>
 8004602:	4b7a      	ldr	r3, [pc, #488]	@ (80047ec <UART_SetConfig+0x2cc>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004608:	f003 030c 	and.w	r3, r3, #12
 800460c:	2b0c      	cmp	r3, #12
 800460e:	d82d      	bhi.n	800466c <UART_SetConfig+0x14c>
 8004610:	a201      	add	r2, pc, #4	@ (adr r2, 8004618 <UART_SetConfig+0xf8>)
 8004612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004616:	bf00      	nop
 8004618:	0800464d 	.word	0x0800464d
 800461c:	0800466d 	.word	0x0800466d
 8004620:	0800466d 	.word	0x0800466d
 8004624:	0800466d 	.word	0x0800466d
 8004628:	0800465d 	.word	0x0800465d
 800462c:	0800466d 	.word	0x0800466d
 8004630:	0800466d 	.word	0x0800466d
 8004634:	0800466d 	.word	0x0800466d
 8004638:	08004655 	.word	0x08004655
 800463c:	0800466d 	.word	0x0800466d
 8004640:	0800466d 	.word	0x0800466d
 8004644:	0800466d 	.word	0x0800466d
 8004648:	08004665 	.word	0x08004665
 800464c:	2300      	movs	r3, #0
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004652:	e0d8      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004654:	2302      	movs	r3, #2
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800465a:	e0d4      	b.n	8004806 <UART_SetConfig+0x2e6>
 800465c:	2304      	movs	r3, #4
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004662:	e0d0      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004664:	2308      	movs	r3, #8
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800466a:	e0cc      	b.n	8004806 <UART_SetConfig+0x2e6>
 800466c:	2310      	movs	r3, #16
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004672:	e0c8      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a5e      	ldr	r2, [pc, #376]	@ (80047f4 <UART_SetConfig+0x2d4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d125      	bne.n	80046ca <UART_SetConfig+0x1aa>
 800467e:	4b5b      	ldr	r3, [pc, #364]	@ (80047ec <UART_SetConfig+0x2cc>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004684:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004688:	2b30      	cmp	r3, #48	@ 0x30
 800468a:	d016      	beq.n	80046ba <UART_SetConfig+0x19a>
 800468c:	2b30      	cmp	r3, #48	@ 0x30
 800468e:	d818      	bhi.n	80046c2 <UART_SetConfig+0x1a2>
 8004690:	2b20      	cmp	r3, #32
 8004692:	d00a      	beq.n	80046aa <UART_SetConfig+0x18a>
 8004694:	2b20      	cmp	r3, #32
 8004696:	d814      	bhi.n	80046c2 <UART_SetConfig+0x1a2>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <UART_SetConfig+0x182>
 800469c:	2b10      	cmp	r3, #16
 800469e:	d008      	beq.n	80046b2 <UART_SetConfig+0x192>
 80046a0:	e00f      	b.n	80046c2 <UART_SetConfig+0x1a2>
 80046a2:	2300      	movs	r3, #0
 80046a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046a8:	e0ad      	b.n	8004806 <UART_SetConfig+0x2e6>
 80046aa:	2302      	movs	r3, #2
 80046ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b0:	e0a9      	b.n	8004806 <UART_SetConfig+0x2e6>
 80046b2:	2304      	movs	r3, #4
 80046b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b8:	e0a5      	b.n	8004806 <UART_SetConfig+0x2e6>
 80046ba:	2308      	movs	r3, #8
 80046bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c0:	e0a1      	b.n	8004806 <UART_SetConfig+0x2e6>
 80046c2:	2310      	movs	r3, #16
 80046c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c8:	e09d      	b.n	8004806 <UART_SetConfig+0x2e6>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a4a      	ldr	r2, [pc, #296]	@ (80047f8 <UART_SetConfig+0x2d8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d125      	bne.n	8004720 <UART_SetConfig+0x200>
 80046d4:	4b45      	ldr	r3, [pc, #276]	@ (80047ec <UART_SetConfig+0x2cc>)
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80046de:	2bc0      	cmp	r3, #192	@ 0xc0
 80046e0:	d016      	beq.n	8004710 <UART_SetConfig+0x1f0>
 80046e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80046e4:	d818      	bhi.n	8004718 <UART_SetConfig+0x1f8>
 80046e6:	2b80      	cmp	r3, #128	@ 0x80
 80046e8:	d00a      	beq.n	8004700 <UART_SetConfig+0x1e0>
 80046ea:	2b80      	cmp	r3, #128	@ 0x80
 80046ec:	d814      	bhi.n	8004718 <UART_SetConfig+0x1f8>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <UART_SetConfig+0x1d8>
 80046f2:	2b40      	cmp	r3, #64	@ 0x40
 80046f4:	d008      	beq.n	8004708 <UART_SetConfig+0x1e8>
 80046f6:	e00f      	b.n	8004718 <UART_SetConfig+0x1f8>
 80046f8:	2300      	movs	r3, #0
 80046fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046fe:	e082      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004700:	2302      	movs	r3, #2
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004706:	e07e      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004708:	2304      	movs	r3, #4
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800470e:	e07a      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004710:	2308      	movs	r3, #8
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004716:	e076      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004718:	2310      	movs	r3, #16
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800471e:	e072      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a35      	ldr	r2, [pc, #212]	@ (80047fc <UART_SetConfig+0x2dc>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d12a      	bne.n	8004780 <UART_SetConfig+0x260>
 800472a:	4b30      	ldr	r3, [pc, #192]	@ (80047ec <UART_SetConfig+0x2cc>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004730:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004734:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004738:	d01a      	beq.n	8004770 <UART_SetConfig+0x250>
 800473a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800473e:	d81b      	bhi.n	8004778 <UART_SetConfig+0x258>
 8004740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004744:	d00c      	beq.n	8004760 <UART_SetConfig+0x240>
 8004746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800474a:	d815      	bhi.n	8004778 <UART_SetConfig+0x258>
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <UART_SetConfig+0x238>
 8004750:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004754:	d008      	beq.n	8004768 <UART_SetConfig+0x248>
 8004756:	e00f      	b.n	8004778 <UART_SetConfig+0x258>
 8004758:	2300      	movs	r3, #0
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475e:	e052      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004760:	2302      	movs	r3, #2
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004766:	e04e      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004768:	2304      	movs	r3, #4
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800476e:	e04a      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004770:	2308      	movs	r3, #8
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004776:	e046      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004778:	2310      	movs	r3, #16
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800477e:	e042      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a17      	ldr	r2, [pc, #92]	@ (80047e4 <UART_SetConfig+0x2c4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d13a      	bne.n	8004800 <UART_SetConfig+0x2e0>
 800478a:	4b18      	ldr	r3, [pc, #96]	@ (80047ec <UART_SetConfig+0x2cc>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004790:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004794:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004798:	d01a      	beq.n	80047d0 <UART_SetConfig+0x2b0>
 800479a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800479e:	d81b      	bhi.n	80047d8 <UART_SetConfig+0x2b8>
 80047a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047a4:	d00c      	beq.n	80047c0 <UART_SetConfig+0x2a0>
 80047a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047aa:	d815      	bhi.n	80047d8 <UART_SetConfig+0x2b8>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <UART_SetConfig+0x298>
 80047b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b4:	d008      	beq.n	80047c8 <UART_SetConfig+0x2a8>
 80047b6:	e00f      	b.n	80047d8 <UART_SetConfig+0x2b8>
 80047b8:	2300      	movs	r3, #0
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047be:	e022      	b.n	8004806 <UART_SetConfig+0x2e6>
 80047c0:	2302      	movs	r3, #2
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047c6:	e01e      	b.n	8004806 <UART_SetConfig+0x2e6>
 80047c8:	2304      	movs	r3, #4
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ce:	e01a      	b.n	8004806 <UART_SetConfig+0x2e6>
 80047d0:	2308      	movs	r3, #8
 80047d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047d6:	e016      	b.n	8004806 <UART_SetConfig+0x2e6>
 80047d8:	2310      	movs	r3, #16
 80047da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047de:	e012      	b.n	8004806 <UART_SetConfig+0x2e6>
 80047e0:	efff69f3 	.word	0xefff69f3
 80047e4:	40008000 	.word	0x40008000
 80047e8:	40013800 	.word	0x40013800
 80047ec:	40021000 	.word	0x40021000
 80047f0:	40004400 	.word	0x40004400
 80047f4:	40004800 	.word	0x40004800
 80047f8:	40004c00 	.word	0x40004c00
 80047fc:	40005000 	.word	0x40005000
 8004800:	2310      	movs	r3, #16
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a9f      	ldr	r2, [pc, #636]	@ (8004a88 <UART_SetConfig+0x568>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d17a      	bne.n	8004906 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004810:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004814:	2b08      	cmp	r3, #8
 8004816:	d824      	bhi.n	8004862 <UART_SetConfig+0x342>
 8004818:	a201      	add	r2, pc, #4	@ (adr r2, 8004820 <UART_SetConfig+0x300>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004845 	.word	0x08004845
 8004824:	08004863 	.word	0x08004863
 8004828:	0800484d 	.word	0x0800484d
 800482c:	08004863 	.word	0x08004863
 8004830:	08004853 	.word	0x08004853
 8004834:	08004863 	.word	0x08004863
 8004838:	08004863 	.word	0x08004863
 800483c:	08004863 	.word	0x08004863
 8004840:	0800485b 	.word	0x0800485b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004844:	f7fe fca2 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 8004848:	61f8      	str	r0, [r7, #28]
        break;
 800484a:	e010      	b.n	800486e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800484c:	4b8f      	ldr	r3, [pc, #572]	@ (8004a8c <UART_SetConfig+0x56c>)
 800484e:	61fb      	str	r3, [r7, #28]
        break;
 8004850:	e00d      	b.n	800486e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004852:	f7fe fc03 	bl	800305c <HAL_RCC_GetSysClockFreq>
 8004856:	61f8      	str	r0, [r7, #28]
        break;
 8004858:	e009      	b.n	800486e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800485a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800485e:	61fb      	str	r3, [r7, #28]
        break;
 8004860:	e005      	b.n	800486e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800486c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80fb 	beq.w	8004a6c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	4613      	mov	r3, r2
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	4413      	add	r3, r2
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	429a      	cmp	r2, r3
 8004884:	d305      	bcc.n	8004892 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	429a      	cmp	r2, r3
 8004890:	d903      	bls.n	800489a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004898:	e0e8      	b.n	8004a6c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	2200      	movs	r2, #0
 800489e:	461c      	mov	r4, r3
 80048a0:	4615      	mov	r5, r2
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	022b      	lsls	r3, r5, #8
 80048ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80048b0:	0222      	lsls	r2, r4, #8
 80048b2:	68f9      	ldr	r1, [r7, #12]
 80048b4:	6849      	ldr	r1, [r1, #4]
 80048b6:	0849      	lsrs	r1, r1, #1
 80048b8:	2000      	movs	r0, #0
 80048ba:	4688      	mov	r8, r1
 80048bc:	4681      	mov	r9, r0
 80048be:	eb12 0a08 	adds.w	sl, r2, r8
 80048c2:	eb43 0b09 	adc.w	fp, r3, r9
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048d4:	4650      	mov	r0, sl
 80048d6:	4659      	mov	r1, fp
 80048d8:	f7fb fc82 	bl	80001e0 <__aeabi_uldivmod>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4613      	mov	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048ea:	d308      	bcc.n	80048fe <UART_SetConfig+0x3de>
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048f2:	d204      	bcs.n	80048fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	60da      	str	r2, [r3, #12]
 80048fc:	e0b6      	b.n	8004a6c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004904:	e0b2      	b.n	8004a6c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800490e:	d15e      	bne.n	80049ce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004910:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004914:	2b08      	cmp	r3, #8
 8004916:	d828      	bhi.n	800496a <UART_SetConfig+0x44a>
 8004918:	a201      	add	r2, pc, #4	@ (adr r2, 8004920 <UART_SetConfig+0x400>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004945 	.word	0x08004945
 8004924:	0800494d 	.word	0x0800494d
 8004928:	08004955 	.word	0x08004955
 800492c:	0800496b 	.word	0x0800496b
 8004930:	0800495b 	.word	0x0800495b
 8004934:	0800496b 	.word	0x0800496b
 8004938:	0800496b 	.word	0x0800496b
 800493c:	0800496b 	.word	0x0800496b
 8004940:	08004963 	.word	0x08004963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004944:	f7fe fc22 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 8004948:	61f8      	str	r0, [r7, #28]
        break;
 800494a:	e014      	b.n	8004976 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800494c:	f7fe fc34 	bl	80031b8 <HAL_RCC_GetPCLK2Freq>
 8004950:	61f8      	str	r0, [r7, #28]
        break;
 8004952:	e010      	b.n	8004976 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004954:	4b4d      	ldr	r3, [pc, #308]	@ (8004a8c <UART_SetConfig+0x56c>)
 8004956:	61fb      	str	r3, [r7, #28]
        break;
 8004958:	e00d      	b.n	8004976 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800495a:	f7fe fb7f 	bl	800305c <HAL_RCC_GetSysClockFreq>
 800495e:	61f8      	str	r0, [r7, #28]
        break;
 8004960:	e009      	b.n	8004976 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004966:	61fb      	str	r3, [r7, #28]
        break;
 8004968:	e005      	b.n	8004976 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004974:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d077      	beq.n	8004a6c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	005a      	lsls	r2, r3, #1
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	085b      	lsrs	r3, r3, #1
 8004986:	441a      	add	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004990:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b0f      	cmp	r3, #15
 8004996:	d916      	bls.n	80049c6 <UART_SetConfig+0x4a6>
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800499e:	d212      	bcs.n	80049c6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f023 030f 	bic.w	r3, r3, #15
 80049a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	8afb      	ldrh	r3, [r7, #22]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	8afa      	ldrh	r2, [r7, #22]
 80049c2:	60da      	str	r2, [r3, #12]
 80049c4:	e052      	b.n	8004a6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049cc:	e04e      	b.n	8004a6c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d827      	bhi.n	8004a26 <UART_SetConfig+0x506>
 80049d6:	a201      	add	r2, pc, #4	@ (adr r2, 80049dc <UART_SetConfig+0x4bc>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	08004a01 	.word	0x08004a01
 80049e0:	08004a09 	.word	0x08004a09
 80049e4:	08004a11 	.word	0x08004a11
 80049e8:	08004a27 	.word	0x08004a27
 80049ec:	08004a17 	.word	0x08004a17
 80049f0:	08004a27 	.word	0x08004a27
 80049f4:	08004a27 	.word	0x08004a27
 80049f8:	08004a27 	.word	0x08004a27
 80049fc:	08004a1f 	.word	0x08004a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a00:	f7fe fbc4 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 8004a04:	61f8      	str	r0, [r7, #28]
        break;
 8004a06:	e014      	b.n	8004a32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a08:	f7fe fbd6 	bl	80031b8 <HAL_RCC_GetPCLK2Freq>
 8004a0c:	61f8      	str	r0, [r7, #28]
        break;
 8004a0e:	e010      	b.n	8004a32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a10:	4b1e      	ldr	r3, [pc, #120]	@ (8004a8c <UART_SetConfig+0x56c>)
 8004a12:	61fb      	str	r3, [r7, #28]
        break;
 8004a14:	e00d      	b.n	8004a32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a16:	f7fe fb21 	bl	800305c <HAL_RCC_GetSysClockFreq>
 8004a1a:	61f8      	str	r0, [r7, #28]
        break;
 8004a1c:	e009      	b.n	8004a32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a22:	61fb      	str	r3, [r7, #28]
        break;
 8004a24:	e005      	b.n	8004a32 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a30:	bf00      	nop
    }

    if (pclk != 0U)
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d019      	beq.n	8004a6c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	085a      	lsrs	r2, r3, #1
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	441a      	add	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b0f      	cmp	r3, #15
 8004a50:	d909      	bls.n	8004a66 <UART_SetConfig+0x546>
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a58:	d205      	bcs.n	8004a66 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60da      	str	r2, [r3, #12]
 8004a64:	e002      	b.n	8004a6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a78:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3728      	adds	r7, #40	@ 0x28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a86:	bf00      	nop
 8004a88:	40008000 	.word	0x40008000
 8004a8c:	00f42400 	.word	0x00f42400

08004a90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01a      	beq.n	8004ba6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b8e:	d10a      	bne.n	8004ba6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	605a      	str	r2, [r3, #4]
  }
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b098      	sub	sp, #96	@ 0x60
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004be4:	f7fc fdb6 	bl	8001754 <HAL_GetTick>
 8004be8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d12e      	bne.n	8004c56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c00:	2200      	movs	r2, #0
 8004c02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f88c 	bl	8004d24 <UART_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d021      	beq.n	8004c56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c26:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c32:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e6      	bne.n	8004c12 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e062      	b.n	8004d1c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d149      	bne.n	8004cf8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f856 	bl	8004d24 <UART_WaitOnFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d03c      	beq.n	8004cf8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e6      	bne.n	8004c7e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3308      	adds	r3, #8
 8004cb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0301 	bic.w	r3, r3, #1
 8004cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3308      	adds	r3, #8
 8004cce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cd0:	61fa      	str	r2, [r7, #28]
 8004cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	69b9      	ldr	r1, [r7, #24]
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e5      	bne.n	8004cb0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e011      	b.n	8004d1c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3758      	adds	r7, #88	@ 0x58
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	4613      	mov	r3, r2
 8004d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d34:	e04f      	b.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3c:	d04b      	beq.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3e:	f7fc fd09 	bl	8001754 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d302      	bcc.n	8004d54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e04e      	b.n	8004df6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d037      	beq.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b80      	cmp	r3, #128	@ 0x80
 8004d6a:	d034      	beq.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b40      	cmp	r3, #64	@ 0x40
 8004d70:	d031      	beq.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d110      	bne.n	8004da2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2208      	movs	r2, #8
 8004d86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f838 	bl	8004dfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2208      	movs	r2, #8
 8004d92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e029      	b.n	8004df6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004db0:	d111      	bne.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004dba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 f81e 	bl	8004dfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e00f      	b.n	8004df6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69da      	ldr	r2, [r3, #28]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4013      	ands	r3, r2
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	bf0c      	ite	eq
 8004de6:	2301      	moveq	r3, #1
 8004de8:	2300      	movne	r3, #0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	79fb      	ldrb	r3, [r7, #7]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d0a0      	beq.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b095      	sub	sp, #84	@ 0x54
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e0e:	e853 3f00 	ldrex	r3, [r3]
 8004e12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e24:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e26:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e6      	bne.n	8004e06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3308      	adds	r3, #8
 8004e3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	e853 3f00 	ldrex	r3, [r3]
 8004e46:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	f023 0301 	bic.w	r3, r3, #1
 8004e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3308      	adds	r3, #8
 8004e56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e60:	e841 2300 	strex	r3, r2, [r1]
 8004e64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e5      	bne.n	8004e38 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d118      	bne.n	8004ea6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f023 0310 	bic.w	r3, r3, #16
 8004e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e92:	61bb      	str	r3, [r7, #24]
 8004e94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6979      	ldr	r1, [r7, #20]
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e6      	bne.n	8004e74 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004eba:	bf00      	nop
 8004ebc:	3754      	adds	r7, #84	@ 0x54
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	f107 001c 	add.w	r0, r7, #28
 8004ed4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fa69 	bl	80053bc <USB_CoreReset>
 8004eea:	4603      	mov	r3, r0
 8004eec:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004eee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f02:	e005      	b.n	8004f10 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f08:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f1c:	b004      	add	sp, #16
 8004f1e:	4770      	bx	lr

08004f20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f023 0201 	bic.w	r2, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d115      	bne.n	8004f90 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f70:	200a      	movs	r0, #10
 8004f72:	f7fc fbfb 	bl	800176c <HAL_Delay>
      ms += 10U;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	330a      	adds	r3, #10
 8004f7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 fa0f 	bl	80053a0 <USB_GetMode>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d01e      	beq.n	8004fc6 <USB_SetCurrentMode+0x84>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f8c:	d9f0      	bls.n	8004f70 <USB_SetCurrentMode+0x2e>
 8004f8e:	e01a      	b.n	8004fc6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d115      	bne.n	8004fc2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fa2:	200a      	movs	r0, #10
 8004fa4:	f7fc fbe2 	bl	800176c <HAL_Delay>
      ms += 10U;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	330a      	adds	r3, #10
 8004fac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f9f6 	bl	80053a0 <USB_GetMode>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d005      	beq.n	8004fc6 <USB_SetCurrentMode+0x84>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2bc7      	cmp	r3, #199	@ 0xc7
 8004fbe:	d9f0      	bls.n	8004fa2 <USB_SetCurrentMode+0x60>
 8004fc0:	e001      	b.n	8004fc6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e005      	b.n	8004fd2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2bc8      	cmp	r3, #200	@ 0xc8
 8004fca:	d101      	bne.n	8004fd0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e000      	b.n	8004fd2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
	...

08004fdc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fdc:	b084      	sub	sp, #16
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b086      	sub	sp, #24
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	e009      	b.n	8005010 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	3340      	adds	r3, #64	@ 0x40
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	2200      	movs	r2, #0
 8005008:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	3301      	adds	r3, #1
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2b0e      	cmp	r3, #14
 8005014:	d9f2      	bls.n	8004ffc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005016:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800501a:	2b00      	cmp	r3, #0
 800501c:	d11c      	bne.n	8005058 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800502c:	f043 0302 	orr.w	r3, r3, #2
 8005030:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005036:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	e005      	b.n	8005064 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800505c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800506a:	461a      	mov	r2, r3
 800506c:	2300      	movs	r3, #0
 800506e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005070:	2103      	movs	r1, #3
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f95a 	bl	800532c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005078:	2110      	movs	r1, #16
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f8f6 	bl	800526c <USB_FlushTxFifo>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f920 	bl	80052d0 <USB_FlushRxFifo>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050a0:	461a      	mov	r2, r3
 80050a2:	2300      	movs	r3, #0
 80050a4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050ac:	461a      	mov	r2, r3
 80050ae:	2300      	movs	r3, #0
 80050b0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050b8:	461a      	mov	r2, r3
 80050ba:	2300      	movs	r3, #0
 80050bc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050be:	2300      	movs	r3, #0
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	e043      	b.n	800514c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050da:	d118      	bne.n	800510e <USB_DevInit+0x132>
    {
      if (i == 0U)
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10a      	bne.n	80050f8 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ee:	461a      	mov	r2, r3
 80050f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	e013      	b.n	8005120 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005104:	461a      	mov	r2, r3
 8005106:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	e008      	b.n	8005120 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4413      	add	r3, r2
 8005116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800511a:	461a      	mov	r2, r3
 800511c:	2300      	movs	r3, #0
 800511e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800512c:	461a      	mov	r2, r3
 800512e:	2300      	movs	r3, #0
 8005130:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800513e:	461a      	mov	r2, r3
 8005140:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005144:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	3301      	adds	r3, #1
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005150:	461a      	mov	r2, r3
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	4293      	cmp	r3, r2
 8005156:	d3b5      	bcc.n	80050c4 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005158:	2300      	movs	r3, #0
 800515a:	613b      	str	r3, [r7, #16]
 800515c:	e043      	b.n	80051e6 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005170:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005174:	d118      	bne.n	80051a8 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10a      	bne.n	8005192 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005188:	461a      	mov	r2, r3
 800518a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800518e:	6013      	str	r3, [r2, #0]
 8005190:	e013      	b.n	80051ba <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800519e:	461a      	mov	r2, r3
 80051a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	e008      	b.n	80051ba <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b4:	461a      	mov	r2, r3
 80051b6:	2300      	movs	r3, #0
 80051b8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c6:	461a      	mov	r2, r3
 80051c8:	2300      	movs	r3, #0
 80051ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d8:	461a      	mov	r2, r3
 80051da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	3301      	adds	r3, #1
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051ea:	461a      	mov	r2, r3
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d3b5      	bcc.n	800515e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005204:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005212:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	f043 0210 	orr.w	r2, r3, #16
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699a      	ldr	r2, [r3, #24]
 8005224:	4b10      	ldr	r3, [pc, #64]	@ (8005268 <USB_DevInit+0x28c>)
 8005226:	4313      	orrs	r3, r2
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800522c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	f043 0208 	orr.w	r2, r3, #8
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005240:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005244:	2b01      	cmp	r3, #1
 8005246:	d107      	bne.n	8005258 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005250:	f043 0304 	orr.w	r3, r3, #4
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005258:	7dfb      	ldrb	r3, [r7, #23]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005264:	b004      	add	sp, #16
 8005266:	4770      	bx	lr
 8005268:	803c3800 	.word	0x803c3800

0800526c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	3301      	adds	r3, #1
 800527e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005286:	d901      	bls.n	800528c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e01b      	b.n	80052c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	daf2      	bge.n	800527a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	019b      	lsls	r3, r3, #6
 800529c:	f043 0220 	orr.w	r2, r3, #32
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3301      	adds	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052b0:	d901      	bls.n	80052b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e006      	b.n	80052c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b20      	cmp	r3, #32
 80052c0:	d0f0      	beq.n	80052a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3301      	adds	r3, #1
 80052e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052e8:	d901      	bls.n	80052ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e018      	b.n	8005320 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	daf2      	bge.n	80052dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2210      	movs	r2, #16
 80052fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3301      	adds	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800530c:	d901      	bls.n	8005312 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e006      	b.n	8005320 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 0310 	and.w	r3, r3, #16
 800531a:	2b10      	cmp	r3, #16
 800531c:	d0f0      	beq.n	8005300 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	68f9      	ldr	r1, [r7, #12]
 8005348:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800534c:	4313      	orrs	r3, r2
 800534e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800535e:	b480      	push	{r7}
 8005360:	b085      	sub	sp, #20
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005378:	f023 0303 	bic.w	r3, r3, #3
 800537c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800538c:	f043 0302 	orr.w	r3, r3, #2
 8005390:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	f003 0301 	and.w	r3, r3, #1
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3301      	adds	r3, #1
 80053cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053d4:	d901      	bls.n	80053da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e01b      	b.n	8005412 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	daf2      	bge.n	80053c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f043 0201 	orr.w	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3301      	adds	r3, #1
 80053f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053fe:	d901      	bls.n	8005404 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e006      	b.n	8005412 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b01      	cmp	r3, #1
 800540e:	d0f0      	beq.n	80053f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
	...

08005420 <__NVIC_SetPriority>:
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	6039      	str	r1, [r7, #0]
 800542a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800542c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005430:	2b00      	cmp	r3, #0
 8005432:	db0a      	blt.n	800544a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	b2da      	uxtb	r2, r3
 8005438:	490c      	ldr	r1, [pc, #48]	@ (800546c <__NVIC_SetPriority+0x4c>)
 800543a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800543e:	0112      	lsls	r2, r2, #4
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	440b      	add	r3, r1
 8005444:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005448:	e00a      	b.n	8005460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	b2da      	uxtb	r2, r3
 800544e:	4908      	ldr	r1, [pc, #32]	@ (8005470 <__NVIC_SetPriority+0x50>)
 8005450:	79fb      	ldrb	r3, [r7, #7]
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	3b04      	subs	r3, #4
 8005458:	0112      	lsls	r2, r2, #4
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	440b      	add	r3, r1
 800545e:	761a      	strb	r2, [r3, #24]
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	e000e100 	.word	0xe000e100
 8005470:	e000ed00 	.word	0xe000ed00

08005474 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005478:	4b05      	ldr	r3, [pc, #20]	@ (8005490 <SysTick_Handler+0x1c>)
 800547a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800547c:	f001 fe54 	bl	8007128 <xTaskGetSchedulerState>
 8005480:	4603      	mov	r3, r0
 8005482:	2b01      	cmp	r3, #1
 8005484:	d001      	beq.n	800548a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005486:	f002 fc4f 	bl	8007d28 <xPortSysTickHandler>
  }
}
 800548a:	bf00      	nop
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	e000e010 	.word	0xe000e010

08005494 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005498:	2100      	movs	r1, #0
 800549a:	f06f 0004 	mvn.w	r0, #4
 800549e:	f7ff ffbf 	bl	8005420 <__NVIC_SetPriority>
#endif
}
 80054a2:	bf00      	nop
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054ae:	f3ef 8305 	mrs	r3, IPSR
 80054b2:	603b      	str	r3, [r7, #0]
  return(result);
 80054b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80054ba:	f06f 0305 	mvn.w	r3, #5
 80054be:	607b      	str	r3, [r7, #4]
 80054c0:	e00c      	b.n	80054dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80054c2:	4b0a      	ldr	r3, [pc, #40]	@ (80054ec <osKernelInitialize+0x44>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d105      	bne.n	80054d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80054ca:	4b08      	ldr	r3, [pc, #32]	@ (80054ec <osKernelInitialize+0x44>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	607b      	str	r3, [r7, #4]
 80054d4:	e002      	b.n	80054dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80054d6:	f04f 33ff 	mov.w	r3, #4294967295
 80054da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80054dc:	687b      	ldr	r3, [r7, #4]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	200008a8 	.word	0x200008a8

080054f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054f6:	f3ef 8305 	mrs	r3, IPSR
 80054fa:	603b      	str	r3, [r7, #0]
  return(result);
 80054fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005502:	f06f 0305 	mvn.w	r3, #5
 8005506:	607b      	str	r3, [r7, #4]
 8005508:	e010      	b.n	800552c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800550a:	4b0b      	ldr	r3, [pc, #44]	@ (8005538 <osKernelStart+0x48>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d109      	bne.n	8005526 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005512:	f7ff ffbf 	bl	8005494 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005516:	4b08      	ldr	r3, [pc, #32]	@ (8005538 <osKernelStart+0x48>)
 8005518:	2202      	movs	r2, #2
 800551a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800551c:	f001 f9a0 	bl	8006860 <vTaskStartScheduler>
      stat = osOK;
 8005520:	2300      	movs	r3, #0
 8005522:	607b      	str	r3, [r7, #4]
 8005524:	e002      	b.n	800552c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005526:	f04f 33ff 	mov.w	r3, #4294967295
 800552a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800552c:	687b      	ldr	r3, [r7, #4]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	200008a8 	.word	0x200008a8

0800553c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800553c:	b580      	push	{r7, lr}
 800553e:	b08e      	sub	sp, #56	@ 0x38
 8005540:	af04      	add	r7, sp, #16
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800554c:	f3ef 8305 	mrs	r3, IPSR
 8005550:	617b      	str	r3, [r7, #20]
  return(result);
 8005552:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005554:	2b00      	cmp	r3, #0
 8005556:	d17e      	bne.n	8005656 <osThreadNew+0x11a>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d07b      	beq.n	8005656 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800555e:	2380      	movs	r3, #128	@ 0x80
 8005560:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005562:	2318      	movs	r3, #24
 8005564:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005566:	2300      	movs	r3, #0
 8005568:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800556a:	f04f 33ff 	mov.w	r3, #4294967295
 800556e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d045      	beq.n	8005602 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <osThreadNew+0x48>
        name = attr->name;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d008      	beq.n	80055aa <osThreadNew+0x6e>
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	2b38      	cmp	r3, #56	@ 0x38
 800559c:	d805      	bhi.n	80055aa <osThreadNew+0x6e>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <osThreadNew+0x72>
        return (NULL);
 80055aa:	2300      	movs	r3, #0
 80055ac:	e054      	b.n	8005658 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	089b      	lsrs	r3, r3, #2
 80055bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00e      	beq.n	80055e4 <osThreadNew+0xa8>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	2ba7      	cmp	r3, #167	@ 0xa7
 80055cc:	d90a      	bls.n	80055e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d006      	beq.n	80055e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <osThreadNew+0xa8>
        mem = 1;
 80055de:	2301      	movs	r3, #1
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	e010      	b.n	8005606 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10c      	bne.n	8005606 <osThreadNew+0xca>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d108      	bne.n	8005606 <osThreadNew+0xca>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d104      	bne.n	8005606 <osThreadNew+0xca>
          mem = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	61bb      	str	r3, [r7, #24]
 8005600:	e001      	b.n	8005606 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d110      	bne.n	800562e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005614:	9202      	str	r2, [sp, #8]
 8005616:	9301      	str	r3, [sp, #4]
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	6a3a      	ldr	r2, [r7, #32]
 8005620:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 ff28 	bl	8006478 <xTaskCreateStatic>
 8005628:	4603      	mov	r3, r0
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	e013      	b.n	8005656 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d110      	bne.n	8005656 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	b29a      	uxth	r2, r3
 8005638:	f107 0310 	add.w	r3, r7, #16
 800563c:	9301      	str	r3, [sp, #4]
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 ff76 	bl	8006538 <xTaskCreate>
 800564c:	4603      	mov	r3, r0
 800564e:	2b01      	cmp	r3, #1
 8005650:	d001      	beq.n	8005656 <osThreadNew+0x11a>
            hTask = NULL;
 8005652:	2300      	movs	r3, #0
 8005654:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005656:	693b      	ldr	r3, [r7, #16]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3728      	adds	r7, #40	@ 0x28
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005668:	f3ef 8305 	mrs	r3, IPSR
 800566c:	60bb      	str	r3, [r7, #8]
  return(result);
 800566e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <osDelay+0x1c>
    stat = osErrorISR;
 8005674:	f06f 0305 	mvn.w	r3, #5
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	e007      	b.n	800568c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800567c:	2300      	movs	r3, #0
 800567e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f001 f8b4 	bl	80067f4 <vTaskDelay>
    }
  }

  return (stat);
 800568c:	68fb      	ldr	r3, [r7, #12]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005696:	b580      	push	{r7, lr}
 8005698:	b088      	sub	sp, #32
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800569e:	2300      	movs	r3, #0
 80056a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056a2:	f3ef 8305 	mrs	r3, IPSR
 80056a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80056a8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d174      	bne.n	8005798 <osMutexNew+0x102>
    if (attr != NULL) {
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <osMutexNew+0x26>
      type = attr->attr_bits;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	e001      	b.n	80056c0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <osMutexNew+0x3a>
      rmtx = 1U;
 80056ca:	2301      	movs	r3, #1
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	e001      	b.n	80056d4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d15c      	bne.n	8005798 <osMutexNew+0x102>
      mem = -1;
 80056de:	f04f 33ff 	mov.w	r3, #4294967295
 80056e2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d015      	beq.n	8005716 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d006      	beq.n	8005700 <osMutexNew+0x6a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	2b4f      	cmp	r3, #79	@ 0x4f
 80056f8:	d902      	bls.n	8005700 <osMutexNew+0x6a>
          mem = 1;
 80056fa:	2301      	movs	r3, #1
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	e00c      	b.n	800571a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d108      	bne.n	800571a <osMutexNew+0x84>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d104      	bne.n	800571a <osMutexNew+0x84>
            mem = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	613b      	str	r3, [r7, #16]
 8005714:	e001      	b.n	800571a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005716:	2300      	movs	r3, #0
 8005718:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d112      	bne.n	8005746 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	4619      	mov	r1, r3
 800572c:	2004      	movs	r0, #4
 800572e:	f000 fa98 	bl	8005c62 <xQueueCreateMutexStatic>
 8005732:	61f8      	str	r0, [r7, #28]
 8005734:	e016      	b.n	8005764 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	4619      	mov	r1, r3
 800573c:	2001      	movs	r0, #1
 800573e:	f000 fa90 	bl	8005c62 <xQueueCreateMutexStatic>
 8005742:	61f8      	str	r0, [r7, #28]
 8005744:	e00e      	b.n	8005764 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10b      	bne.n	8005764 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d004      	beq.n	800575c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005752:	2004      	movs	r0, #4
 8005754:	f000 fa6d 	bl	8005c32 <xQueueCreateMutex>
 8005758:	61f8      	str	r0, [r7, #28]
 800575a:	e003      	b.n	8005764 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800575c:	2001      	movs	r0, #1
 800575e:	f000 fa68 	bl	8005c32 <xQueueCreateMutex>
 8005762:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00c      	beq.n	8005784 <osMutexNew+0xee>
        if (attr != NULL) {
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <osMutexNew+0xe2>
          name = attr->name;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	e001      	b.n	800577c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800577c:	68f9      	ldr	r1, [r7, #12]
 800577e:	69f8      	ldr	r0, [r7, #28]
 8005780:	f000 fe1c 	bl	80063bc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d006      	beq.n	8005798 <osMutexNew+0x102>
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	f043 0301 	orr.w	r3, r3, #1
 8005796:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005798:	69fb      	ldr	r3, [r7, #28]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4a07      	ldr	r2, [pc, #28]	@ (80057d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80057b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	4a06      	ldr	r2, [pc, #24]	@ (80057d4 <vApplicationGetIdleTaskMemory+0x30>)
 80057ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2280      	movs	r2, #128	@ 0x80
 80057c0:	601a      	str	r2, [r3, #0]
}
 80057c2:	bf00      	nop
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	200008ac 	.word	0x200008ac
 80057d4:	20000954 	.word	0x20000954

080057d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4a07      	ldr	r2, [pc, #28]	@ (8005804 <vApplicationGetTimerTaskMemory+0x2c>)
 80057e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	4a06      	ldr	r2, [pc, #24]	@ (8005808 <vApplicationGetTimerTaskMemory+0x30>)
 80057ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057f6:	601a      	str	r2, [r3, #0]
}
 80057f8:	bf00      	nop
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	20000b54 	.word	0x20000b54
 8005808:	20000bfc 	.word	0x20000bfc

0800580c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f103 0208 	add.w	r2, r3, #8
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f04f 32ff 	mov.w	r2, #4294967295
 8005824:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f103 0208 	add.w	r2, r3, #8
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f103 0208 	add.w	r2, r3, #8
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005866:	b480      	push	{r7}
 8005868:	b085      	sub	sp, #20
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	601a      	str	r2, [r3, #0]
}
 80058a2:	bf00      	nop
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058ae:	b480      	push	{r7}
 80058b0:	b085      	sub	sp, #20
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c4:	d103      	bne.n	80058ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	e00c      	b.n	80058e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3308      	adds	r3, #8
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	e002      	b.n	80058dc <vListInsert+0x2e>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d2f6      	bcs.n	80058d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	601a      	str	r2, [r3, #0]
}
 8005914:	bf00      	nop
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6892      	ldr	r2, [r2, #8]
 8005936:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6852      	ldr	r2, [r2, #4]
 8005940:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	429a      	cmp	r2, r3
 800594a:	d103      	bne.n	8005954 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	1e5a      	subs	r2, r3, #1
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10b      	bne.n	80059a0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800599a:	bf00      	nop
 800599c:	bf00      	nop
 800599e:	e7fd      	b.n	800599c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80059a0:	f002 f932 	bl	8007c08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ac:	68f9      	ldr	r1, [r7, #12]
 80059ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80059b0:	fb01 f303 	mul.w	r3, r1, r3
 80059b4:	441a      	add	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d0:	3b01      	subs	r3, #1
 80059d2:	68f9      	ldr	r1, [r7, #12]
 80059d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80059d6:	fb01 f303 	mul.w	r3, r1, r3
 80059da:	441a      	add	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	22ff      	movs	r2, #255	@ 0xff
 80059e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	22ff      	movs	r2, #255	@ 0xff
 80059ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d114      	bne.n	8005a20 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d01a      	beq.n	8005a34 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3310      	adds	r3, #16
 8005a02:	4618      	mov	r0, r3
 8005a04:	f001 f9ca 	bl	8006d9c <xTaskRemoveFromEventList>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d012      	beq.n	8005a34 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a44 <xQueueGenericReset+0xd0>)
 8005a10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	e009      	b.n	8005a34 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3310      	adds	r3, #16
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff fef1 	bl	800580c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3324      	adds	r3, #36	@ 0x24
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff feec 	bl	800580c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a34:	f002 f91a 	bl	8007c6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a38:	2301      	movs	r3, #1
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	e000ed04 	.word	0xe000ed04

08005a48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08e      	sub	sp, #56	@ 0x38
 8005a4c:	af02      	add	r7, sp, #8
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10b      	bne.n	8005a74 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005a6e:	bf00      	nop
 8005a70:	bf00      	nop
 8005a72:	e7fd      	b.n	8005a70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10b      	bne.n	8005a92 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	e7fd      	b.n	8005a8e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <xQueueGenericCreateStatic+0x56>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <xQueueGenericCreateStatic+0x5a>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <xQueueGenericCreateStatic+0x5c>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10b      	bne.n	8005ac0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	623b      	str	r3, [r7, #32]
}
 8005aba:	bf00      	nop
 8005abc:	bf00      	nop
 8005abe:	e7fd      	b.n	8005abc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d102      	bne.n	8005acc <xQueueGenericCreateStatic+0x84>
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <xQueueGenericCreateStatic+0x88>
 8005acc:	2301      	movs	r3, #1
 8005ace:	e000      	b.n	8005ad2 <xQueueGenericCreateStatic+0x8a>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10b      	bne.n	8005aee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	61fb      	str	r3, [r7, #28]
}
 8005ae8:	bf00      	nop
 8005aea:	bf00      	nop
 8005aec:	e7fd      	b.n	8005aea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005aee:	2350      	movs	r3, #80	@ 0x50
 8005af0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2b50      	cmp	r3, #80	@ 0x50
 8005af6:	d00b      	beq.n	8005b10 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	61bb      	str	r3, [r7, #24]
}
 8005b0a:	bf00      	nop
 8005b0c:	bf00      	nop
 8005b0e:	e7fd      	b.n	8005b0c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b10:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00d      	beq.n	8005b38 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b24:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	68b9      	ldr	r1, [r7, #8]
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 f840 	bl	8005bb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3730      	adds	r7, #48	@ 0x30
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b08a      	sub	sp, #40	@ 0x28
 8005b46:	af02      	add	r7, sp, #8
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10b      	bne.n	8005b6e <xQueueGenericCreate+0x2c>
	__asm volatile
 8005b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	613b      	str	r3, [r7, #16]
}
 8005b68:	bf00      	nop
 8005b6a:	bf00      	nop
 8005b6c:	e7fd      	b.n	8005b6a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	fb02 f303 	mul.w	r3, r2, r3
 8005b76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	3350      	adds	r3, #80	@ 0x50
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f002 f965 	bl	8007e4c <pvPortMalloc>
 8005b82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d011      	beq.n	8005bae <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	3350      	adds	r3, #80	@ 0x50
 8005b92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b9c:	79fa      	ldrb	r2, [r7, #7]
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	68b9      	ldr	r1, [r7, #8]
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 f805 	bl	8005bb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005bae:	69bb      	ldr	r3, [r7, #24]
	}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3720      	adds	r7, #32
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d103      	bne.n	8005bd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	e002      	b.n	8005bda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005be6:	2101      	movs	r1, #1
 8005be8:	69b8      	ldr	r0, [r7, #24]
 8005bea:	f7ff fec3 	bl	8005974 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	78fa      	ldrb	r2, [r7, #3]
 8005bf2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005bf6:	bf00      	nop
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00e      	beq.n	8005c2a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005c1e:	2300      	movs	r3, #0
 8005c20:	2200      	movs	r2, #0
 8005c22:	2100      	movs	r1, #0
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f837 	bl	8005c98 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005c2a:	bf00      	nop
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b086      	sub	sp, #24
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	4603      	mov	r3, r0
 8005c3a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	2300      	movs	r3, #0
 8005c42:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	461a      	mov	r2, r3
 8005c48:	6939      	ldr	r1, [r7, #16]
 8005c4a:	6978      	ldr	r0, [r7, #20]
 8005c4c:	f7ff ff79 	bl	8005b42 <xQueueGenericCreate>
 8005c50:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f7ff ffd3 	bl	8005bfe <prvInitialiseMutex>

		return xNewQueue;
 8005c58:	68fb      	ldr	r3, [r7, #12]
	}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b088      	sub	sp, #32
 8005c66:	af02      	add	r7, sp, #8
 8005c68:	4603      	mov	r3, r0
 8005c6a:	6039      	str	r1, [r7, #0]
 8005c6c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	2300      	movs	r3, #0
 8005c74:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005c76:	79fb      	ldrb	r3, [r7, #7]
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	6939      	ldr	r1, [r7, #16]
 8005c80:	6978      	ldr	r0, [r7, #20]
 8005c82:	f7ff fee1 	bl	8005a48 <xQueueGenericCreateStatic>
 8005c86:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff ffb8 	bl	8005bfe <prvInitialiseMutex>

		return xNewQueue;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
	}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08e      	sub	sp, #56	@ 0x38
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10b      	bne.n	8005ccc <xQueueGenericSend+0x34>
	__asm volatile
 8005cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005cc6:	bf00      	nop
 8005cc8:	bf00      	nop
 8005cca:	e7fd      	b.n	8005cc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d103      	bne.n	8005cda <xQueueGenericSend+0x42>
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <xQueueGenericSend+0x46>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <xQueueGenericSend+0x48>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10b      	bne.n	8005cfc <xQueueGenericSend+0x64>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005cf6:	bf00      	nop
 8005cf8:	bf00      	nop
 8005cfa:	e7fd      	b.n	8005cf8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d103      	bne.n	8005d0a <xQueueGenericSend+0x72>
 8005d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <xQueueGenericSend+0x76>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <xQueueGenericSend+0x78>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10b      	bne.n	8005d2c <xQueueGenericSend+0x94>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	623b      	str	r3, [r7, #32]
}
 8005d26:	bf00      	nop
 8005d28:	bf00      	nop
 8005d2a:	e7fd      	b.n	8005d28 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d2c:	f001 f9fc 	bl	8007128 <xTaskGetSchedulerState>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d102      	bne.n	8005d3c <xQueueGenericSend+0xa4>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <xQueueGenericSend+0xa8>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e000      	b.n	8005d42 <xQueueGenericSend+0xaa>
 8005d40:	2300      	movs	r3, #0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10b      	bne.n	8005d5e <xQueueGenericSend+0xc6>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	61fb      	str	r3, [r7, #28]
}
 8005d58:	bf00      	nop
 8005d5a:	bf00      	nop
 8005d5c:	e7fd      	b.n	8005d5a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d5e:	f001 ff53 	bl	8007c08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d302      	bcc.n	8005d74 <xQueueGenericSend+0xdc>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d129      	bne.n	8005dc8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d7a:	f000 fa0f 	bl	800619c <prvCopyDataToQueue>
 8005d7e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d010      	beq.n	8005daa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8a:	3324      	adds	r3, #36	@ 0x24
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f001 f805 	bl	8006d9c <xTaskRemoveFromEventList>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d013      	beq.n	8005dc0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d98:	4b3f      	ldr	r3, [pc, #252]	@ (8005e98 <xQueueGenericSend+0x200>)
 8005d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	e00a      	b.n	8005dc0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d007      	beq.n	8005dc0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005db0:	4b39      	ldr	r3, [pc, #228]	@ (8005e98 <xQueueGenericSend+0x200>)
 8005db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005dc0:	f001 ff54 	bl	8007c6c <vPortExitCritical>
				return pdPASS;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e063      	b.n	8005e90 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d103      	bne.n	8005dd6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005dce:	f001 ff4d 	bl	8007c6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	e05c      	b.n	8005e90 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d106      	bne.n	8005dea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ddc:	f107 0314 	add.w	r3, r7, #20
 8005de0:	4618      	mov	r0, r3
 8005de2:	f001 f83f 	bl	8006e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005de6:	2301      	movs	r3, #1
 8005de8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dea:	f001 ff3f 	bl	8007c6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dee:	f000 fda7 	bl	8006940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005df2:	f001 ff09 	bl	8007c08 <vPortEnterCritical>
 8005df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dfc:	b25b      	sxtb	r3, r3
 8005dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e02:	d103      	bne.n	8005e0c <xQueueGenericSend+0x174>
 8005e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e12:	b25b      	sxtb	r3, r3
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d103      	bne.n	8005e22 <xQueueGenericSend+0x18a>
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e22:	f001 ff23 	bl	8007c6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e26:	1d3a      	adds	r2, r7, #4
 8005e28:	f107 0314 	add.w	r3, r7, #20
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f001 f82e 	bl	8006e90 <xTaskCheckForTimeOut>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d124      	bne.n	8005e84 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e3c:	f000 faa6 	bl	800638c <prvIsQueueFull>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d018      	beq.n	8005e78 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e48:	3310      	adds	r3, #16
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 ff52 	bl	8006cf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e56:	f000 fa31 	bl	80062bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e5a:	f000 fd7f 	bl	800695c <xTaskResumeAll>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f47f af7c 	bne.w	8005d5e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005e66:	4b0c      	ldr	r3, [pc, #48]	@ (8005e98 <xQueueGenericSend+0x200>)
 8005e68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	e772      	b.n	8005d5e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e7a:	f000 fa1f 	bl	80062bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e7e:	f000 fd6d 	bl	800695c <xTaskResumeAll>
 8005e82:	e76c      	b.n	8005d5e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e86:	f000 fa19 	bl	80062bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e8a:	f000 fd67 	bl	800695c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3738      	adds	r7, #56	@ 0x38
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	e000ed04 	.word	0xe000ed04

08005e9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b090      	sub	sp, #64	@ 0x40
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10b      	bne.n	8005ecc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ec6:	bf00      	nop
 8005ec8:	bf00      	nop
 8005eca:	e7fd      	b.n	8005ec8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d103      	bne.n	8005eda <xQueueGenericSendFromISR+0x3e>
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <xQueueGenericSendFromISR+0x42>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <xQueueGenericSendFromISR+0x44>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10b      	bne.n	8005efc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ef6:	bf00      	nop
 8005ef8:	bf00      	nop
 8005efa:	e7fd      	b.n	8005ef8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d103      	bne.n	8005f0a <xQueueGenericSendFromISR+0x6e>
 8005f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d101      	bne.n	8005f0e <xQueueGenericSendFromISR+0x72>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <xQueueGenericSendFromISR+0x74>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10b      	bne.n	8005f2c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	623b      	str	r3, [r7, #32]
}
 8005f26:	bf00      	nop
 8005f28:	bf00      	nop
 8005f2a:	e7fd      	b.n	8005f28 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f2c:	f001 ff4c 	bl	8007dc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f30:	f3ef 8211 	mrs	r2, BASEPRI
 8005f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	61fa      	str	r2, [r7, #28]
 8005f46:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f48:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f4a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d302      	bcc.n	8005f5e <xQueueGenericSendFromISR+0xc2>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d12f      	bne.n	8005fbe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	68b9      	ldr	r1, [r7, #8]
 8005f72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005f74:	f000 f912 	bl	800619c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f78:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f80:	d112      	bne.n	8005fa8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d016      	beq.n	8005fb8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8c:	3324      	adds	r3, #36	@ 0x24
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 ff04 	bl	8006d9c <xTaskRemoveFromEventList>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00e      	beq.n	8005fb8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00b      	beq.n	8005fb8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	e007      	b.n	8005fb8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005fa8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005fac:	3301      	adds	r3, #1
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	b25a      	sxtb	r2, r3
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005fbc:	e001      	b.n	8005fc2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fc4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005fcc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3740      	adds	r7, #64	@ 0x40
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b08c      	sub	sp, #48	@ 0x30
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10b      	bne.n	800600a <xQueueReceive+0x32>
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	623b      	str	r3, [r7, #32]
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop
 8006008:	e7fd      	b.n	8006006 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d103      	bne.n	8006018 <xQueueReceive+0x40>
 8006010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <xQueueReceive+0x44>
 8006018:	2301      	movs	r3, #1
 800601a:	e000      	b.n	800601e <xQueueReceive+0x46>
 800601c:	2300      	movs	r3, #0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10b      	bne.n	800603a <xQueueReceive+0x62>
	__asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	61fb      	str	r3, [r7, #28]
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop
 8006038:	e7fd      	b.n	8006036 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800603a:	f001 f875 	bl	8007128 <xTaskGetSchedulerState>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d102      	bne.n	800604a <xQueueReceive+0x72>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <xQueueReceive+0x76>
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <xQueueReceive+0x78>
 800604e:	2300      	movs	r3, #0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10b      	bne.n	800606c <xQueueReceive+0x94>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	61bb      	str	r3, [r7, #24]
}
 8006066:	bf00      	nop
 8006068:	bf00      	nop
 800606a:	e7fd      	b.n	8006068 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800606c:	f001 fdcc 	bl	8007c08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006074:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01f      	beq.n	80060bc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800607c:	68b9      	ldr	r1, [r7, #8]
 800607e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006080:	f000 f8f6 	bl	8006270 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006086:	1e5a      	subs	r2, r3, #1
 8006088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800608c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00f      	beq.n	80060b4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006096:	3310      	adds	r3, #16
 8006098:	4618      	mov	r0, r3
 800609a:	f000 fe7f 	bl	8006d9c <xTaskRemoveFromEventList>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d007      	beq.n	80060b4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060a4:	4b3c      	ldr	r3, [pc, #240]	@ (8006198 <xQueueReceive+0x1c0>)
 80060a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060b4:	f001 fdda 	bl	8007c6c <vPortExitCritical>
				return pdPASS;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e069      	b.n	8006190 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d103      	bne.n	80060ca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060c2:	f001 fdd3 	bl	8007c6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80060c6:	2300      	movs	r3, #0
 80060c8:	e062      	b.n	8006190 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d106      	bne.n	80060de <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060d0:	f107 0310 	add.w	r3, r7, #16
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 fec5 	bl	8006e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060da:	2301      	movs	r3, #1
 80060dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060de:	f001 fdc5 	bl	8007c6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060e2:	f000 fc2d 	bl	8006940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060e6:	f001 fd8f 	bl	8007c08 <vPortEnterCritical>
 80060ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060f0:	b25b      	sxtb	r3, r3
 80060f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f6:	d103      	bne.n	8006100 <xQueueReceive+0x128>
 80060f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006102:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006106:	b25b      	sxtb	r3, r3
 8006108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610c:	d103      	bne.n	8006116 <xQueueReceive+0x13e>
 800610e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006116:	f001 fda9 	bl	8007c6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800611a:	1d3a      	adds	r2, r7, #4
 800611c:	f107 0310 	add.w	r3, r7, #16
 8006120:	4611      	mov	r1, r2
 8006122:	4618      	mov	r0, r3
 8006124:	f000 feb4 	bl	8006e90 <xTaskCheckForTimeOut>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d123      	bne.n	8006176 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800612e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006130:	f000 f916 	bl	8006360 <prvIsQueueEmpty>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d017      	beq.n	800616a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800613a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613c:	3324      	adds	r3, #36	@ 0x24
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	4611      	mov	r1, r2
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fdd8 	bl	8006cf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006148:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800614a:	f000 f8b7 	bl	80062bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800614e:	f000 fc05 	bl	800695c <xTaskResumeAll>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d189      	bne.n	800606c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006158:	4b0f      	ldr	r3, [pc, #60]	@ (8006198 <xQueueReceive+0x1c0>)
 800615a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	e780      	b.n	800606c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800616a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800616c:	f000 f8a6 	bl	80062bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006170:	f000 fbf4 	bl	800695c <xTaskResumeAll>
 8006174:	e77a      	b.n	800606c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006176:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006178:	f000 f8a0 	bl	80062bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800617c:	f000 fbee 	bl	800695c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006180:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006182:	f000 f8ed 	bl	8006360 <prvIsQueueEmpty>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	f43f af6f 	beq.w	800606c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800618e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006190:	4618      	mov	r0, r3
 8006192:	3730      	adds	r7, #48	@ 0x30
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	e000ed04 	.word	0xe000ed04

0800619c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80061a8:	2300      	movs	r3, #0
 80061aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10d      	bne.n	80061d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d14d      	bne.n	800625e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 ffcc 	bl	8007164 <xTaskPriorityDisinherit>
 80061cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	609a      	str	r2, [r3, #8]
 80061d4:	e043      	b.n	800625e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d119      	bne.n	8006210 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6858      	ldr	r0, [r3, #4]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e4:	461a      	mov	r2, r3
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	f002 faef 	bl	80087ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f4:	441a      	add	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	429a      	cmp	r2, r3
 8006204:	d32b      	bcc.n	800625e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	605a      	str	r2, [r3, #4]
 800620e:	e026      	b.n	800625e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	68d8      	ldr	r0, [r3, #12]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006218:	461a      	mov	r2, r3
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	f002 fad5 	bl	80087ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006228:	425b      	negs	r3, r3
 800622a:	441a      	add	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	429a      	cmp	r2, r3
 800623a:	d207      	bcs.n	800624c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006244:	425b      	negs	r3, r3
 8006246:	441a      	add	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b02      	cmp	r3, #2
 8006250:	d105      	bne.n	800625e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	3b01      	subs	r3, #1
 800625c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006266:	697b      	ldr	r3, [r7, #20]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627e:	2b00      	cmp	r3, #0
 8006280:	d018      	beq.n	80062b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68da      	ldr	r2, [r3, #12]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628a:	441a      	add	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	429a      	cmp	r2, r3
 800629a:	d303      	bcc.n	80062a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68d9      	ldr	r1, [r3, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ac:	461a      	mov	r2, r3
 80062ae:	6838      	ldr	r0, [r7, #0]
 80062b0:	f002 fa8b 	bl	80087ca <memcpy>
	}
}
 80062b4:	bf00      	nop
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80062c4:	f001 fca0 	bl	8007c08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062d0:	e011      	b.n	80062f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d012      	beq.n	8006300 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3324      	adds	r3, #36	@ 0x24
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fd5c 	bl	8006d9c <xTaskRemoveFromEventList>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062ea:	f000 fe35 	bl	8006f58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	dce9      	bgt.n	80062d2 <prvUnlockQueue+0x16>
 80062fe:	e000      	b.n	8006302 <prvUnlockQueue+0x46>
					break;
 8006300:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	22ff      	movs	r2, #255	@ 0xff
 8006306:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800630a:	f001 fcaf 	bl	8007c6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800630e:	f001 fc7b 	bl	8007c08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006318:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800631a:	e011      	b.n	8006340 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d012      	beq.n	800634a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3310      	adds	r3, #16
 8006328:	4618      	mov	r0, r3
 800632a:	f000 fd37 	bl	8006d9c <xTaskRemoveFromEventList>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006334:	f000 fe10 	bl	8006f58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006338:	7bbb      	ldrb	r3, [r7, #14]
 800633a:	3b01      	subs	r3, #1
 800633c:	b2db      	uxtb	r3, r3
 800633e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006344:	2b00      	cmp	r3, #0
 8006346:	dce9      	bgt.n	800631c <prvUnlockQueue+0x60>
 8006348:	e000      	b.n	800634c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800634a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	22ff      	movs	r2, #255	@ 0xff
 8006350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006354:	f001 fc8a 	bl	8007c6c <vPortExitCritical>
}
 8006358:	bf00      	nop
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006368:	f001 fc4e 	bl	8007c08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006370:	2b00      	cmp	r3, #0
 8006372:	d102      	bne.n	800637a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006374:	2301      	movs	r3, #1
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	e001      	b.n	800637e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800637e:	f001 fc75 	bl	8007c6c <vPortExitCritical>

	return xReturn;
 8006382:	68fb      	ldr	r3, [r7, #12]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006394:	f001 fc38 	bl	8007c08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d102      	bne.n	80063aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80063a4:	2301      	movs	r3, #1
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	e001      	b.n	80063ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80063aa:	2300      	movs	r3, #0
 80063ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063ae:	f001 fc5d 	bl	8007c6c <vPortExitCritical>

	return xReturn;
 80063b2:	68fb      	ldr	r3, [r7, #12]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	e014      	b.n	80063f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80063cc:	4a0f      	ldr	r2, [pc, #60]	@ (800640c <vQueueAddToRegistry+0x50>)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10b      	bne.n	80063f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80063d8:	490c      	ldr	r1, [pc, #48]	@ (800640c <vQueueAddToRegistry+0x50>)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80063e2:	4a0a      	ldr	r2, [pc, #40]	@ (800640c <vQueueAddToRegistry+0x50>)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	4413      	add	r3, r2
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80063ee:	e006      	b.n	80063fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3301      	adds	r3, #1
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b07      	cmp	r3, #7
 80063fa:	d9e7      	bls.n	80063cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80063fc:	bf00      	nop
 80063fe:	bf00      	nop
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	20000ffc 	.word	0x20000ffc

08006410 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006420:	f001 fbf2 	bl	8007c08 <vPortEnterCritical>
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800642a:	b25b      	sxtb	r3, r3
 800642c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006430:	d103      	bne.n	800643a <vQueueWaitForMessageRestricted+0x2a>
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006440:	b25b      	sxtb	r3, r3
 8006442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006446:	d103      	bne.n	8006450 <vQueueWaitForMessageRestricted+0x40>
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006450:	f001 fc0c 	bl	8007c6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006458:	2b00      	cmp	r3, #0
 800645a:	d106      	bne.n	800646a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	3324      	adds	r3, #36	@ 0x24
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	4618      	mov	r0, r3
 8006466:	f000 fc6d 	bl	8006d44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800646a:	6978      	ldr	r0, [r7, #20]
 800646c:	f7ff ff26 	bl	80062bc <prvUnlockQueue>
	}
 8006470:	bf00      	nop
 8006472:	3718      	adds	r7, #24
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08e      	sub	sp, #56	@ 0x38
 800647c:	af04      	add	r7, sp, #16
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10b      	bne.n	80064a4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	623b      	str	r3, [r7, #32]
}
 800649e:	bf00      	nop
 80064a0:	bf00      	nop
 80064a2:	e7fd      	b.n	80064a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80064a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10b      	bne.n	80064c2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	61fb      	str	r3, [r7, #28]
}
 80064bc:	bf00      	nop
 80064be:	bf00      	nop
 80064c0:	e7fd      	b.n	80064be <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064c2:	23a8      	movs	r3, #168	@ 0xa8
 80064c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	2ba8      	cmp	r3, #168	@ 0xa8
 80064ca:	d00b      	beq.n	80064e4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	61bb      	str	r3, [r7, #24]
}
 80064de:	bf00      	nop
 80064e0:	bf00      	nop
 80064e2:	e7fd      	b.n	80064e0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d01e      	beq.n	800652a <xTaskCreateStatic+0xb2>
 80064ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01b      	beq.n	800652a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064fa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006504:	2300      	movs	r3, #0
 8006506:	9303      	str	r3, [sp, #12]
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650a:	9302      	str	r3, [sp, #8]
 800650c:	f107 0314 	add.w	r3, r7, #20
 8006510:	9301      	str	r3, [sp, #4]
 8006512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	68b9      	ldr	r1, [r7, #8]
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 f851 	bl	80065c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006522:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006524:	f000 f8f6 	bl	8006714 <prvAddNewTaskToReadyList>
 8006528:	e001      	b.n	800652e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800652a:	2300      	movs	r3, #0
 800652c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800652e:	697b      	ldr	r3, [r7, #20]
	}
 8006530:	4618      	mov	r0, r3
 8006532:	3728      	adds	r7, #40	@ 0x28
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08c      	sub	sp, #48	@ 0x30
 800653c:	af04      	add	r7, sp, #16
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	603b      	str	r3, [r7, #0]
 8006544:	4613      	mov	r3, r2
 8006546:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006548:	88fb      	ldrh	r3, [r7, #6]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4618      	mov	r0, r3
 800654e:	f001 fc7d 	bl	8007e4c <pvPortMalloc>
 8006552:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00e      	beq.n	8006578 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800655a:	20a8      	movs	r0, #168	@ 0xa8
 800655c:	f001 fc76 	bl	8007e4c <pvPortMalloc>
 8006560:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	631a      	str	r2, [r3, #48]	@ 0x30
 800656e:	e005      	b.n	800657c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006570:	6978      	ldr	r0, [r7, #20]
 8006572:	f001 fd39 	bl	8007fe8 <vPortFree>
 8006576:	e001      	b.n	800657c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006578:	2300      	movs	r3, #0
 800657a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d017      	beq.n	80065b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800658a:	88fa      	ldrh	r2, [r7, #6]
 800658c:	2300      	movs	r3, #0
 800658e:	9303      	str	r3, [sp, #12]
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	9302      	str	r3, [sp, #8]
 8006594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006596:	9301      	str	r3, [sp, #4]
 8006598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	68b9      	ldr	r1, [r7, #8]
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f80f 	bl	80065c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065a6:	69f8      	ldr	r0, [r7, #28]
 80065a8:	f000 f8b4 	bl	8006714 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065ac:	2301      	movs	r3, #1
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	e002      	b.n	80065b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065b2:	f04f 33ff 	mov.w	r3, #4294967295
 80065b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80065b8:	69bb      	ldr	r3, [r7, #24]
	}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3720      	adds	r7, #32
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
	...

080065c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80065d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	461a      	mov	r2, r3
 80065dc:	21a5      	movs	r1, #165	@ 0xa5
 80065de:	f002 f81b 	bl	8008618 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80065e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065ec:	3b01      	subs	r3, #1
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	f023 0307 	bic.w	r3, r3, #7
 80065fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	f003 0307 	and.w	r3, r3, #7
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00b      	beq.n	800661e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	617b      	str	r3, [r7, #20]
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	e7fd      	b.n	800661a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d01f      	beq.n	8006664 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006624:	2300      	movs	r3, #0
 8006626:	61fb      	str	r3, [r7, #28]
 8006628:	e012      	b.n	8006650 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	4413      	add	r3, r2
 8006630:	7819      	ldrb	r1, [r3, #0]
 8006632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	4413      	add	r3, r2
 8006638:	3334      	adds	r3, #52	@ 0x34
 800663a:	460a      	mov	r2, r1
 800663c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d006      	beq.n	8006658 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	3301      	adds	r3, #1
 800664e:	61fb      	str	r3, [r7, #28]
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	2b0f      	cmp	r3, #15
 8006654:	d9e9      	bls.n	800662a <prvInitialiseNewTask+0x66>
 8006656:	e000      	b.n	800665a <prvInitialiseNewTask+0x96>
			{
				break;
 8006658:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800665a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006662:	e003      	b.n	800666c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800666c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666e:	2b37      	cmp	r3, #55	@ 0x37
 8006670:	d901      	bls.n	8006676 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006672:	2337      	movs	r3, #55	@ 0x37
 8006674:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006678:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800667a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800667c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006680:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006684:	2200      	movs	r2, #0
 8006686:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668a:	3304      	adds	r3, #4
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff f8dd 	bl	800584c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006694:	3318      	adds	r3, #24
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff f8d8 	bl	800584c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800669c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80066a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066b0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80066b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b4:	2200      	movs	r2, #0
 80066b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80066c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c4:	3354      	adds	r3, #84	@ 0x54
 80066c6:	224c      	movs	r2, #76	@ 0x4c
 80066c8:	2100      	movs	r1, #0
 80066ca:	4618      	mov	r0, r3
 80066cc:	f001 ffa4 	bl	8008618 <memset>
 80066d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d2:	4a0d      	ldr	r2, [pc, #52]	@ (8006708 <prvInitialiseNewTask+0x144>)
 80066d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80066d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d8:	4a0c      	ldr	r2, [pc, #48]	@ (800670c <prvInitialiseNewTask+0x148>)
 80066da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80066dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066de:	4a0c      	ldr	r2, [pc, #48]	@ (8006710 <prvInitialiseNewTask+0x14c>)
 80066e0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	68f9      	ldr	r1, [r7, #12]
 80066e6:	69b8      	ldr	r0, [r7, #24]
 80066e8:	f001 f95a 	bl	80079a0 <pxPortInitialiseStack>
 80066ec:	4602      	mov	r2, r0
 80066ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80066f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80066f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066fe:	bf00      	nop
 8006700:	3720      	adds	r7, #32
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	20009690 	.word	0x20009690
 800670c:	200096f8 	.word	0x200096f8
 8006710:	20009760 	.word	0x20009760

08006714 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800671c:	f001 fa74 	bl	8007c08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006720:	4b2d      	ldr	r3, [pc, #180]	@ (80067d8 <prvAddNewTaskToReadyList+0xc4>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3301      	adds	r3, #1
 8006726:	4a2c      	ldr	r2, [pc, #176]	@ (80067d8 <prvAddNewTaskToReadyList+0xc4>)
 8006728:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800672a:	4b2c      	ldr	r3, [pc, #176]	@ (80067dc <prvAddNewTaskToReadyList+0xc8>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d109      	bne.n	8006746 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006732:	4a2a      	ldr	r2, [pc, #168]	@ (80067dc <prvAddNewTaskToReadyList+0xc8>)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006738:	4b27      	ldr	r3, [pc, #156]	@ (80067d8 <prvAddNewTaskToReadyList+0xc4>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d110      	bne.n	8006762 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006740:	f000 fc2e 	bl	8006fa0 <prvInitialiseTaskLists>
 8006744:	e00d      	b.n	8006762 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006746:	4b26      	ldr	r3, [pc, #152]	@ (80067e0 <prvAddNewTaskToReadyList+0xcc>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d109      	bne.n	8006762 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800674e:	4b23      	ldr	r3, [pc, #140]	@ (80067dc <prvAddNewTaskToReadyList+0xc8>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006758:	429a      	cmp	r2, r3
 800675a:	d802      	bhi.n	8006762 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800675c:	4a1f      	ldr	r2, [pc, #124]	@ (80067dc <prvAddNewTaskToReadyList+0xc8>)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006762:	4b20      	ldr	r3, [pc, #128]	@ (80067e4 <prvAddNewTaskToReadyList+0xd0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3301      	adds	r3, #1
 8006768:	4a1e      	ldr	r2, [pc, #120]	@ (80067e4 <prvAddNewTaskToReadyList+0xd0>)
 800676a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800676c:	4b1d      	ldr	r3, [pc, #116]	@ (80067e4 <prvAddNewTaskToReadyList+0xd0>)
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006778:	4b1b      	ldr	r3, [pc, #108]	@ (80067e8 <prvAddNewTaskToReadyList+0xd4>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	429a      	cmp	r2, r3
 800677e:	d903      	bls.n	8006788 <prvAddNewTaskToReadyList+0x74>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006784:	4a18      	ldr	r2, [pc, #96]	@ (80067e8 <prvAddNewTaskToReadyList+0xd4>)
 8006786:	6013      	str	r3, [r2, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4a15      	ldr	r2, [pc, #84]	@ (80067ec <prvAddNewTaskToReadyList+0xd8>)
 8006796:	441a      	add	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3304      	adds	r3, #4
 800679c:	4619      	mov	r1, r3
 800679e:	4610      	mov	r0, r2
 80067a0:	f7ff f861 	bl	8005866 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80067a4:	f001 fa62 	bl	8007c6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80067a8:	4b0d      	ldr	r3, [pc, #52]	@ (80067e0 <prvAddNewTaskToReadyList+0xcc>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00e      	beq.n	80067ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067b0:	4b0a      	ldr	r3, [pc, #40]	@ (80067dc <prvAddNewTaskToReadyList+0xc8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d207      	bcs.n	80067ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067be:	4b0c      	ldr	r3, [pc, #48]	@ (80067f0 <prvAddNewTaskToReadyList+0xdc>)
 80067c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067ce:	bf00      	nop
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20001510 	.word	0x20001510
 80067dc:	2000103c 	.word	0x2000103c
 80067e0:	2000151c 	.word	0x2000151c
 80067e4:	2000152c 	.word	0x2000152c
 80067e8:	20001518 	.word	0x20001518
 80067ec:	20001040 	.word	0x20001040
 80067f0:	e000ed04 	.word	0xe000ed04

080067f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80067fc:	2300      	movs	r3, #0
 80067fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d018      	beq.n	8006838 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006806:	4b14      	ldr	r3, [pc, #80]	@ (8006858 <vTaskDelay+0x64>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00b      	beq.n	8006826 <vTaskDelay+0x32>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	60bb      	str	r3, [r7, #8]
}
 8006820:	bf00      	nop
 8006822:	bf00      	nop
 8006824:	e7fd      	b.n	8006822 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006826:	f000 f88b 	bl	8006940 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800682a:	2100      	movs	r1, #0
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fd09 	bl	8007244 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006832:	f000 f893 	bl	800695c <xTaskResumeAll>
 8006836:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d107      	bne.n	800684e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800683e:	4b07      	ldr	r3, [pc, #28]	@ (800685c <vTaskDelay+0x68>)
 8006840:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800684e:	bf00      	nop
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20001538 	.word	0x20001538
 800685c:	e000ed04 	.word	0xe000ed04

08006860 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08a      	sub	sp, #40	@ 0x28
 8006864:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006866:	2300      	movs	r3, #0
 8006868:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800686e:	463a      	mov	r2, r7
 8006870:	1d39      	adds	r1, r7, #4
 8006872:	f107 0308 	add.w	r3, r7, #8
 8006876:	4618      	mov	r0, r3
 8006878:	f7fe ff94 	bl	80057a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	9202      	str	r2, [sp, #8]
 8006884:	9301      	str	r3, [sp, #4]
 8006886:	2300      	movs	r3, #0
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	2300      	movs	r3, #0
 800688c:	460a      	mov	r2, r1
 800688e:	4924      	ldr	r1, [pc, #144]	@ (8006920 <vTaskStartScheduler+0xc0>)
 8006890:	4824      	ldr	r0, [pc, #144]	@ (8006924 <vTaskStartScheduler+0xc4>)
 8006892:	f7ff fdf1 	bl	8006478 <xTaskCreateStatic>
 8006896:	4603      	mov	r3, r0
 8006898:	4a23      	ldr	r2, [pc, #140]	@ (8006928 <vTaskStartScheduler+0xc8>)
 800689a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800689c:	4b22      	ldr	r3, [pc, #136]	@ (8006928 <vTaskStartScheduler+0xc8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068a4:	2301      	movs	r3, #1
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	e001      	b.n	80068ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d102      	bne.n	80068ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80068b4:	f000 fd1a 	bl	80072ec <xTimerCreateTimerTask>
 80068b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d11b      	bne.n	80068f8 <vTaskStartScheduler+0x98>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	613b      	str	r3, [r7, #16]
}
 80068d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068d4:	4b15      	ldr	r3, [pc, #84]	@ (800692c <vTaskStartScheduler+0xcc>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3354      	adds	r3, #84	@ 0x54
 80068da:	4a15      	ldr	r2, [pc, #84]	@ (8006930 <vTaskStartScheduler+0xd0>)
 80068dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068de:	4b15      	ldr	r3, [pc, #84]	@ (8006934 <vTaskStartScheduler+0xd4>)
 80068e0:	f04f 32ff 	mov.w	r2, #4294967295
 80068e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068e6:	4b14      	ldr	r3, [pc, #80]	@ (8006938 <vTaskStartScheduler+0xd8>)
 80068e8:	2201      	movs	r2, #1
 80068ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068ec:	4b13      	ldr	r3, [pc, #76]	@ (800693c <vTaskStartScheduler+0xdc>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80068f2:	f001 f8e5 	bl	8007ac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068f6:	e00f      	b.n	8006918 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fe:	d10b      	bne.n	8006918 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	60fb      	str	r3, [r7, #12]
}
 8006912:	bf00      	nop
 8006914:	bf00      	nop
 8006916:	e7fd      	b.n	8006914 <vTaskStartScheduler+0xb4>
}
 8006918:	bf00      	nop
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	08008d7c 	.word	0x08008d7c
 8006924:	08006f71 	.word	0x08006f71
 8006928:	20001534 	.word	0x20001534
 800692c:	2000103c 	.word	0x2000103c
 8006930:	2000001c 	.word	0x2000001c
 8006934:	20001530 	.word	0x20001530
 8006938:	2000151c 	.word	0x2000151c
 800693c:	20001514 	.word	0x20001514

08006940 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006944:	4b04      	ldr	r3, [pc, #16]	@ (8006958 <vTaskSuspendAll+0x18>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3301      	adds	r3, #1
 800694a:	4a03      	ldr	r2, [pc, #12]	@ (8006958 <vTaskSuspendAll+0x18>)
 800694c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800694e:	bf00      	nop
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	20001538 	.word	0x20001538

0800695c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006962:	2300      	movs	r3, #0
 8006964:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006966:	2300      	movs	r3, #0
 8006968:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800696a:	4b42      	ldr	r3, [pc, #264]	@ (8006a74 <xTaskResumeAll+0x118>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10b      	bne.n	800698a <xTaskResumeAll+0x2e>
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	603b      	str	r3, [r7, #0]
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop
 8006988:	e7fd      	b.n	8006986 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800698a:	f001 f93d 	bl	8007c08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800698e:	4b39      	ldr	r3, [pc, #228]	@ (8006a74 <xTaskResumeAll+0x118>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3b01      	subs	r3, #1
 8006994:	4a37      	ldr	r2, [pc, #220]	@ (8006a74 <xTaskResumeAll+0x118>)
 8006996:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006998:	4b36      	ldr	r3, [pc, #216]	@ (8006a74 <xTaskResumeAll+0x118>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d162      	bne.n	8006a66 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069a0:	4b35      	ldr	r3, [pc, #212]	@ (8006a78 <xTaskResumeAll+0x11c>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d05e      	beq.n	8006a66 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069a8:	e02f      	b.n	8006a0a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069aa:	4b34      	ldr	r3, [pc, #208]	@ (8006a7c <xTaskResumeAll+0x120>)
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3318      	adds	r3, #24
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fe ffb2 	bl	8005920 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3304      	adds	r3, #4
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fe ffad 	bl	8005920 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ca:	4b2d      	ldr	r3, [pc, #180]	@ (8006a80 <xTaskResumeAll+0x124>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d903      	bls.n	80069da <xTaskResumeAll+0x7e>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d6:	4a2a      	ldr	r2, [pc, #168]	@ (8006a80 <xTaskResumeAll+0x124>)
 80069d8:	6013      	str	r3, [r2, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069de:	4613      	mov	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4a27      	ldr	r2, [pc, #156]	@ (8006a84 <xTaskResumeAll+0x128>)
 80069e8:	441a      	add	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3304      	adds	r3, #4
 80069ee:	4619      	mov	r1, r3
 80069f0:	4610      	mov	r0, r2
 80069f2:	f7fe ff38 	bl	8005866 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069fa:	4b23      	ldr	r3, [pc, #140]	@ (8006a88 <xTaskResumeAll+0x12c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d302      	bcc.n	8006a0a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006a04:	4b21      	ldr	r3, [pc, #132]	@ (8006a8c <xTaskResumeAll+0x130>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8006a7c <xTaskResumeAll+0x120>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1cb      	bne.n	80069aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a18:	f000 fb66 	bl	80070e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8006a90 <xTaskResumeAll+0x134>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d010      	beq.n	8006a4a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a28:	f000 f846 	bl	8006ab8 <xTaskIncrementTick>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006a32:	4b16      	ldr	r3, [pc, #88]	@ (8006a8c <xTaskResumeAll+0x130>)
 8006a34:	2201      	movs	r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1f1      	bne.n	8006a28 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006a44:	4b12      	ldr	r3, [pc, #72]	@ (8006a90 <xTaskResumeAll+0x134>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a4a:	4b10      	ldr	r3, [pc, #64]	@ (8006a8c <xTaskResumeAll+0x130>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d009      	beq.n	8006a66 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a52:	2301      	movs	r3, #1
 8006a54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a56:	4b0f      	ldr	r3, [pc, #60]	@ (8006a94 <xTaskResumeAll+0x138>)
 8006a58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a66:	f001 f901 	bl	8007c6c <vPortExitCritical>

	return xAlreadyYielded;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	20001538 	.word	0x20001538
 8006a78:	20001510 	.word	0x20001510
 8006a7c:	200014d0 	.word	0x200014d0
 8006a80:	20001518 	.word	0x20001518
 8006a84:	20001040 	.word	0x20001040
 8006a88:	2000103c 	.word	0x2000103c
 8006a8c:	20001524 	.word	0x20001524
 8006a90:	20001520 	.word	0x20001520
 8006a94:	e000ed04 	.word	0xe000ed04

08006a98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a9e:	4b05      	ldr	r3, [pc, #20]	@ (8006ab4 <xTaskGetTickCount+0x1c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006aa4:	687b      	ldr	r3, [r7, #4]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	20001514 	.word	0x20001514

08006ab8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ac2:	4b4f      	ldr	r3, [pc, #316]	@ (8006c00 <xTaskIncrementTick+0x148>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f040 8090 	bne.w	8006bec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006acc:	4b4d      	ldr	r3, [pc, #308]	@ (8006c04 <xTaskIncrementTick+0x14c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ad4:	4a4b      	ldr	r2, [pc, #300]	@ (8006c04 <xTaskIncrementTick+0x14c>)
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d121      	bne.n	8006b24 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ae0:	4b49      	ldr	r3, [pc, #292]	@ (8006c08 <xTaskIncrementTick+0x150>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00b      	beq.n	8006b02 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aee:	f383 8811 	msr	BASEPRI, r3
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	603b      	str	r3, [r7, #0]
}
 8006afc:	bf00      	nop
 8006afe:	bf00      	nop
 8006b00:	e7fd      	b.n	8006afe <xTaskIncrementTick+0x46>
 8006b02:	4b41      	ldr	r3, [pc, #260]	@ (8006c08 <xTaskIncrementTick+0x150>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	4b40      	ldr	r3, [pc, #256]	@ (8006c0c <xTaskIncrementTick+0x154>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a3e      	ldr	r2, [pc, #248]	@ (8006c08 <xTaskIncrementTick+0x150>)
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	4a3e      	ldr	r2, [pc, #248]	@ (8006c0c <xTaskIncrementTick+0x154>)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	4b3e      	ldr	r3, [pc, #248]	@ (8006c10 <xTaskIncrementTick+0x158>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	4a3c      	ldr	r2, [pc, #240]	@ (8006c10 <xTaskIncrementTick+0x158>)
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	f000 fae2 	bl	80070e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b24:	4b3b      	ldr	r3, [pc, #236]	@ (8006c14 <xTaskIncrementTick+0x15c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d349      	bcc.n	8006bc2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b2e:	4b36      	ldr	r3, [pc, #216]	@ (8006c08 <xTaskIncrementTick+0x150>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d104      	bne.n	8006b42 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b38:	4b36      	ldr	r3, [pc, #216]	@ (8006c14 <xTaskIncrementTick+0x15c>)
 8006b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b3e:	601a      	str	r2, [r3, #0]
					break;
 8006b40:	e03f      	b.n	8006bc2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b42:	4b31      	ldr	r3, [pc, #196]	@ (8006c08 <xTaskIncrementTick+0x150>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d203      	bcs.n	8006b62 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b5a:	4a2e      	ldr	r2, [pc, #184]	@ (8006c14 <xTaskIncrementTick+0x15c>)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b60:	e02f      	b.n	8006bc2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	3304      	adds	r3, #4
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fe feda 	bl	8005920 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d004      	beq.n	8006b7e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	3318      	adds	r3, #24
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fe fed1 	bl	8005920 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b82:	4b25      	ldr	r3, [pc, #148]	@ (8006c18 <xTaskIncrementTick+0x160>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d903      	bls.n	8006b92 <xTaskIncrementTick+0xda>
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8e:	4a22      	ldr	r2, [pc, #136]	@ (8006c18 <xTaskIncrementTick+0x160>)
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b96:	4613      	mov	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8006c1c <xTaskIncrementTick+0x164>)
 8006ba0:	441a      	add	r2, r3
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	4610      	mov	r0, r2
 8006baa:	f7fe fe5c 	bl	8005866 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c20 <xTaskIncrementTick+0x168>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d3b8      	bcc.n	8006b2e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bc0:	e7b5      	b.n	8006b2e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bc2:	4b17      	ldr	r3, [pc, #92]	@ (8006c20 <xTaskIncrementTick+0x168>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bc8:	4914      	ldr	r1, [pc, #80]	@ (8006c1c <xTaskIncrementTick+0x164>)
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d901      	bls.n	8006bde <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006bde:	4b11      	ldr	r3, [pc, #68]	@ (8006c24 <xTaskIncrementTick+0x16c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d007      	beq.n	8006bf6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006be6:	2301      	movs	r3, #1
 8006be8:	617b      	str	r3, [r7, #20]
 8006bea:	e004      	b.n	8006bf6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006bec:	4b0e      	ldr	r3, [pc, #56]	@ (8006c28 <xTaskIncrementTick+0x170>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8006c28 <xTaskIncrementTick+0x170>)
 8006bf4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006bf6:	697b      	ldr	r3, [r7, #20]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3718      	adds	r7, #24
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	20001538 	.word	0x20001538
 8006c04:	20001514 	.word	0x20001514
 8006c08:	200014c8 	.word	0x200014c8
 8006c0c:	200014cc 	.word	0x200014cc
 8006c10:	20001528 	.word	0x20001528
 8006c14:	20001530 	.word	0x20001530
 8006c18:	20001518 	.word	0x20001518
 8006c1c:	20001040 	.word	0x20001040
 8006c20:	2000103c 	.word	0x2000103c
 8006c24:	20001524 	.word	0x20001524
 8006c28:	20001520 	.word	0x20001520

08006c2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c32:	4b2b      	ldr	r3, [pc, #172]	@ (8006ce0 <vTaskSwitchContext+0xb4>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8006ce4 <vTaskSwitchContext+0xb8>)
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c40:	e047      	b.n	8006cd2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006c42:	4b28      	ldr	r3, [pc, #160]	@ (8006ce4 <vTaskSwitchContext+0xb8>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c48:	4b27      	ldr	r3, [pc, #156]	@ (8006ce8 <vTaskSwitchContext+0xbc>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	60fb      	str	r3, [r7, #12]
 8006c4e:	e011      	b.n	8006c74 <vTaskSwitchContext+0x48>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10b      	bne.n	8006c6e <vTaskSwitchContext+0x42>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	607b      	str	r3, [r7, #4]
}
 8006c68:	bf00      	nop
 8006c6a:	bf00      	nop
 8006c6c:	e7fd      	b.n	8006c6a <vTaskSwitchContext+0x3e>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	491d      	ldr	r1, [pc, #116]	@ (8006cec <vTaskSwitchContext+0xc0>)
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	440b      	add	r3, r1
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0e3      	beq.n	8006c50 <vTaskSwitchContext+0x24>
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4a16      	ldr	r2, [pc, #88]	@ (8006cec <vTaskSwitchContext+0xc0>)
 8006c94:	4413      	add	r3, r2
 8006c96:	60bb      	str	r3, [r7, #8]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	605a      	str	r2, [r3, #4]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	3308      	adds	r3, #8
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d104      	bne.n	8006cb8 <vTaskSwitchContext+0x8c>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	605a      	str	r2, [r3, #4]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8006cf0 <vTaskSwitchContext+0xc4>)
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	4a09      	ldr	r2, [pc, #36]	@ (8006ce8 <vTaskSwitchContext+0xbc>)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006cc8:	4b09      	ldr	r3, [pc, #36]	@ (8006cf0 <vTaskSwitchContext+0xc4>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3354      	adds	r3, #84	@ 0x54
 8006cce:	4a09      	ldr	r2, [pc, #36]	@ (8006cf4 <vTaskSwitchContext+0xc8>)
 8006cd0:	6013      	str	r3, [r2, #0]
}
 8006cd2:	bf00      	nop
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	20001538 	.word	0x20001538
 8006ce4:	20001524 	.word	0x20001524
 8006ce8:	20001518 	.word	0x20001518
 8006cec:	20001040 	.word	0x20001040
 8006cf0:	2000103c 	.word	0x2000103c
 8006cf4:	2000001c 	.word	0x2000001c

08006cf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10b      	bne.n	8006d20 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	60fb      	str	r3, [r7, #12]
}
 8006d1a:	bf00      	nop
 8006d1c:	bf00      	nop
 8006d1e:	e7fd      	b.n	8006d1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d20:	4b07      	ldr	r3, [pc, #28]	@ (8006d40 <vTaskPlaceOnEventList+0x48>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3318      	adds	r3, #24
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7fe fdc0 	bl	80058ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d2e:	2101      	movs	r1, #1
 8006d30:	6838      	ldr	r0, [r7, #0]
 8006d32:	f000 fa87 	bl	8007244 <prvAddCurrentTaskToDelayedList>
}
 8006d36:	bf00      	nop
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	2000103c 	.word	0x2000103c

08006d44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10b      	bne.n	8006d6e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	617b      	str	r3, [r7, #20]
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	e7fd      	b.n	8006d6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d98 <vTaskPlaceOnEventListRestricted+0x54>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3318      	adds	r3, #24
 8006d74:	4619      	mov	r1, r3
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f7fe fd75 	bl	8005866 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d002      	beq.n	8006d88 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006d82:	f04f 33ff 	mov.w	r3, #4294967295
 8006d86:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d88:	6879      	ldr	r1, [r7, #4]
 8006d8a:	68b8      	ldr	r0, [r7, #8]
 8006d8c:	f000 fa5a 	bl	8007244 <prvAddCurrentTaskToDelayedList>
	}
 8006d90:	bf00      	nop
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	2000103c 	.word	0x2000103c

08006d9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10b      	bne.n	8006dca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	60fb      	str	r3, [r7, #12]
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop
 8006dc8:	e7fd      	b.n	8006dc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	3318      	adds	r3, #24
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fe fda6 	bl	8005920 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8006e4c <xTaskRemoveFromEventList+0xb0>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d11d      	bne.n	8006e18 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	3304      	adds	r3, #4
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fe fd9d 	bl	8005920 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dea:	4b19      	ldr	r3, [pc, #100]	@ (8006e50 <xTaskRemoveFromEventList+0xb4>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d903      	bls.n	8006dfa <xTaskRemoveFromEventList+0x5e>
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df6:	4a16      	ldr	r2, [pc, #88]	@ (8006e50 <xTaskRemoveFromEventList+0xb4>)
 8006df8:	6013      	str	r3, [r2, #0]
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dfe:	4613      	mov	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4a13      	ldr	r2, [pc, #76]	@ (8006e54 <xTaskRemoveFromEventList+0xb8>)
 8006e08:	441a      	add	r2, r3
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	4619      	mov	r1, r3
 8006e10:	4610      	mov	r0, r2
 8006e12:	f7fe fd28 	bl	8005866 <vListInsertEnd>
 8006e16:	e005      	b.n	8006e24 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	3318      	adds	r3, #24
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	480e      	ldr	r0, [pc, #56]	@ (8006e58 <xTaskRemoveFromEventList+0xbc>)
 8006e20:	f7fe fd21 	bl	8005866 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e28:	4b0c      	ldr	r3, [pc, #48]	@ (8006e5c <xTaskRemoveFromEventList+0xc0>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d905      	bls.n	8006e3e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e32:	2301      	movs	r3, #1
 8006e34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e36:	4b0a      	ldr	r3, [pc, #40]	@ (8006e60 <xTaskRemoveFromEventList+0xc4>)
 8006e38:	2201      	movs	r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	e001      	b.n	8006e42 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e42:	697b      	ldr	r3, [r7, #20]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20001538 	.word	0x20001538
 8006e50:	20001518 	.word	0x20001518
 8006e54:	20001040 	.word	0x20001040
 8006e58:	200014d0 	.word	0x200014d0
 8006e5c:	2000103c 	.word	0x2000103c
 8006e60:	20001524 	.word	0x20001524

08006e64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e6c:	4b06      	ldr	r3, [pc, #24]	@ (8006e88 <vTaskInternalSetTimeOutState+0x24>)
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e74:	4b05      	ldr	r3, [pc, #20]	@ (8006e8c <vTaskInternalSetTimeOutState+0x28>)
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	605a      	str	r2, [r3, #4]
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	20001528 	.word	0x20001528
 8006e8c:	20001514 	.word	0x20001514

08006e90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b088      	sub	sp, #32
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10b      	bne.n	8006eb8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	613b      	str	r3, [r7, #16]
}
 8006eb2:	bf00      	nop
 8006eb4:	bf00      	nop
 8006eb6:	e7fd      	b.n	8006eb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10b      	bne.n	8006ed6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	60fb      	str	r3, [r7, #12]
}
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	e7fd      	b.n	8006ed2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006ed6:	f000 fe97 	bl	8007c08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006eda:	4b1d      	ldr	r3, [pc, #116]	@ (8006f50 <xTaskCheckForTimeOut+0xc0>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef2:	d102      	bne.n	8006efa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	61fb      	str	r3, [r7, #28]
 8006ef8:	e023      	b.n	8006f42 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	4b15      	ldr	r3, [pc, #84]	@ (8006f54 <xTaskCheckForTimeOut+0xc4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d007      	beq.n	8006f16 <xTaskCheckForTimeOut+0x86>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d302      	bcc.n	8006f16 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f10:	2301      	movs	r3, #1
 8006f12:	61fb      	str	r3, [r7, #28]
 8006f14:	e015      	b.n	8006f42 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d20b      	bcs.n	8006f38 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	1ad2      	subs	r2, r2, r3
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7ff ff99 	bl	8006e64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f32:	2300      	movs	r3, #0
 8006f34:	61fb      	str	r3, [r7, #28]
 8006f36:	e004      	b.n	8006f42 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f42:	f000 fe93 	bl	8007c6c <vPortExitCritical>

	return xReturn;
 8006f46:	69fb      	ldr	r3, [r7, #28]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3720      	adds	r7, #32
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	20001514 	.word	0x20001514
 8006f54:	20001528 	.word	0x20001528

08006f58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f58:	b480      	push	{r7}
 8006f5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f5c:	4b03      	ldr	r3, [pc, #12]	@ (8006f6c <vTaskMissedYield+0x14>)
 8006f5e:	2201      	movs	r2, #1
 8006f60:	601a      	str	r2, [r3, #0]
}
 8006f62:	bf00      	nop
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	20001524 	.word	0x20001524

08006f70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f78:	f000 f852 	bl	8007020 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f7c:	4b06      	ldr	r3, [pc, #24]	@ (8006f98 <prvIdleTask+0x28>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d9f9      	bls.n	8006f78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f84:	4b05      	ldr	r3, [pc, #20]	@ (8006f9c <prvIdleTask+0x2c>)
 8006f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f94:	e7f0      	b.n	8006f78 <prvIdleTask+0x8>
 8006f96:	bf00      	nop
 8006f98:	20001040 	.word	0x20001040
 8006f9c:	e000ed04 	.word	0xe000ed04

08006fa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	607b      	str	r3, [r7, #4]
 8006faa:	e00c      	b.n	8006fc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4a12      	ldr	r2, [pc, #72]	@ (8007000 <prvInitialiseTaskLists+0x60>)
 8006fb8:	4413      	add	r3, r2
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe fc26 	bl	800580c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	607b      	str	r3, [r7, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b37      	cmp	r3, #55	@ 0x37
 8006fca:	d9ef      	bls.n	8006fac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006fcc:	480d      	ldr	r0, [pc, #52]	@ (8007004 <prvInitialiseTaskLists+0x64>)
 8006fce:	f7fe fc1d 	bl	800580c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fd2:	480d      	ldr	r0, [pc, #52]	@ (8007008 <prvInitialiseTaskLists+0x68>)
 8006fd4:	f7fe fc1a 	bl	800580c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fd8:	480c      	ldr	r0, [pc, #48]	@ (800700c <prvInitialiseTaskLists+0x6c>)
 8006fda:	f7fe fc17 	bl	800580c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fde:	480c      	ldr	r0, [pc, #48]	@ (8007010 <prvInitialiseTaskLists+0x70>)
 8006fe0:	f7fe fc14 	bl	800580c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006fe4:	480b      	ldr	r0, [pc, #44]	@ (8007014 <prvInitialiseTaskLists+0x74>)
 8006fe6:	f7fe fc11 	bl	800580c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006fea:	4b0b      	ldr	r3, [pc, #44]	@ (8007018 <prvInitialiseTaskLists+0x78>)
 8006fec:	4a05      	ldr	r2, [pc, #20]	@ (8007004 <prvInitialiseTaskLists+0x64>)
 8006fee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800701c <prvInitialiseTaskLists+0x7c>)
 8006ff2:	4a05      	ldr	r2, [pc, #20]	@ (8007008 <prvInitialiseTaskLists+0x68>)
 8006ff4:	601a      	str	r2, [r3, #0]
}
 8006ff6:	bf00      	nop
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	20001040 	.word	0x20001040
 8007004:	200014a0 	.word	0x200014a0
 8007008:	200014b4 	.word	0x200014b4
 800700c:	200014d0 	.word	0x200014d0
 8007010:	200014e4 	.word	0x200014e4
 8007014:	200014fc 	.word	0x200014fc
 8007018:	200014c8 	.word	0x200014c8
 800701c:	200014cc 	.word	0x200014cc

08007020 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007026:	e019      	b.n	800705c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007028:	f000 fdee 	bl	8007c08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800702c:	4b10      	ldr	r3, [pc, #64]	@ (8007070 <prvCheckTasksWaitingTermination+0x50>)
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	3304      	adds	r3, #4
 8007038:	4618      	mov	r0, r3
 800703a:	f7fe fc71 	bl	8005920 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800703e:	4b0d      	ldr	r3, [pc, #52]	@ (8007074 <prvCheckTasksWaitingTermination+0x54>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3b01      	subs	r3, #1
 8007044:	4a0b      	ldr	r2, [pc, #44]	@ (8007074 <prvCheckTasksWaitingTermination+0x54>)
 8007046:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007048:	4b0b      	ldr	r3, [pc, #44]	@ (8007078 <prvCheckTasksWaitingTermination+0x58>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3b01      	subs	r3, #1
 800704e:	4a0a      	ldr	r2, [pc, #40]	@ (8007078 <prvCheckTasksWaitingTermination+0x58>)
 8007050:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007052:	f000 fe0b 	bl	8007c6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f810 	bl	800707c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800705c:	4b06      	ldr	r3, [pc, #24]	@ (8007078 <prvCheckTasksWaitingTermination+0x58>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e1      	bne.n	8007028 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	200014e4 	.word	0x200014e4
 8007074:	20001510 	.word	0x20001510
 8007078:	200014f8 	.word	0x200014f8

0800707c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	3354      	adds	r3, #84	@ 0x54
 8007088:	4618      	mov	r0, r3
 800708a:	f001 fadd 	bl	8008648 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007094:	2b00      	cmp	r3, #0
 8007096:	d108      	bne.n	80070aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800709c:	4618      	mov	r0, r3
 800709e:	f000 ffa3 	bl	8007fe8 <vPortFree>
				vPortFree( pxTCB );
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 ffa0 	bl	8007fe8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80070a8:	e019      	b.n	80070de <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d103      	bne.n	80070bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 ff97 	bl	8007fe8 <vPortFree>
	}
 80070ba:	e010      	b.n	80070de <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d00b      	beq.n	80070de <prvDeleteTCB+0x62>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	60fb      	str	r3, [r7, #12]
}
 80070d8:	bf00      	nop
 80070da:	bf00      	nop
 80070dc:	e7fd      	b.n	80070da <prvDeleteTCB+0x5e>
	}
 80070de:	bf00      	nop
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007120 <prvResetNextTaskUnblockTime+0x38>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d104      	bne.n	8007102 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007124 <prvResetNextTaskUnblockTime+0x3c>)
 80070fa:	f04f 32ff 	mov.w	r2, #4294967295
 80070fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007100:	e008      	b.n	8007114 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007102:	4b07      	ldr	r3, [pc, #28]	@ (8007120 <prvResetNextTaskUnblockTime+0x38>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	4a04      	ldr	r2, [pc, #16]	@ (8007124 <prvResetNextTaskUnblockTime+0x3c>)
 8007112:	6013      	str	r3, [r2, #0]
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	200014c8 	.word	0x200014c8
 8007124:	20001530 	.word	0x20001530

08007128 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800712e:	4b0b      	ldr	r3, [pc, #44]	@ (800715c <xTaskGetSchedulerState+0x34>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d102      	bne.n	800713c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007136:	2301      	movs	r3, #1
 8007138:	607b      	str	r3, [r7, #4]
 800713a:	e008      	b.n	800714e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800713c:	4b08      	ldr	r3, [pc, #32]	@ (8007160 <xTaskGetSchedulerState+0x38>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d102      	bne.n	800714a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007144:	2302      	movs	r3, #2
 8007146:	607b      	str	r3, [r7, #4]
 8007148:	e001      	b.n	800714e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800714a:	2300      	movs	r3, #0
 800714c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800714e:	687b      	ldr	r3, [r7, #4]
	}
 8007150:	4618      	mov	r0, r3
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	2000151c 	.word	0x2000151c
 8007160:	20001538 	.word	0x20001538

08007164 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007170:	2300      	movs	r3, #0
 8007172:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d058      	beq.n	800722c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800717a:	4b2f      	ldr	r3, [pc, #188]	@ (8007238 <xTaskPriorityDisinherit+0xd4>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	429a      	cmp	r2, r3
 8007182:	d00b      	beq.n	800719c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	60fb      	str	r3, [r7, #12]
}
 8007196:	bf00      	nop
 8007198:	bf00      	nop
 800719a:	e7fd      	b.n	8007198 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10b      	bne.n	80071bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80071a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a8:	f383 8811 	msr	BASEPRI, r3
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	60bb      	str	r3, [r7, #8]
}
 80071b6:	bf00      	nop
 80071b8:	bf00      	nop
 80071ba:	e7fd      	b.n	80071b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071c0:	1e5a      	subs	r2, r3, #1
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d02c      	beq.n	800722c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d128      	bne.n	800722c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	3304      	adds	r3, #4
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe fb9e 	bl	8005920 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071fc:	4b0f      	ldr	r3, [pc, #60]	@ (800723c <xTaskPriorityDisinherit+0xd8>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	429a      	cmp	r2, r3
 8007202:	d903      	bls.n	800720c <xTaskPriorityDisinherit+0xa8>
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007208:	4a0c      	ldr	r2, [pc, #48]	@ (800723c <xTaskPriorityDisinherit+0xd8>)
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007210:	4613      	mov	r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4413      	add	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4a09      	ldr	r2, [pc, #36]	@ (8007240 <xTaskPriorityDisinherit+0xdc>)
 800721a:	441a      	add	r2, r3
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	3304      	adds	r3, #4
 8007220:	4619      	mov	r1, r3
 8007222:	4610      	mov	r0, r2
 8007224:	f7fe fb1f 	bl	8005866 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007228:	2301      	movs	r3, #1
 800722a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800722c:	697b      	ldr	r3, [r7, #20]
	}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	2000103c 	.word	0x2000103c
 800723c:	20001518 	.word	0x20001518
 8007240:	20001040 	.word	0x20001040

08007244 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800724e:	4b21      	ldr	r3, [pc, #132]	@ (80072d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007254:	4b20      	ldr	r3, [pc, #128]	@ (80072d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	3304      	adds	r3, #4
 800725a:	4618      	mov	r0, r3
 800725c:	f7fe fb60 	bl	8005920 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007266:	d10a      	bne.n	800727e <prvAddCurrentTaskToDelayedList+0x3a>
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d007      	beq.n	800727e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800726e:	4b1a      	ldr	r3, [pc, #104]	@ (80072d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3304      	adds	r3, #4
 8007274:	4619      	mov	r1, r3
 8007276:	4819      	ldr	r0, [pc, #100]	@ (80072dc <prvAddCurrentTaskToDelayedList+0x98>)
 8007278:	f7fe faf5 	bl	8005866 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800727c:	e026      	b.n	80072cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4413      	add	r3, r2
 8007284:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007286:	4b14      	ldr	r3, [pc, #80]	@ (80072d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	429a      	cmp	r2, r3
 8007294:	d209      	bcs.n	80072aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007296:	4b12      	ldr	r3, [pc, #72]	@ (80072e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	4b0f      	ldr	r3, [pc, #60]	@ (80072d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3304      	adds	r3, #4
 80072a0:	4619      	mov	r1, r3
 80072a2:	4610      	mov	r0, r2
 80072a4:	f7fe fb03 	bl	80058ae <vListInsert>
}
 80072a8:	e010      	b.n	80072cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072aa:	4b0e      	ldr	r3, [pc, #56]	@ (80072e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	4b0a      	ldr	r3, [pc, #40]	@ (80072d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3304      	adds	r3, #4
 80072b4:	4619      	mov	r1, r3
 80072b6:	4610      	mov	r0, r2
 80072b8:	f7fe faf9 	bl	80058ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80072bc:	4b0a      	ldr	r3, [pc, #40]	@ (80072e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d202      	bcs.n	80072cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80072c6:	4a08      	ldr	r2, [pc, #32]	@ (80072e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	6013      	str	r3, [r2, #0]
}
 80072cc:	bf00      	nop
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20001514 	.word	0x20001514
 80072d8:	2000103c 	.word	0x2000103c
 80072dc:	200014fc 	.word	0x200014fc
 80072e0:	200014cc 	.word	0x200014cc
 80072e4:	200014c8 	.word	0x200014c8
 80072e8:	20001530 	.word	0x20001530

080072ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08a      	sub	sp, #40	@ 0x28
 80072f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80072f6:	f000 fb13 	bl	8007920 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80072fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007370 <xTimerCreateTimerTask+0x84>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d021      	beq.n	8007346 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007306:	2300      	movs	r3, #0
 8007308:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800730a:	1d3a      	adds	r2, r7, #4
 800730c:	f107 0108 	add.w	r1, r7, #8
 8007310:	f107 030c 	add.w	r3, r7, #12
 8007314:	4618      	mov	r0, r3
 8007316:	f7fe fa5f 	bl	80057d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800731a:	6879      	ldr	r1, [r7, #4]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	9202      	str	r2, [sp, #8]
 8007322:	9301      	str	r3, [sp, #4]
 8007324:	2302      	movs	r3, #2
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	2300      	movs	r3, #0
 800732a:	460a      	mov	r2, r1
 800732c:	4911      	ldr	r1, [pc, #68]	@ (8007374 <xTimerCreateTimerTask+0x88>)
 800732e:	4812      	ldr	r0, [pc, #72]	@ (8007378 <xTimerCreateTimerTask+0x8c>)
 8007330:	f7ff f8a2 	bl	8006478 <xTaskCreateStatic>
 8007334:	4603      	mov	r3, r0
 8007336:	4a11      	ldr	r2, [pc, #68]	@ (800737c <xTimerCreateTimerTask+0x90>)
 8007338:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800733a:	4b10      	ldr	r3, [pc, #64]	@ (800737c <xTimerCreateTimerTask+0x90>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007342:	2301      	movs	r3, #1
 8007344:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10b      	bne.n	8007364 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	613b      	str	r3, [r7, #16]
}
 800735e:	bf00      	nop
 8007360:	bf00      	nop
 8007362:	e7fd      	b.n	8007360 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007364:	697b      	ldr	r3, [r7, #20]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	2000156c 	.word	0x2000156c
 8007374:	08008d84 	.word	0x08008d84
 8007378:	080074b9 	.word	0x080074b9
 800737c:	20001570 	.word	0x20001570

08007380 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08a      	sub	sp, #40	@ 0x28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800738e:	2300      	movs	r3, #0
 8007390:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10b      	bne.n	80073b0 <xTimerGenericCommand+0x30>
	__asm volatile
 8007398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	623b      	str	r3, [r7, #32]
}
 80073aa:	bf00      	nop
 80073ac:	bf00      	nop
 80073ae:	e7fd      	b.n	80073ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80073b0:	4b19      	ldr	r3, [pc, #100]	@ (8007418 <xTimerGenericCommand+0x98>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d02a      	beq.n	800740e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	2b05      	cmp	r3, #5
 80073c8:	dc18      	bgt.n	80073fc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80073ca:	f7ff fead 	bl	8007128 <xTaskGetSchedulerState>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d109      	bne.n	80073e8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80073d4:	4b10      	ldr	r3, [pc, #64]	@ (8007418 <xTimerGenericCommand+0x98>)
 80073d6:	6818      	ldr	r0, [r3, #0]
 80073d8:	f107 0110 	add.w	r1, r7, #16
 80073dc:	2300      	movs	r3, #0
 80073de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073e0:	f7fe fc5a 	bl	8005c98 <xQueueGenericSend>
 80073e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80073e6:	e012      	b.n	800740e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007418 <xTimerGenericCommand+0x98>)
 80073ea:	6818      	ldr	r0, [r3, #0]
 80073ec:	f107 0110 	add.w	r1, r7, #16
 80073f0:	2300      	movs	r3, #0
 80073f2:	2200      	movs	r2, #0
 80073f4:	f7fe fc50 	bl	8005c98 <xQueueGenericSend>
 80073f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80073fa:	e008      	b.n	800740e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073fc:	4b06      	ldr	r3, [pc, #24]	@ (8007418 <xTimerGenericCommand+0x98>)
 80073fe:	6818      	ldr	r0, [r3, #0]
 8007400:	f107 0110 	add.w	r1, r7, #16
 8007404:	2300      	movs	r3, #0
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	f7fe fd48 	bl	8005e9c <xQueueGenericSendFromISR>
 800740c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800740e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007410:	4618      	mov	r0, r3
 8007412:	3728      	adds	r7, #40	@ 0x28
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	2000156c 	.word	0x2000156c

0800741c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b088      	sub	sp, #32
 8007420:	af02      	add	r7, sp, #8
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007426:	4b23      	ldr	r3, [pc, #140]	@ (80074b4 <prvProcessExpiredTimer+0x98>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	3304      	adds	r3, #4
 8007434:	4618      	mov	r0, r3
 8007436:	f7fe fa73 	bl	8005920 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	d023      	beq.n	8007490 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	699a      	ldr	r2, [r3, #24]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	18d1      	adds	r1, r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	6978      	ldr	r0, [r7, #20]
 8007456:	f000 f8d5 	bl	8007604 <prvInsertTimerInActiveList>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d020      	beq.n	80074a2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007460:	2300      	movs	r3, #0
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	2300      	movs	r3, #0
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	2100      	movs	r1, #0
 800746a:	6978      	ldr	r0, [r7, #20]
 800746c:	f7ff ff88 	bl	8007380 <xTimerGenericCommand>
 8007470:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d114      	bne.n	80074a2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	60fb      	str	r3, [r7, #12]
}
 800748a:	bf00      	nop
 800748c:	bf00      	nop
 800748e:	e7fd      	b.n	800748c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007496:	f023 0301 	bic.w	r3, r3, #1
 800749a:	b2da      	uxtb	r2, r3
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	6978      	ldr	r0, [r7, #20]
 80074a8:	4798      	blx	r3
}
 80074aa:	bf00      	nop
 80074ac:	3718      	adds	r7, #24
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20001564 	.word	0x20001564

080074b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074c0:	f107 0308 	add.w	r3, r7, #8
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 f859 	bl	800757c <prvGetNextExpireTime>
 80074ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	4619      	mov	r1, r3
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 f805 	bl	80074e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80074d6:	f000 f8d7 	bl	8007688 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074da:	bf00      	nop
 80074dc:	e7f0      	b.n	80074c0 <prvTimerTask+0x8>
	...

080074e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80074ea:	f7ff fa29 	bl	8006940 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074ee:	f107 0308 	add.w	r3, r7, #8
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 f866 	bl	80075c4 <prvSampleTimeNow>
 80074f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d130      	bne.n	8007562 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10a      	bne.n	800751c <prvProcessTimerOrBlockTask+0x3c>
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	429a      	cmp	r2, r3
 800750c:	d806      	bhi.n	800751c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800750e:	f7ff fa25 	bl	800695c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007512:	68f9      	ldr	r1, [r7, #12]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7ff ff81 	bl	800741c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800751a:	e024      	b.n	8007566 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d008      	beq.n	8007534 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007522:	4b13      	ldr	r3, [pc, #76]	@ (8007570 <prvProcessTimerOrBlockTask+0x90>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <prvProcessTimerOrBlockTask+0x50>
 800752c:	2301      	movs	r3, #1
 800752e:	e000      	b.n	8007532 <prvProcessTimerOrBlockTask+0x52>
 8007530:	2300      	movs	r3, #0
 8007532:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007534:	4b0f      	ldr	r3, [pc, #60]	@ (8007574 <prvProcessTimerOrBlockTask+0x94>)
 8007536:	6818      	ldr	r0, [r3, #0]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	4619      	mov	r1, r3
 8007542:	f7fe ff65 	bl	8006410 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007546:	f7ff fa09 	bl	800695c <xTaskResumeAll>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007550:	4b09      	ldr	r3, [pc, #36]	@ (8007578 <prvProcessTimerOrBlockTask+0x98>)
 8007552:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007556:	601a      	str	r2, [r3, #0]
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	f3bf 8f6f 	isb	sy
}
 8007560:	e001      	b.n	8007566 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007562:	f7ff f9fb 	bl	800695c <xTaskResumeAll>
}
 8007566:	bf00      	nop
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	20001568 	.word	0x20001568
 8007574:	2000156c 	.word	0x2000156c
 8007578:	e000ed04 	.word	0xe000ed04

0800757c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007584:	4b0e      	ldr	r3, [pc, #56]	@ (80075c0 <prvGetNextExpireTime+0x44>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <prvGetNextExpireTime+0x16>
 800758e:	2201      	movs	r2, #1
 8007590:	e000      	b.n	8007594 <prvGetNextExpireTime+0x18>
 8007592:	2200      	movs	r2, #0
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d105      	bne.n	80075ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075a0:	4b07      	ldr	r3, [pc, #28]	@ (80075c0 <prvGetNextExpireTime+0x44>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	e001      	b.n	80075b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80075ac:	2300      	movs	r3, #0
 80075ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80075b0:	68fb      	ldr	r3, [r7, #12]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	20001564 	.word	0x20001564

080075c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80075cc:	f7ff fa64 	bl	8006a98 <xTaskGetTickCount>
 80075d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80075d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007600 <prvSampleTimeNow+0x3c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d205      	bcs.n	80075e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80075dc:	f000 f93a 	bl	8007854 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	e002      	b.n	80075ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80075ee:	4a04      	ldr	r2, [pc, #16]	@ (8007600 <prvSampleTimeNow+0x3c>)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80075f4:	68fb      	ldr	r3, [r7, #12]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20001574 	.word	0x20001574

08007604 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
 8007610:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007612:	2300      	movs	r3, #0
 8007614:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	429a      	cmp	r2, r3
 8007628:	d812      	bhi.n	8007650 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	1ad2      	subs	r2, r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	429a      	cmp	r2, r3
 8007636:	d302      	bcc.n	800763e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007638:	2301      	movs	r3, #1
 800763a:	617b      	str	r3, [r7, #20]
 800763c:	e01b      	b.n	8007676 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800763e:	4b10      	ldr	r3, [pc, #64]	@ (8007680 <prvInsertTimerInActiveList+0x7c>)
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	3304      	adds	r3, #4
 8007646:	4619      	mov	r1, r3
 8007648:	4610      	mov	r0, r2
 800764a:	f7fe f930 	bl	80058ae <vListInsert>
 800764e:	e012      	b.n	8007676 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	429a      	cmp	r2, r3
 8007656:	d206      	bcs.n	8007666 <prvInsertTimerInActiveList+0x62>
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	429a      	cmp	r2, r3
 800765e:	d302      	bcc.n	8007666 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007660:	2301      	movs	r3, #1
 8007662:	617b      	str	r3, [r7, #20]
 8007664:	e007      	b.n	8007676 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007666:	4b07      	ldr	r3, [pc, #28]	@ (8007684 <prvInsertTimerInActiveList+0x80>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	3304      	adds	r3, #4
 800766e:	4619      	mov	r1, r3
 8007670:	4610      	mov	r0, r2
 8007672:	f7fe f91c 	bl	80058ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007676:	697b      	ldr	r3, [r7, #20]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3718      	adds	r7, #24
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20001568 	.word	0x20001568
 8007684:	20001564 	.word	0x20001564

08007688 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08e      	sub	sp, #56	@ 0x38
 800768c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800768e:	e0ce      	b.n	800782e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	da19      	bge.n	80076ca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007696:	1d3b      	adds	r3, r7, #4
 8007698:	3304      	adds	r3, #4
 800769a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800769c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10b      	bne.n	80076ba <prvProcessReceivedCommands+0x32>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	61fb      	str	r3, [r7, #28]
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop
 80076b8:	e7fd      	b.n	80076b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80076ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076c0:	6850      	ldr	r0, [r2, #4]
 80076c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076c4:	6892      	ldr	r2, [r2, #8]
 80076c6:	4611      	mov	r1, r2
 80076c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f2c0 80ae 	blt.w	800782e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80076d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e0:	3304      	adds	r3, #4
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fe f91c 	bl	8005920 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076e8:	463b      	mov	r3, r7
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7ff ff6a 	bl	80075c4 <prvSampleTimeNow>
 80076f0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b09      	cmp	r3, #9
 80076f6:	f200 8097 	bhi.w	8007828 <prvProcessReceivedCommands+0x1a0>
 80076fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <prvProcessReceivedCommands+0x78>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	08007729 	.word	0x08007729
 8007704:	08007729 	.word	0x08007729
 8007708:	08007729 	.word	0x08007729
 800770c:	0800779f 	.word	0x0800779f
 8007710:	080077b3 	.word	0x080077b3
 8007714:	080077ff 	.word	0x080077ff
 8007718:	08007729 	.word	0x08007729
 800771c:	08007729 	.word	0x08007729
 8007720:	0800779f 	.word	0x0800779f
 8007724:	080077b3 	.word	0x080077b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800772e:	f043 0301 	orr.w	r3, r3, #1
 8007732:	b2da      	uxtb	r2, r3
 8007734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007736:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	18d1      	adds	r1, r2, r3
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007748:	f7ff ff5c 	bl	8007604 <prvInsertTimerInActiveList>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d06c      	beq.n	800782c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007758:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800775a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007760:	f003 0304 	and.w	r3, r3, #4
 8007764:	2b00      	cmp	r3, #0
 8007766:	d061      	beq.n	800782c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	441a      	add	r2, r3
 8007770:	2300      	movs	r3, #0
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	2300      	movs	r3, #0
 8007776:	2100      	movs	r1, #0
 8007778:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800777a:	f7ff fe01 	bl	8007380 <xTimerGenericCommand>
 800777e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d152      	bne.n	800782c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	61bb      	str	r3, [r7, #24]
}
 8007798:	bf00      	nop
 800779a:	bf00      	nop
 800779c:	e7fd      	b.n	800779a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800779e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077a4:	f023 0301 	bic.w	r3, r3, #1
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80077b0:	e03d      	b.n	800782e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077b8:	f043 0301 	orr.w	r3, r3, #1
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80077ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10b      	bne.n	80077ea <prvProcessReceivedCommands+0x162>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	617b      	str	r3, [r7, #20]
}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop
 80077e8:	e7fd      	b.n	80077e6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80077ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f0:	18d1      	adds	r1, r2, r3
 80077f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077f8:	f7ff ff04 	bl	8007604 <prvInsertTimerInActiveList>
					break;
 80077fc:	e017      	b.n	800782e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80077fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007800:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d103      	bne.n	8007814 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800780c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800780e:	f000 fbeb 	bl	8007fe8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007812:	e00c      	b.n	800782e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007816:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800781a:	f023 0301 	bic.w	r3, r3, #1
 800781e:	b2da      	uxtb	r2, r3
 8007820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007822:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007826:	e002      	b.n	800782e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007828:	bf00      	nop
 800782a:	e000      	b.n	800782e <prvProcessReceivedCommands+0x1a6>
					break;
 800782c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800782e:	4b08      	ldr	r3, [pc, #32]	@ (8007850 <prvProcessReceivedCommands+0x1c8>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	1d39      	adds	r1, r7, #4
 8007834:	2200      	movs	r2, #0
 8007836:	4618      	mov	r0, r3
 8007838:	f7fe fbce 	bl	8005fd8 <xQueueReceive>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	f47f af26 	bne.w	8007690 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop
 8007848:	3730      	adds	r7, #48	@ 0x30
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	2000156c 	.word	0x2000156c

08007854 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b088      	sub	sp, #32
 8007858:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800785a:	e049      	b.n	80078f0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800785c:	4b2e      	ldr	r3, [pc, #184]	@ (8007918 <prvSwitchTimerLists+0xc4>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007866:	4b2c      	ldr	r3, [pc, #176]	@ (8007918 <prvSwitchTimerLists+0xc4>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3304      	adds	r3, #4
 8007874:	4618      	mov	r0, r3
 8007876:	f7fe f853 	bl	8005920 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b00      	cmp	r3, #0
 800788e:	d02f      	beq.n	80078f0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	4413      	add	r3, r2
 8007898:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d90e      	bls.n	80078c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007918 <prvSwitchTimerLists+0xc4>)
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3304      	adds	r3, #4
 80078b6:	4619      	mov	r1, r3
 80078b8:	4610      	mov	r0, r2
 80078ba:	f7fd fff8 	bl	80058ae <vListInsert>
 80078be:	e017      	b.n	80078f0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078c0:	2300      	movs	r3, #0
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	2300      	movs	r3, #0
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	2100      	movs	r1, #0
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f7ff fd58 	bl	8007380 <xTimerGenericCommand>
 80078d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10b      	bne.n	80078f0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	603b      	str	r3, [r7, #0]
}
 80078ea:	bf00      	nop
 80078ec:	bf00      	nop
 80078ee:	e7fd      	b.n	80078ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078f0:	4b09      	ldr	r3, [pc, #36]	@ (8007918 <prvSwitchTimerLists+0xc4>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1b0      	bne.n	800785c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80078fa:	4b07      	ldr	r3, [pc, #28]	@ (8007918 <prvSwitchTimerLists+0xc4>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007900:	4b06      	ldr	r3, [pc, #24]	@ (800791c <prvSwitchTimerLists+0xc8>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a04      	ldr	r2, [pc, #16]	@ (8007918 <prvSwitchTimerLists+0xc4>)
 8007906:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007908:	4a04      	ldr	r2, [pc, #16]	@ (800791c <prvSwitchTimerLists+0xc8>)
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	6013      	str	r3, [r2, #0]
}
 800790e:	bf00      	nop
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20001564 	.word	0x20001564
 800791c:	20001568 	.word	0x20001568

08007920 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007926:	f000 f96f 	bl	8007c08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800792a:	4b15      	ldr	r3, [pc, #84]	@ (8007980 <prvCheckForValidListAndQueue+0x60>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d120      	bne.n	8007974 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007932:	4814      	ldr	r0, [pc, #80]	@ (8007984 <prvCheckForValidListAndQueue+0x64>)
 8007934:	f7fd ff6a 	bl	800580c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007938:	4813      	ldr	r0, [pc, #76]	@ (8007988 <prvCheckForValidListAndQueue+0x68>)
 800793a:	f7fd ff67 	bl	800580c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800793e:	4b13      	ldr	r3, [pc, #76]	@ (800798c <prvCheckForValidListAndQueue+0x6c>)
 8007940:	4a10      	ldr	r2, [pc, #64]	@ (8007984 <prvCheckForValidListAndQueue+0x64>)
 8007942:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007944:	4b12      	ldr	r3, [pc, #72]	@ (8007990 <prvCheckForValidListAndQueue+0x70>)
 8007946:	4a10      	ldr	r2, [pc, #64]	@ (8007988 <prvCheckForValidListAndQueue+0x68>)
 8007948:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800794a:	2300      	movs	r3, #0
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	4b11      	ldr	r3, [pc, #68]	@ (8007994 <prvCheckForValidListAndQueue+0x74>)
 8007950:	4a11      	ldr	r2, [pc, #68]	@ (8007998 <prvCheckForValidListAndQueue+0x78>)
 8007952:	2110      	movs	r1, #16
 8007954:	200a      	movs	r0, #10
 8007956:	f7fe f877 	bl	8005a48 <xQueueGenericCreateStatic>
 800795a:	4603      	mov	r3, r0
 800795c:	4a08      	ldr	r2, [pc, #32]	@ (8007980 <prvCheckForValidListAndQueue+0x60>)
 800795e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007960:	4b07      	ldr	r3, [pc, #28]	@ (8007980 <prvCheckForValidListAndQueue+0x60>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d005      	beq.n	8007974 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007968:	4b05      	ldr	r3, [pc, #20]	@ (8007980 <prvCheckForValidListAndQueue+0x60>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	490b      	ldr	r1, [pc, #44]	@ (800799c <prvCheckForValidListAndQueue+0x7c>)
 800796e:	4618      	mov	r0, r3
 8007970:	f7fe fd24 	bl	80063bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007974:	f000 f97a 	bl	8007c6c <vPortExitCritical>
}
 8007978:	bf00      	nop
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	2000156c 	.word	0x2000156c
 8007984:	2000153c 	.word	0x2000153c
 8007988:	20001550 	.word	0x20001550
 800798c:	20001564 	.word	0x20001564
 8007990:	20001568 	.word	0x20001568
 8007994:	20001618 	.word	0x20001618
 8007998:	20001578 	.word	0x20001578
 800799c:	08008d8c 	.word	0x08008d8c

080079a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3b04      	subs	r3, #4
 80079b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80079b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3b04      	subs	r3, #4
 80079be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	f023 0201 	bic.w	r2, r3, #1
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	3b04      	subs	r3, #4
 80079ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079d0:	4a0c      	ldr	r2, [pc, #48]	@ (8007a04 <pxPortInitialiseStack+0x64>)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3b14      	subs	r3, #20
 80079da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3b04      	subs	r3, #4
 80079e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f06f 0202 	mvn.w	r2, #2
 80079ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3b20      	subs	r3, #32
 80079f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079f6:	68fb      	ldr	r3, [r7, #12]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	08007a09 	.word	0x08007a09

08007a08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a12:	4b13      	ldr	r3, [pc, #76]	@ (8007a60 <prvTaskExitError+0x58>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1a:	d00b      	beq.n	8007a34 <prvTaskExitError+0x2c>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	60fb      	str	r3, [r7, #12]
}
 8007a2e:	bf00      	nop
 8007a30:	bf00      	nop
 8007a32:	e7fd      	b.n	8007a30 <prvTaskExitError+0x28>
	__asm volatile
 8007a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	60bb      	str	r3, [r7, #8]
}
 8007a46:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a48:	bf00      	nop
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d0fc      	beq.n	8007a4a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a50:	bf00      	nop
 8007a52:	bf00      	nop
 8007a54:	3714      	adds	r7, #20
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	2000000c 	.word	0x2000000c
	...

08007a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a70:	4b07      	ldr	r3, [pc, #28]	@ (8007a90 <pxCurrentTCBConst2>)
 8007a72:	6819      	ldr	r1, [r3, #0]
 8007a74:	6808      	ldr	r0, [r1, #0]
 8007a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7a:	f380 8809 	msr	PSP, r0
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f04f 0000 	mov.w	r0, #0
 8007a86:	f380 8811 	msr	BASEPRI, r0
 8007a8a:	4770      	bx	lr
 8007a8c:	f3af 8000 	nop.w

08007a90 <pxCurrentTCBConst2>:
 8007a90:	2000103c 	.word	0x2000103c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a94:	bf00      	nop
 8007a96:	bf00      	nop

08007a98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a98:	4808      	ldr	r0, [pc, #32]	@ (8007abc <prvPortStartFirstTask+0x24>)
 8007a9a:	6800      	ldr	r0, [r0, #0]
 8007a9c:	6800      	ldr	r0, [r0, #0]
 8007a9e:	f380 8808 	msr	MSP, r0
 8007aa2:	f04f 0000 	mov.w	r0, #0
 8007aa6:	f380 8814 	msr	CONTROL, r0
 8007aaa:	b662      	cpsie	i
 8007aac:	b661      	cpsie	f
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	df00      	svc	0
 8007ab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007aba:	bf00      	nop
 8007abc:	e000ed08 	.word	0xe000ed08

08007ac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ac6:	4b47      	ldr	r3, [pc, #284]	@ (8007be4 <xPortStartScheduler+0x124>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a47      	ldr	r2, [pc, #284]	@ (8007be8 <xPortStartScheduler+0x128>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d10b      	bne.n	8007ae8 <xPortStartScheduler+0x28>
	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	60fb      	str	r3, [r7, #12]
}
 8007ae2:	bf00      	nop
 8007ae4:	bf00      	nop
 8007ae6:	e7fd      	b.n	8007ae4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ae8:	4b3e      	ldr	r3, [pc, #248]	@ (8007be4 <xPortStartScheduler+0x124>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a3f      	ldr	r2, [pc, #252]	@ (8007bec <xPortStartScheduler+0x12c>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d10b      	bne.n	8007b0a <xPortStartScheduler+0x4a>
	__asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	613b      	str	r3, [r7, #16]
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop
 8007b08:	e7fd      	b.n	8007b06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b0a:	4b39      	ldr	r3, [pc, #228]	@ (8007bf0 <xPortStartScheduler+0x130>)
 8007b0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	22ff      	movs	r2, #255	@ 0xff
 8007b1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	4b31      	ldr	r3, [pc, #196]	@ (8007bf4 <xPortStartScheduler+0x134>)
 8007b30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b32:	4b31      	ldr	r3, [pc, #196]	@ (8007bf8 <xPortStartScheduler+0x138>)
 8007b34:	2207      	movs	r2, #7
 8007b36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b38:	e009      	b.n	8007b4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8007bf8 <xPortStartScheduler+0x138>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	4a2d      	ldr	r2, [pc, #180]	@ (8007bf8 <xPortStartScheduler+0x138>)
 8007b42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b44:	78fb      	ldrb	r3, [r7, #3]
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b4e:	78fb      	ldrb	r3, [r7, #3]
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b56:	2b80      	cmp	r3, #128	@ 0x80
 8007b58:	d0ef      	beq.n	8007b3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b5a:	4b27      	ldr	r3, [pc, #156]	@ (8007bf8 <xPortStartScheduler+0x138>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f1c3 0307 	rsb	r3, r3, #7
 8007b62:	2b04      	cmp	r3, #4
 8007b64:	d00b      	beq.n	8007b7e <xPortStartScheduler+0xbe>
	__asm volatile
 8007b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	60bb      	str	r3, [r7, #8]
}
 8007b78:	bf00      	nop
 8007b7a:	bf00      	nop
 8007b7c:	e7fd      	b.n	8007b7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8007bf8 <xPortStartScheduler+0x138>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	021b      	lsls	r3, r3, #8
 8007b84:	4a1c      	ldr	r2, [pc, #112]	@ (8007bf8 <xPortStartScheduler+0x138>)
 8007b86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b88:	4b1b      	ldr	r3, [pc, #108]	@ (8007bf8 <xPortStartScheduler+0x138>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b90:	4a19      	ldr	r2, [pc, #100]	@ (8007bf8 <xPortStartScheduler+0x138>)
 8007b92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b9c:	4b17      	ldr	r3, [pc, #92]	@ (8007bfc <xPortStartScheduler+0x13c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a16      	ldr	r2, [pc, #88]	@ (8007bfc <xPortStartScheduler+0x13c>)
 8007ba2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007ba6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ba8:	4b14      	ldr	r3, [pc, #80]	@ (8007bfc <xPortStartScheduler+0x13c>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a13      	ldr	r2, [pc, #76]	@ (8007bfc <xPortStartScheduler+0x13c>)
 8007bae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007bb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007bb4:	f000 f8da 	bl	8007d6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007bb8:	4b11      	ldr	r3, [pc, #68]	@ (8007c00 <xPortStartScheduler+0x140>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007bbe:	f000 f8f9 	bl	8007db4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007bc2:	4b10      	ldr	r3, [pc, #64]	@ (8007c04 <xPortStartScheduler+0x144>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8007c04 <xPortStartScheduler+0x144>)
 8007bc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007bcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007bce:	f7ff ff63 	bl	8007a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007bd2:	f7ff f82b 	bl	8006c2c <vTaskSwitchContext>
	prvTaskExitError();
 8007bd6:	f7ff ff17 	bl	8007a08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	e000ed00 	.word	0xe000ed00
 8007be8:	410fc271 	.word	0x410fc271
 8007bec:	410fc270 	.word	0x410fc270
 8007bf0:	e000e400 	.word	0xe000e400
 8007bf4:	20001668 	.word	0x20001668
 8007bf8:	2000166c 	.word	0x2000166c
 8007bfc:	e000ed20 	.word	0xe000ed20
 8007c00:	2000000c 	.word	0x2000000c
 8007c04:	e000ef34 	.word	0xe000ef34

08007c08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	607b      	str	r3, [r7, #4]
}
 8007c20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c22:	4b10      	ldr	r3, [pc, #64]	@ (8007c64 <vPortEnterCritical+0x5c>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3301      	adds	r3, #1
 8007c28:	4a0e      	ldr	r2, [pc, #56]	@ (8007c64 <vPortEnterCritical+0x5c>)
 8007c2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c64 <vPortEnterCritical+0x5c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d110      	bne.n	8007c56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c34:	4b0c      	ldr	r3, [pc, #48]	@ (8007c68 <vPortEnterCritical+0x60>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00b      	beq.n	8007c56 <vPortEnterCritical+0x4e>
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	603b      	str	r3, [r7, #0]
}
 8007c50:	bf00      	nop
 8007c52:	bf00      	nop
 8007c54:	e7fd      	b.n	8007c52 <vPortEnterCritical+0x4a>
	}
}
 8007c56:	bf00      	nop
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	2000000c 	.word	0x2000000c
 8007c68:	e000ed04 	.word	0xe000ed04

08007c6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c72:	4b12      	ldr	r3, [pc, #72]	@ (8007cbc <vPortExitCritical+0x50>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10b      	bne.n	8007c92 <vPortExitCritical+0x26>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	607b      	str	r3, [r7, #4]
}
 8007c8c:	bf00      	nop
 8007c8e:	bf00      	nop
 8007c90:	e7fd      	b.n	8007c8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c92:	4b0a      	ldr	r3, [pc, #40]	@ (8007cbc <vPortExitCritical+0x50>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	4a08      	ldr	r2, [pc, #32]	@ (8007cbc <vPortExitCritical+0x50>)
 8007c9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c9c:	4b07      	ldr	r3, [pc, #28]	@ (8007cbc <vPortExitCritical+0x50>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d105      	bne.n	8007cb0 <vPortExitCritical+0x44>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	f383 8811 	msr	BASEPRI, r3
}
 8007cae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	2000000c 	.word	0x2000000c

08007cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007cc0:	f3ef 8009 	mrs	r0, PSP
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	4b15      	ldr	r3, [pc, #84]	@ (8007d20 <pxCurrentTCBConst>)
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	f01e 0f10 	tst.w	lr, #16
 8007cd0:	bf08      	it	eq
 8007cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cda:	6010      	str	r0, [r2, #0]
 8007cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ce0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007ce4:	f380 8811 	msr	BASEPRI, r0
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f7fe ff9c 	bl	8006c2c <vTaskSwitchContext>
 8007cf4:	f04f 0000 	mov.w	r0, #0
 8007cf8:	f380 8811 	msr	BASEPRI, r0
 8007cfc:	bc09      	pop	{r0, r3}
 8007cfe:	6819      	ldr	r1, [r3, #0]
 8007d00:	6808      	ldr	r0, [r1, #0]
 8007d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d06:	f01e 0f10 	tst.w	lr, #16
 8007d0a:	bf08      	it	eq
 8007d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d10:	f380 8809 	msr	PSP, r0
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	f3af 8000 	nop.w

08007d20 <pxCurrentTCBConst>:
 8007d20:	2000103c 	.word	0x2000103c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop

08007d28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	607b      	str	r3, [r7, #4]
}
 8007d40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d42:	f7fe feb9 	bl	8006ab8 <xTaskIncrementTick>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d4c:	4b06      	ldr	r3, [pc, #24]	@ (8007d68 <xPortSysTickHandler+0x40>)
 8007d4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	2300      	movs	r3, #0
 8007d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	f383 8811 	msr	BASEPRI, r3
}
 8007d5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d60:	bf00      	nop
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	e000ed04 	.word	0xe000ed04

08007d6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d70:	4b0b      	ldr	r3, [pc, #44]	@ (8007da0 <vPortSetupTimerInterrupt+0x34>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d76:	4b0b      	ldr	r3, [pc, #44]	@ (8007da4 <vPortSetupTimerInterrupt+0x38>)
 8007d78:	2200      	movs	r2, #0
 8007d7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8007da8 <vPortSetupTimerInterrupt+0x3c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a0a      	ldr	r2, [pc, #40]	@ (8007dac <vPortSetupTimerInterrupt+0x40>)
 8007d82:	fba2 2303 	umull	r2, r3, r2, r3
 8007d86:	099b      	lsrs	r3, r3, #6
 8007d88:	4a09      	ldr	r2, [pc, #36]	@ (8007db0 <vPortSetupTimerInterrupt+0x44>)
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d8e:	4b04      	ldr	r3, [pc, #16]	@ (8007da0 <vPortSetupTimerInterrupt+0x34>)
 8007d90:	2207      	movs	r2, #7
 8007d92:	601a      	str	r2, [r3, #0]
}
 8007d94:	bf00      	nop
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	e000e010 	.word	0xe000e010
 8007da4:	e000e018 	.word	0xe000e018
 8007da8:	20000000 	.word	0x20000000
 8007dac:	10624dd3 	.word	0x10624dd3
 8007db0:	e000e014 	.word	0xe000e014

08007db4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007db4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007dc4 <vPortEnableVFP+0x10>
 8007db8:	6801      	ldr	r1, [r0, #0]
 8007dba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007dbe:	6001      	str	r1, [r0, #0]
 8007dc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007dc2:	bf00      	nop
 8007dc4:	e000ed88 	.word	0xe000ed88

08007dc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007dce:	f3ef 8305 	mrs	r3, IPSR
 8007dd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b0f      	cmp	r3, #15
 8007dd8:	d915      	bls.n	8007e06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007dda:	4a18      	ldr	r2, [pc, #96]	@ (8007e3c <vPortValidateInterruptPriority+0x74>)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4413      	add	r3, r2
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007de4:	4b16      	ldr	r3, [pc, #88]	@ (8007e40 <vPortValidateInterruptPriority+0x78>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	7afa      	ldrb	r2, [r7, #11]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d20b      	bcs.n	8007e06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	607b      	str	r3, [r7, #4]
}
 8007e00:	bf00      	nop
 8007e02:	bf00      	nop
 8007e04:	e7fd      	b.n	8007e02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e06:	4b0f      	ldr	r3, [pc, #60]	@ (8007e44 <vPortValidateInterruptPriority+0x7c>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e48 <vPortValidateInterruptPriority+0x80>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d90b      	bls.n	8007e2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	603b      	str	r3, [r7, #0]
}
 8007e28:	bf00      	nop
 8007e2a:	bf00      	nop
 8007e2c:	e7fd      	b.n	8007e2a <vPortValidateInterruptPriority+0x62>
	}
 8007e2e:	bf00      	nop
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	e000e3f0 	.word	0xe000e3f0
 8007e40:	20001668 	.word	0x20001668
 8007e44:	e000ed0c 	.word	0xe000ed0c
 8007e48:	2000166c 	.word	0x2000166c

08007e4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b08a      	sub	sp, #40	@ 0x28
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e54:	2300      	movs	r3, #0
 8007e56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e58:	f7fe fd72 	bl	8006940 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e5c:	4b5c      	ldr	r3, [pc, #368]	@ (8007fd0 <pvPortMalloc+0x184>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e64:	f000 f924 	bl	80080b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e68:	4b5a      	ldr	r3, [pc, #360]	@ (8007fd4 <pvPortMalloc+0x188>)
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4013      	ands	r3, r2
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f040 8095 	bne.w	8007fa0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d01e      	beq.n	8007eba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007e7c:	2208      	movs	r2, #8
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4413      	add	r3, r2
 8007e82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f003 0307 	and.w	r3, r3, #7
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d015      	beq.n	8007eba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f023 0307 	bic.w	r3, r3, #7
 8007e94:	3308      	adds	r3, #8
 8007e96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f003 0307 	and.w	r3, r3, #7
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00b      	beq.n	8007eba <pvPortMalloc+0x6e>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	617b      	str	r3, [r7, #20]
}
 8007eb4:	bf00      	nop
 8007eb6:	bf00      	nop
 8007eb8:	e7fd      	b.n	8007eb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d06f      	beq.n	8007fa0 <pvPortMalloc+0x154>
 8007ec0:	4b45      	ldr	r3, [pc, #276]	@ (8007fd8 <pvPortMalloc+0x18c>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d86a      	bhi.n	8007fa0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007eca:	4b44      	ldr	r3, [pc, #272]	@ (8007fdc <pvPortMalloc+0x190>)
 8007ecc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ece:	4b43      	ldr	r3, [pc, #268]	@ (8007fdc <pvPortMalloc+0x190>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ed4:	e004      	b.n	8007ee0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d903      	bls.n	8007ef2 <pvPortMalloc+0xa6>
 8007eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1f1      	bne.n	8007ed6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ef2:	4b37      	ldr	r3, [pc, #220]	@ (8007fd0 <pvPortMalloc+0x184>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d051      	beq.n	8007fa0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2208      	movs	r2, #8
 8007f02:	4413      	add	r3, r2
 8007f04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	1ad2      	subs	r2, r2, r3
 8007f16:	2308      	movs	r3, #8
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d920      	bls.n	8007f60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4413      	add	r3, r2
 8007f24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	f003 0307 	and.w	r3, r3, #7
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00b      	beq.n	8007f48 <pvPortMalloc+0xfc>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	613b      	str	r3, [r7, #16]
}
 8007f42:	bf00      	nop
 8007f44:	bf00      	nop
 8007f46:	e7fd      	b.n	8007f44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	1ad2      	subs	r2, r2, r3
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f5a:	69b8      	ldr	r0, [r7, #24]
 8007f5c:	f000 f90a 	bl	8008174 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f60:	4b1d      	ldr	r3, [pc, #116]	@ (8007fd8 <pvPortMalloc+0x18c>)
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8007fd8 <pvPortMalloc+0x18c>)
 8007f6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8007fd8 <pvPortMalloc+0x18c>)
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	4b1b      	ldr	r3, [pc, #108]	@ (8007fe0 <pvPortMalloc+0x194>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d203      	bcs.n	8007f82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f7a:	4b17      	ldr	r3, [pc, #92]	@ (8007fd8 <pvPortMalloc+0x18c>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a18      	ldr	r2, [pc, #96]	@ (8007fe0 <pvPortMalloc+0x194>)
 8007f80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	4b13      	ldr	r3, [pc, #76]	@ (8007fd4 <pvPortMalloc+0x188>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007f96:	4b13      	ldr	r3, [pc, #76]	@ (8007fe4 <pvPortMalloc+0x198>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	4a11      	ldr	r2, [pc, #68]	@ (8007fe4 <pvPortMalloc+0x198>)
 8007f9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007fa0:	f7fe fcdc 	bl	800695c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	f003 0307 	and.w	r3, r3, #7
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00b      	beq.n	8007fc6 <pvPortMalloc+0x17a>
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	60fb      	str	r3, [r7, #12]
}
 8007fc0:	bf00      	nop
 8007fc2:	bf00      	nop
 8007fc4:	e7fd      	b.n	8007fc2 <pvPortMalloc+0x176>
	return pvReturn;
 8007fc6:	69fb      	ldr	r3, [r7, #28]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3728      	adds	r7, #40	@ 0x28
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	20009678 	.word	0x20009678
 8007fd4:	2000968c 	.word	0x2000968c
 8007fd8:	2000967c 	.word	0x2000967c
 8007fdc:	20009670 	.word	0x20009670
 8007fe0:	20009680 	.word	0x20009680
 8007fe4:	20009684 	.word	0x20009684

08007fe8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d04f      	beq.n	800809a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ffa:	2308      	movs	r3, #8
 8007ffc:	425b      	negs	r3, r3
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	4413      	add	r3, r2
 8008002:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	4b25      	ldr	r3, [pc, #148]	@ (80080a4 <vPortFree+0xbc>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4013      	ands	r3, r2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10b      	bne.n	800802e <vPortFree+0x46>
	__asm volatile
 8008016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	60fb      	str	r3, [r7, #12]
}
 8008028:	bf00      	nop
 800802a:	bf00      	nop
 800802c:	e7fd      	b.n	800802a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00b      	beq.n	800804e <vPortFree+0x66>
	__asm volatile
 8008036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	60bb      	str	r3, [r7, #8]
}
 8008048:	bf00      	nop
 800804a:	bf00      	nop
 800804c:	e7fd      	b.n	800804a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	685a      	ldr	r2, [r3, #4]
 8008052:	4b14      	ldr	r3, [pc, #80]	@ (80080a4 <vPortFree+0xbc>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4013      	ands	r3, r2
 8008058:	2b00      	cmp	r3, #0
 800805a:	d01e      	beq.n	800809a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d11a      	bne.n	800809a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	4b0e      	ldr	r3, [pc, #56]	@ (80080a4 <vPortFree+0xbc>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	43db      	mvns	r3, r3
 800806e:	401a      	ands	r2, r3
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008074:	f7fe fc64 	bl	8006940 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	4b0a      	ldr	r3, [pc, #40]	@ (80080a8 <vPortFree+0xc0>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4413      	add	r3, r2
 8008082:	4a09      	ldr	r2, [pc, #36]	@ (80080a8 <vPortFree+0xc0>)
 8008084:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008086:	6938      	ldr	r0, [r7, #16]
 8008088:	f000 f874 	bl	8008174 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800808c:	4b07      	ldr	r3, [pc, #28]	@ (80080ac <vPortFree+0xc4>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	3301      	adds	r3, #1
 8008092:	4a06      	ldr	r2, [pc, #24]	@ (80080ac <vPortFree+0xc4>)
 8008094:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008096:	f7fe fc61 	bl	800695c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800809a:	bf00      	nop
 800809c:	3718      	adds	r7, #24
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	2000968c 	.word	0x2000968c
 80080a8:	2000967c 	.word	0x2000967c
 80080ac:	20009688 	.word	0x20009688

080080b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080bc:	4b27      	ldr	r3, [pc, #156]	@ (800815c <prvHeapInit+0xac>)
 80080be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f003 0307 	and.w	r3, r3, #7
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00c      	beq.n	80080e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	3307      	adds	r3, #7
 80080ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f023 0307 	bic.w	r3, r3, #7
 80080d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	4a1f      	ldr	r2, [pc, #124]	@ (800815c <prvHeapInit+0xac>)
 80080e0:	4413      	add	r3, r2
 80080e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008160 <prvHeapInit+0xb0>)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008160 <prvHeapInit+0xb0>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	4413      	add	r3, r2
 80080fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080fc:	2208      	movs	r2, #8
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	1a9b      	subs	r3, r3, r2
 8008102:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f023 0307 	bic.w	r3, r3, #7
 800810a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	4a15      	ldr	r2, [pc, #84]	@ (8008164 <prvHeapInit+0xb4>)
 8008110:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008112:	4b14      	ldr	r3, [pc, #80]	@ (8008164 <prvHeapInit+0xb4>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2200      	movs	r2, #0
 8008118:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800811a:	4b12      	ldr	r3, [pc, #72]	@ (8008164 <prvHeapInit+0xb4>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2200      	movs	r2, #0
 8008120:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	1ad2      	subs	r2, r2, r3
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008130:	4b0c      	ldr	r3, [pc, #48]	@ (8008164 <prvHeapInit+0xb4>)
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	4a0a      	ldr	r2, [pc, #40]	@ (8008168 <prvHeapInit+0xb8>)
 800813e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	4a09      	ldr	r2, [pc, #36]	@ (800816c <prvHeapInit+0xbc>)
 8008146:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008148:	4b09      	ldr	r3, [pc, #36]	@ (8008170 <prvHeapInit+0xc0>)
 800814a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800814e:	601a      	str	r2, [r3, #0]
}
 8008150:	bf00      	nop
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	20001670 	.word	0x20001670
 8008160:	20009670 	.word	0x20009670
 8008164:	20009678 	.word	0x20009678
 8008168:	20009680 	.word	0x20009680
 800816c:	2000967c 	.word	0x2000967c
 8008170:	2000968c 	.word	0x2000968c

08008174 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800817c:	4b28      	ldr	r3, [pc, #160]	@ (8008220 <prvInsertBlockIntoFreeList+0xac>)
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	e002      	b.n	8008188 <prvInsertBlockIntoFreeList+0x14>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	429a      	cmp	r2, r3
 8008190:	d8f7      	bhi.n	8008182 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	4413      	add	r3, r2
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d108      	bne.n	80081b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	441a      	add	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	441a      	add	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d118      	bne.n	80081fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	4b15      	ldr	r3, [pc, #84]	@ (8008224 <prvInsertBlockIntoFreeList+0xb0>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d00d      	beq.n	80081f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	441a      	add	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	e008      	b.n	8008204 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008224 <prvInsertBlockIntoFreeList+0xb0>)
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	e003      	b.n	8008204 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	429a      	cmp	r2, r3
 800820a:	d002      	beq.n	8008212 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008212:	bf00      	nop
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	20009670 	.word	0x20009670
 8008224:	20009678 	.word	0x20009678

08008228 <std>:
 8008228:	2300      	movs	r3, #0
 800822a:	b510      	push	{r4, lr}
 800822c:	4604      	mov	r4, r0
 800822e:	e9c0 3300 	strd	r3, r3, [r0]
 8008232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008236:	6083      	str	r3, [r0, #8]
 8008238:	8181      	strh	r1, [r0, #12]
 800823a:	6643      	str	r3, [r0, #100]	@ 0x64
 800823c:	81c2      	strh	r2, [r0, #14]
 800823e:	6183      	str	r3, [r0, #24]
 8008240:	4619      	mov	r1, r3
 8008242:	2208      	movs	r2, #8
 8008244:	305c      	adds	r0, #92	@ 0x5c
 8008246:	f000 f9e7 	bl	8008618 <memset>
 800824a:	4b0d      	ldr	r3, [pc, #52]	@ (8008280 <std+0x58>)
 800824c:	6263      	str	r3, [r4, #36]	@ 0x24
 800824e:	4b0d      	ldr	r3, [pc, #52]	@ (8008284 <std+0x5c>)
 8008250:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008252:	4b0d      	ldr	r3, [pc, #52]	@ (8008288 <std+0x60>)
 8008254:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008256:	4b0d      	ldr	r3, [pc, #52]	@ (800828c <std+0x64>)
 8008258:	6323      	str	r3, [r4, #48]	@ 0x30
 800825a:	4b0d      	ldr	r3, [pc, #52]	@ (8008290 <std+0x68>)
 800825c:	6224      	str	r4, [r4, #32]
 800825e:	429c      	cmp	r4, r3
 8008260:	d006      	beq.n	8008270 <std+0x48>
 8008262:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008266:	4294      	cmp	r4, r2
 8008268:	d002      	beq.n	8008270 <std+0x48>
 800826a:	33d0      	adds	r3, #208	@ 0xd0
 800826c:	429c      	cmp	r4, r3
 800826e:	d105      	bne.n	800827c <std+0x54>
 8008270:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008278:	f000 baa4 	b.w	80087c4 <__retarget_lock_init_recursive>
 800827c:	bd10      	pop	{r4, pc}
 800827e:	bf00      	nop
 8008280:	08008469 	.word	0x08008469
 8008284:	0800848b 	.word	0x0800848b
 8008288:	080084c3 	.word	0x080084c3
 800828c:	080084e7 	.word	0x080084e7
 8008290:	20009690 	.word	0x20009690

08008294 <stdio_exit_handler>:
 8008294:	4a02      	ldr	r2, [pc, #8]	@ (80082a0 <stdio_exit_handler+0xc>)
 8008296:	4903      	ldr	r1, [pc, #12]	@ (80082a4 <stdio_exit_handler+0x10>)
 8008298:	4803      	ldr	r0, [pc, #12]	@ (80082a8 <stdio_exit_handler+0x14>)
 800829a:	f000 b869 	b.w	8008370 <_fwalk_sglue>
 800829e:	bf00      	nop
 80082a0:	20000010 	.word	0x20000010
 80082a4:	08008ae1 	.word	0x08008ae1
 80082a8:	20000020 	.word	0x20000020

080082ac <cleanup_stdio>:
 80082ac:	6841      	ldr	r1, [r0, #4]
 80082ae:	4b0c      	ldr	r3, [pc, #48]	@ (80082e0 <cleanup_stdio+0x34>)
 80082b0:	4299      	cmp	r1, r3
 80082b2:	b510      	push	{r4, lr}
 80082b4:	4604      	mov	r4, r0
 80082b6:	d001      	beq.n	80082bc <cleanup_stdio+0x10>
 80082b8:	f000 fc12 	bl	8008ae0 <_fflush_r>
 80082bc:	68a1      	ldr	r1, [r4, #8]
 80082be:	4b09      	ldr	r3, [pc, #36]	@ (80082e4 <cleanup_stdio+0x38>)
 80082c0:	4299      	cmp	r1, r3
 80082c2:	d002      	beq.n	80082ca <cleanup_stdio+0x1e>
 80082c4:	4620      	mov	r0, r4
 80082c6:	f000 fc0b 	bl	8008ae0 <_fflush_r>
 80082ca:	68e1      	ldr	r1, [r4, #12]
 80082cc:	4b06      	ldr	r3, [pc, #24]	@ (80082e8 <cleanup_stdio+0x3c>)
 80082ce:	4299      	cmp	r1, r3
 80082d0:	d004      	beq.n	80082dc <cleanup_stdio+0x30>
 80082d2:	4620      	mov	r0, r4
 80082d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082d8:	f000 bc02 	b.w	8008ae0 <_fflush_r>
 80082dc:	bd10      	pop	{r4, pc}
 80082de:	bf00      	nop
 80082e0:	20009690 	.word	0x20009690
 80082e4:	200096f8 	.word	0x200096f8
 80082e8:	20009760 	.word	0x20009760

080082ec <global_stdio_init.part.0>:
 80082ec:	b510      	push	{r4, lr}
 80082ee:	4b0b      	ldr	r3, [pc, #44]	@ (800831c <global_stdio_init.part.0+0x30>)
 80082f0:	4c0b      	ldr	r4, [pc, #44]	@ (8008320 <global_stdio_init.part.0+0x34>)
 80082f2:	4a0c      	ldr	r2, [pc, #48]	@ (8008324 <global_stdio_init.part.0+0x38>)
 80082f4:	601a      	str	r2, [r3, #0]
 80082f6:	4620      	mov	r0, r4
 80082f8:	2200      	movs	r2, #0
 80082fa:	2104      	movs	r1, #4
 80082fc:	f7ff ff94 	bl	8008228 <std>
 8008300:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008304:	2201      	movs	r2, #1
 8008306:	2109      	movs	r1, #9
 8008308:	f7ff ff8e 	bl	8008228 <std>
 800830c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008310:	2202      	movs	r2, #2
 8008312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008316:	2112      	movs	r1, #18
 8008318:	f7ff bf86 	b.w	8008228 <std>
 800831c:	200097c8 	.word	0x200097c8
 8008320:	20009690 	.word	0x20009690
 8008324:	08008295 	.word	0x08008295

08008328 <__sfp_lock_acquire>:
 8008328:	4801      	ldr	r0, [pc, #4]	@ (8008330 <__sfp_lock_acquire+0x8>)
 800832a:	f000 ba4c 	b.w	80087c6 <__retarget_lock_acquire_recursive>
 800832e:	bf00      	nop
 8008330:	200097d1 	.word	0x200097d1

08008334 <__sfp_lock_release>:
 8008334:	4801      	ldr	r0, [pc, #4]	@ (800833c <__sfp_lock_release+0x8>)
 8008336:	f000 ba47 	b.w	80087c8 <__retarget_lock_release_recursive>
 800833a:	bf00      	nop
 800833c:	200097d1 	.word	0x200097d1

08008340 <__sinit>:
 8008340:	b510      	push	{r4, lr}
 8008342:	4604      	mov	r4, r0
 8008344:	f7ff fff0 	bl	8008328 <__sfp_lock_acquire>
 8008348:	6a23      	ldr	r3, [r4, #32]
 800834a:	b11b      	cbz	r3, 8008354 <__sinit+0x14>
 800834c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008350:	f7ff bff0 	b.w	8008334 <__sfp_lock_release>
 8008354:	4b04      	ldr	r3, [pc, #16]	@ (8008368 <__sinit+0x28>)
 8008356:	6223      	str	r3, [r4, #32]
 8008358:	4b04      	ldr	r3, [pc, #16]	@ (800836c <__sinit+0x2c>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1f5      	bne.n	800834c <__sinit+0xc>
 8008360:	f7ff ffc4 	bl	80082ec <global_stdio_init.part.0>
 8008364:	e7f2      	b.n	800834c <__sinit+0xc>
 8008366:	bf00      	nop
 8008368:	080082ad 	.word	0x080082ad
 800836c:	200097c8 	.word	0x200097c8

08008370 <_fwalk_sglue>:
 8008370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008374:	4607      	mov	r7, r0
 8008376:	4688      	mov	r8, r1
 8008378:	4614      	mov	r4, r2
 800837a:	2600      	movs	r6, #0
 800837c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008380:	f1b9 0901 	subs.w	r9, r9, #1
 8008384:	d505      	bpl.n	8008392 <_fwalk_sglue+0x22>
 8008386:	6824      	ldr	r4, [r4, #0]
 8008388:	2c00      	cmp	r4, #0
 800838a:	d1f7      	bne.n	800837c <_fwalk_sglue+0xc>
 800838c:	4630      	mov	r0, r6
 800838e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008392:	89ab      	ldrh	r3, [r5, #12]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d907      	bls.n	80083a8 <_fwalk_sglue+0x38>
 8008398:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800839c:	3301      	adds	r3, #1
 800839e:	d003      	beq.n	80083a8 <_fwalk_sglue+0x38>
 80083a0:	4629      	mov	r1, r5
 80083a2:	4638      	mov	r0, r7
 80083a4:	47c0      	blx	r8
 80083a6:	4306      	orrs	r6, r0
 80083a8:	3568      	adds	r5, #104	@ 0x68
 80083aa:	e7e9      	b.n	8008380 <_fwalk_sglue+0x10>

080083ac <_puts_r>:
 80083ac:	6a03      	ldr	r3, [r0, #32]
 80083ae:	b570      	push	{r4, r5, r6, lr}
 80083b0:	6884      	ldr	r4, [r0, #8]
 80083b2:	4605      	mov	r5, r0
 80083b4:	460e      	mov	r6, r1
 80083b6:	b90b      	cbnz	r3, 80083bc <_puts_r+0x10>
 80083b8:	f7ff ffc2 	bl	8008340 <__sinit>
 80083bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083be:	07db      	lsls	r3, r3, #31
 80083c0:	d405      	bmi.n	80083ce <_puts_r+0x22>
 80083c2:	89a3      	ldrh	r3, [r4, #12]
 80083c4:	0598      	lsls	r0, r3, #22
 80083c6:	d402      	bmi.n	80083ce <_puts_r+0x22>
 80083c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083ca:	f000 f9fc 	bl	80087c6 <__retarget_lock_acquire_recursive>
 80083ce:	89a3      	ldrh	r3, [r4, #12]
 80083d0:	0719      	lsls	r1, r3, #28
 80083d2:	d502      	bpl.n	80083da <_puts_r+0x2e>
 80083d4:	6923      	ldr	r3, [r4, #16]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d135      	bne.n	8008446 <_puts_r+0x9a>
 80083da:	4621      	mov	r1, r4
 80083dc:	4628      	mov	r0, r5
 80083de:	f000 f8c5 	bl	800856c <__swsetup_r>
 80083e2:	b380      	cbz	r0, 8008446 <_puts_r+0x9a>
 80083e4:	f04f 35ff 	mov.w	r5, #4294967295
 80083e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083ea:	07da      	lsls	r2, r3, #31
 80083ec:	d405      	bmi.n	80083fa <_puts_r+0x4e>
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	059b      	lsls	r3, r3, #22
 80083f2:	d402      	bmi.n	80083fa <_puts_r+0x4e>
 80083f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083f6:	f000 f9e7 	bl	80087c8 <__retarget_lock_release_recursive>
 80083fa:	4628      	mov	r0, r5
 80083fc:	bd70      	pop	{r4, r5, r6, pc}
 80083fe:	2b00      	cmp	r3, #0
 8008400:	da04      	bge.n	800840c <_puts_r+0x60>
 8008402:	69a2      	ldr	r2, [r4, #24]
 8008404:	429a      	cmp	r2, r3
 8008406:	dc17      	bgt.n	8008438 <_puts_r+0x8c>
 8008408:	290a      	cmp	r1, #10
 800840a:	d015      	beq.n	8008438 <_puts_r+0x8c>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	6022      	str	r2, [r4, #0]
 8008412:	7019      	strb	r1, [r3, #0]
 8008414:	68a3      	ldr	r3, [r4, #8]
 8008416:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800841a:	3b01      	subs	r3, #1
 800841c:	60a3      	str	r3, [r4, #8]
 800841e:	2900      	cmp	r1, #0
 8008420:	d1ed      	bne.n	80083fe <_puts_r+0x52>
 8008422:	2b00      	cmp	r3, #0
 8008424:	da11      	bge.n	800844a <_puts_r+0x9e>
 8008426:	4622      	mov	r2, r4
 8008428:	210a      	movs	r1, #10
 800842a:	4628      	mov	r0, r5
 800842c:	f000 f85f 	bl	80084ee <__swbuf_r>
 8008430:	3001      	adds	r0, #1
 8008432:	d0d7      	beq.n	80083e4 <_puts_r+0x38>
 8008434:	250a      	movs	r5, #10
 8008436:	e7d7      	b.n	80083e8 <_puts_r+0x3c>
 8008438:	4622      	mov	r2, r4
 800843a:	4628      	mov	r0, r5
 800843c:	f000 f857 	bl	80084ee <__swbuf_r>
 8008440:	3001      	adds	r0, #1
 8008442:	d1e7      	bne.n	8008414 <_puts_r+0x68>
 8008444:	e7ce      	b.n	80083e4 <_puts_r+0x38>
 8008446:	3e01      	subs	r6, #1
 8008448:	e7e4      	b.n	8008414 <_puts_r+0x68>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	1c5a      	adds	r2, r3, #1
 800844e:	6022      	str	r2, [r4, #0]
 8008450:	220a      	movs	r2, #10
 8008452:	701a      	strb	r2, [r3, #0]
 8008454:	e7ee      	b.n	8008434 <_puts_r+0x88>
	...

08008458 <puts>:
 8008458:	4b02      	ldr	r3, [pc, #8]	@ (8008464 <puts+0xc>)
 800845a:	4601      	mov	r1, r0
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	f7ff bfa5 	b.w	80083ac <_puts_r>
 8008462:	bf00      	nop
 8008464:	2000001c 	.word	0x2000001c

08008468 <__sread>:
 8008468:	b510      	push	{r4, lr}
 800846a:	460c      	mov	r4, r1
 800846c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008470:	f000 f95a 	bl	8008728 <_read_r>
 8008474:	2800      	cmp	r0, #0
 8008476:	bfab      	itete	ge
 8008478:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800847a:	89a3      	ldrhlt	r3, [r4, #12]
 800847c:	181b      	addge	r3, r3, r0
 800847e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008482:	bfac      	ite	ge
 8008484:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008486:	81a3      	strhlt	r3, [r4, #12]
 8008488:	bd10      	pop	{r4, pc}

0800848a <__swrite>:
 800848a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800848e:	461f      	mov	r7, r3
 8008490:	898b      	ldrh	r3, [r1, #12]
 8008492:	05db      	lsls	r3, r3, #23
 8008494:	4605      	mov	r5, r0
 8008496:	460c      	mov	r4, r1
 8008498:	4616      	mov	r6, r2
 800849a:	d505      	bpl.n	80084a8 <__swrite+0x1e>
 800849c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a0:	2302      	movs	r3, #2
 80084a2:	2200      	movs	r2, #0
 80084a4:	f000 f92e 	bl	8008704 <_lseek_r>
 80084a8:	89a3      	ldrh	r3, [r4, #12]
 80084aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084b2:	81a3      	strh	r3, [r4, #12]
 80084b4:	4632      	mov	r2, r6
 80084b6:	463b      	mov	r3, r7
 80084b8:	4628      	mov	r0, r5
 80084ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084be:	f000 b945 	b.w	800874c <_write_r>

080084c2 <__sseek>:
 80084c2:	b510      	push	{r4, lr}
 80084c4:	460c      	mov	r4, r1
 80084c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ca:	f000 f91b 	bl	8008704 <_lseek_r>
 80084ce:	1c43      	adds	r3, r0, #1
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	bf15      	itete	ne
 80084d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80084d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80084da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80084de:	81a3      	strheq	r3, [r4, #12]
 80084e0:	bf18      	it	ne
 80084e2:	81a3      	strhne	r3, [r4, #12]
 80084e4:	bd10      	pop	{r4, pc}

080084e6 <__sclose>:
 80084e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ea:	f000 b89d 	b.w	8008628 <_close_r>

080084ee <__swbuf_r>:
 80084ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f0:	460e      	mov	r6, r1
 80084f2:	4614      	mov	r4, r2
 80084f4:	4605      	mov	r5, r0
 80084f6:	b118      	cbz	r0, 8008500 <__swbuf_r+0x12>
 80084f8:	6a03      	ldr	r3, [r0, #32]
 80084fa:	b90b      	cbnz	r3, 8008500 <__swbuf_r+0x12>
 80084fc:	f7ff ff20 	bl	8008340 <__sinit>
 8008500:	69a3      	ldr	r3, [r4, #24]
 8008502:	60a3      	str	r3, [r4, #8]
 8008504:	89a3      	ldrh	r3, [r4, #12]
 8008506:	071a      	lsls	r2, r3, #28
 8008508:	d501      	bpl.n	800850e <__swbuf_r+0x20>
 800850a:	6923      	ldr	r3, [r4, #16]
 800850c:	b943      	cbnz	r3, 8008520 <__swbuf_r+0x32>
 800850e:	4621      	mov	r1, r4
 8008510:	4628      	mov	r0, r5
 8008512:	f000 f82b 	bl	800856c <__swsetup_r>
 8008516:	b118      	cbz	r0, 8008520 <__swbuf_r+0x32>
 8008518:	f04f 37ff 	mov.w	r7, #4294967295
 800851c:	4638      	mov	r0, r7
 800851e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	6922      	ldr	r2, [r4, #16]
 8008524:	1a98      	subs	r0, r3, r2
 8008526:	6963      	ldr	r3, [r4, #20]
 8008528:	b2f6      	uxtb	r6, r6
 800852a:	4283      	cmp	r3, r0
 800852c:	4637      	mov	r7, r6
 800852e:	dc05      	bgt.n	800853c <__swbuf_r+0x4e>
 8008530:	4621      	mov	r1, r4
 8008532:	4628      	mov	r0, r5
 8008534:	f000 fad4 	bl	8008ae0 <_fflush_r>
 8008538:	2800      	cmp	r0, #0
 800853a:	d1ed      	bne.n	8008518 <__swbuf_r+0x2a>
 800853c:	68a3      	ldr	r3, [r4, #8]
 800853e:	3b01      	subs	r3, #1
 8008540:	60a3      	str	r3, [r4, #8]
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	6022      	str	r2, [r4, #0]
 8008548:	701e      	strb	r6, [r3, #0]
 800854a:	6962      	ldr	r2, [r4, #20]
 800854c:	1c43      	adds	r3, r0, #1
 800854e:	429a      	cmp	r2, r3
 8008550:	d004      	beq.n	800855c <__swbuf_r+0x6e>
 8008552:	89a3      	ldrh	r3, [r4, #12]
 8008554:	07db      	lsls	r3, r3, #31
 8008556:	d5e1      	bpl.n	800851c <__swbuf_r+0x2e>
 8008558:	2e0a      	cmp	r6, #10
 800855a:	d1df      	bne.n	800851c <__swbuf_r+0x2e>
 800855c:	4621      	mov	r1, r4
 800855e:	4628      	mov	r0, r5
 8008560:	f000 fabe 	bl	8008ae0 <_fflush_r>
 8008564:	2800      	cmp	r0, #0
 8008566:	d0d9      	beq.n	800851c <__swbuf_r+0x2e>
 8008568:	e7d6      	b.n	8008518 <__swbuf_r+0x2a>
	...

0800856c <__swsetup_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	4b29      	ldr	r3, [pc, #164]	@ (8008614 <__swsetup_r+0xa8>)
 8008570:	4605      	mov	r5, r0
 8008572:	6818      	ldr	r0, [r3, #0]
 8008574:	460c      	mov	r4, r1
 8008576:	b118      	cbz	r0, 8008580 <__swsetup_r+0x14>
 8008578:	6a03      	ldr	r3, [r0, #32]
 800857a:	b90b      	cbnz	r3, 8008580 <__swsetup_r+0x14>
 800857c:	f7ff fee0 	bl	8008340 <__sinit>
 8008580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008584:	0719      	lsls	r1, r3, #28
 8008586:	d422      	bmi.n	80085ce <__swsetup_r+0x62>
 8008588:	06da      	lsls	r2, r3, #27
 800858a:	d407      	bmi.n	800859c <__swsetup_r+0x30>
 800858c:	2209      	movs	r2, #9
 800858e:	602a      	str	r2, [r5, #0]
 8008590:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008594:	81a3      	strh	r3, [r4, #12]
 8008596:	f04f 30ff 	mov.w	r0, #4294967295
 800859a:	e033      	b.n	8008604 <__swsetup_r+0x98>
 800859c:	0758      	lsls	r0, r3, #29
 800859e:	d512      	bpl.n	80085c6 <__swsetup_r+0x5a>
 80085a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085a2:	b141      	cbz	r1, 80085b6 <__swsetup_r+0x4a>
 80085a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085a8:	4299      	cmp	r1, r3
 80085aa:	d002      	beq.n	80085b2 <__swsetup_r+0x46>
 80085ac:	4628      	mov	r0, r5
 80085ae:	f000 f91b 	bl	80087e8 <_free_r>
 80085b2:	2300      	movs	r3, #0
 80085b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80085b6:	89a3      	ldrh	r3, [r4, #12]
 80085b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80085bc:	81a3      	strh	r3, [r4, #12]
 80085be:	2300      	movs	r3, #0
 80085c0:	6063      	str	r3, [r4, #4]
 80085c2:	6923      	ldr	r3, [r4, #16]
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	89a3      	ldrh	r3, [r4, #12]
 80085c8:	f043 0308 	orr.w	r3, r3, #8
 80085cc:	81a3      	strh	r3, [r4, #12]
 80085ce:	6923      	ldr	r3, [r4, #16]
 80085d0:	b94b      	cbnz	r3, 80085e6 <__swsetup_r+0x7a>
 80085d2:	89a3      	ldrh	r3, [r4, #12]
 80085d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80085d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085dc:	d003      	beq.n	80085e6 <__swsetup_r+0x7a>
 80085de:	4621      	mov	r1, r4
 80085e0:	4628      	mov	r0, r5
 80085e2:	f000 facb 	bl	8008b7c <__smakebuf_r>
 80085e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ea:	f013 0201 	ands.w	r2, r3, #1
 80085ee:	d00a      	beq.n	8008606 <__swsetup_r+0x9a>
 80085f0:	2200      	movs	r2, #0
 80085f2:	60a2      	str	r2, [r4, #8]
 80085f4:	6962      	ldr	r2, [r4, #20]
 80085f6:	4252      	negs	r2, r2
 80085f8:	61a2      	str	r2, [r4, #24]
 80085fa:	6922      	ldr	r2, [r4, #16]
 80085fc:	b942      	cbnz	r2, 8008610 <__swsetup_r+0xa4>
 80085fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008602:	d1c5      	bne.n	8008590 <__swsetup_r+0x24>
 8008604:	bd38      	pop	{r3, r4, r5, pc}
 8008606:	0799      	lsls	r1, r3, #30
 8008608:	bf58      	it	pl
 800860a:	6962      	ldrpl	r2, [r4, #20]
 800860c:	60a2      	str	r2, [r4, #8]
 800860e:	e7f4      	b.n	80085fa <__swsetup_r+0x8e>
 8008610:	2000      	movs	r0, #0
 8008612:	e7f7      	b.n	8008604 <__swsetup_r+0x98>
 8008614:	2000001c 	.word	0x2000001c

08008618 <memset>:
 8008618:	4402      	add	r2, r0
 800861a:	4603      	mov	r3, r0
 800861c:	4293      	cmp	r3, r2
 800861e:	d100      	bne.n	8008622 <memset+0xa>
 8008620:	4770      	bx	lr
 8008622:	f803 1b01 	strb.w	r1, [r3], #1
 8008626:	e7f9      	b.n	800861c <memset+0x4>

08008628 <_close_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	4d06      	ldr	r5, [pc, #24]	@ (8008644 <_close_r+0x1c>)
 800862c:	2300      	movs	r3, #0
 800862e:	4604      	mov	r4, r0
 8008630:	4608      	mov	r0, r1
 8008632:	602b      	str	r3, [r5, #0]
 8008634:	f7f8 ff8f 	bl	8001556 <_close>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d102      	bne.n	8008642 <_close_r+0x1a>
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	b103      	cbz	r3, 8008642 <_close_r+0x1a>
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	200097cc 	.word	0x200097cc

08008648 <_reclaim_reent>:
 8008648:	4b2d      	ldr	r3, [pc, #180]	@ (8008700 <_reclaim_reent+0xb8>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4283      	cmp	r3, r0
 800864e:	b570      	push	{r4, r5, r6, lr}
 8008650:	4604      	mov	r4, r0
 8008652:	d053      	beq.n	80086fc <_reclaim_reent+0xb4>
 8008654:	69c3      	ldr	r3, [r0, #28]
 8008656:	b31b      	cbz	r3, 80086a0 <_reclaim_reent+0x58>
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	b163      	cbz	r3, 8008676 <_reclaim_reent+0x2e>
 800865c:	2500      	movs	r5, #0
 800865e:	69e3      	ldr	r3, [r4, #28]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	5959      	ldr	r1, [r3, r5]
 8008664:	b9b1      	cbnz	r1, 8008694 <_reclaim_reent+0x4c>
 8008666:	3504      	adds	r5, #4
 8008668:	2d80      	cmp	r5, #128	@ 0x80
 800866a:	d1f8      	bne.n	800865e <_reclaim_reent+0x16>
 800866c:	69e3      	ldr	r3, [r4, #28]
 800866e:	4620      	mov	r0, r4
 8008670:	68d9      	ldr	r1, [r3, #12]
 8008672:	f000 f8b9 	bl	80087e8 <_free_r>
 8008676:	69e3      	ldr	r3, [r4, #28]
 8008678:	6819      	ldr	r1, [r3, #0]
 800867a:	b111      	cbz	r1, 8008682 <_reclaim_reent+0x3a>
 800867c:	4620      	mov	r0, r4
 800867e:	f000 f8b3 	bl	80087e8 <_free_r>
 8008682:	69e3      	ldr	r3, [r4, #28]
 8008684:	689d      	ldr	r5, [r3, #8]
 8008686:	b15d      	cbz	r5, 80086a0 <_reclaim_reent+0x58>
 8008688:	4629      	mov	r1, r5
 800868a:	4620      	mov	r0, r4
 800868c:	682d      	ldr	r5, [r5, #0]
 800868e:	f000 f8ab 	bl	80087e8 <_free_r>
 8008692:	e7f8      	b.n	8008686 <_reclaim_reent+0x3e>
 8008694:	680e      	ldr	r6, [r1, #0]
 8008696:	4620      	mov	r0, r4
 8008698:	f000 f8a6 	bl	80087e8 <_free_r>
 800869c:	4631      	mov	r1, r6
 800869e:	e7e1      	b.n	8008664 <_reclaim_reent+0x1c>
 80086a0:	6961      	ldr	r1, [r4, #20]
 80086a2:	b111      	cbz	r1, 80086aa <_reclaim_reent+0x62>
 80086a4:	4620      	mov	r0, r4
 80086a6:	f000 f89f 	bl	80087e8 <_free_r>
 80086aa:	69e1      	ldr	r1, [r4, #28]
 80086ac:	b111      	cbz	r1, 80086b4 <_reclaim_reent+0x6c>
 80086ae:	4620      	mov	r0, r4
 80086b0:	f000 f89a 	bl	80087e8 <_free_r>
 80086b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80086b6:	b111      	cbz	r1, 80086be <_reclaim_reent+0x76>
 80086b8:	4620      	mov	r0, r4
 80086ba:	f000 f895 	bl	80087e8 <_free_r>
 80086be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086c0:	b111      	cbz	r1, 80086c8 <_reclaim_reent+0x80>
 80086c2:	4620      	mov	r0, r4
 80086c4:	f000 f890 	bl	80087e8 <_free_r>
 80086c8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80086ca:	b111      	cbz	r1, 80086d2 <_reclaim_reent+0x8a>
 80086cc:	4620      	mov	r0, r4
 80086ce:	f000 f88b 	bl	80087e8 <_free_r>
 80086d2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80086d4:	b111      	cbz	r1, 80086dc <_reclaim_reent+0x94>
 80086d6:	4620      	mov	r0, r4
 80086d8:	f000 f886 	bl	80087e8 <_free_r>
 80086dc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80086de:	b111      	cbz	r1, 80086e6 <_reclaim_reent+0x9e>
 80086e0:	4620      	mov	r0, r4
 80086e2:	f000 f881 	bl	80087e8 <_free_r>
 80086e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80086e8:	b111      	cbz	r1, 80086f0 <_reclaim_reent+0xa8>
 80086ea:	4620      	mov	r0, r4
 80086ec:	f000 f87c 	bl	80087e8 <_free_r>
 80086f0:	6a23      	ldr	r3, [r4, #32]
 80086f2:	b11b      	cbz	r3, 80086fc <_reclaim_reent+0xb4>
 80086f4:	4620      	mov	r0, r4
 80086f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80086fa:	4718      	bx	r3
 80086fc:	bd70      	pop	{r4, r5, r6, pc}
 80086fe:	bf00      	nop
 8008700:	2000001c 	.word	0x2000001c

08008704 <_lseek_r>:
 8008704:	b538      	push	{r3, r4, r5, lr}
 8008706:	4d07      	ldr	r5, [pc, #28]	@ (8008724 <_lseek_r+0x20>)
 8008708:	4604      	mov	r4, r0
 800870a:	4608      	mov	r0, r1
 800870c:	4611      	mov	r1, r2
 800870e:	2200      	movs	r2, #0
 8008710:	602a      	str	r2, [r5, #0]
 8008712:	461a      	mov	r2, r3
 8008714:	f7f8 ff46 	bl	80015a4 <_lseek>
 8008718:	1c43      	adds	r3, r0, #1
 800871a:	d102      	bne.n	8008722 <_lseek_r+0x1e>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	b103      	cbz	r3, 8008722 <_lseek_r+0x1e>
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	200097cc 	.word	0x200097cc

08008728 <_read_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	4d07      	ldr	r5, [pc, #28]	@ (8008748 <_read_r+0x20>)
 800872c:	4604      	mov	r4, r0
 800872e:	4608      	mov	r0, r1
 8008730:	4611      	mov	r1, r2
 8008732:	2200      	movs	r2, #0
 8008734:	602a      	str	r2, [r5, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	f7f8 fed4 	bl	80014e4 <_read>
 800873c:	1c43      	adds	r3, r0, #1
 800873e:	d102      	bne.n	8008746 <_read_r+0x1e>
 8008740:	682b      	ldr	r3, [r5, #0]
 8008742:	b103      	cbz	r3, 8008746 <_read_r+0x1e>
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	bd38      	pop	{r3, r4, r5, pc}
 8008748:	200097cc 	.word	0x200097cc

0800874c <_write_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	4d07      	ldr	r5, [pc, #28]	@ (800876c <_write_r+0x20>)
 8008750:	4604      	mov	r4, r0
 8008752:	4608      	mov	r0, r1
 8008754:	4611      	mov	r1, r2
 8008756:	2200      	movs	r2, #0
 8008758:	602a      	str	r2, [r5, #0]
 800875a:	461a      	mov	r2, r3
 800875c:	f7f8 fedf 	bl	800151e <_write>
 8008760:	1c43      	adds	r3, r0, #1
 8008762:	d102      	bne.n	800876a <_write_r+0x1e>
 8008764:	682b      	ldr	r3, [r5, #0]
 8008766:	b103      	cbz	r3, 800876a <_write_r+0x1e>
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	bd38      	pop	{r3, r4, r5, pc}
 800876c:	200097cc 	.word	0x200097cc

08008770 <__errno>:
 8008770:	4b01      	ldr	r3, [pc, #4]	@ (8008778 <__errno+0x8>)
 8008772:	6818      	ldr	r0, [r3, #0]
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	2000001c 	.word	0x2000001c

0800877c <__libc_init_array>:
 800877c:	b570      	push	{r4, r5, r6, lr}
 800877e:	4d0d      	ldr	r5, [pc, #52]	@ (80087b4 <__libc_init_array+0x38>)
 8008780:	4c0d      	ldr	r4, [pc, #52]	@ (80087b8 <__libc_init_array+0x3c>)
 8008782:	1b64      	subs	r4, r4, r5
 8008784:	10a4      	asrs	r4, r4, #2
 8008786:	2600      	movs	r6, #0
 8008788:	42a6      	cmp	r6, r4
 800878a:	d109      	bne.n	80087a0 <__libc_init_array+0x24>
 800878c:	4d0b      	ldr	r5, [pc, #44]	@ (80087bc <__libc_init_array+0x40>)
 800878e:	4c0c      	ldr	r4, [pc, #48]	@ (80087c0 <__libc_init_array+0x44>)
 8008790:	f000 fa62 	bl	8008c58 <_init>
 8008794:	1b64      	subs	r4, r4, r5
 8008796:	10a4      	asrs	r4, r4, #2
 8008798:	2600      	movs	r6, #0
 800879a:	42a6      	cmp	r6, r4
 800879c:	d105      	bne.n	80087aa <__libc_init_array+0x2e>
 800879e:	bd70      	pop	{r4, r5, r6, pc}
 80087a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80087a4:	4798      	blx	r3
 80087a6:	3601      	adds	r6, #1
 80087a8:	e7ee      	b.n	8008788 <__libc_init_array+0xc>
 80087aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ae:	4798      	blx	r3
 80087b0:	3601      	adds	r6, #1
 80087b2:	e7f2      	b.n	800879a <__libc_init_array+0x1e>
 80087b4:	08008e3c 	.word	0x08008e3c
 80087b8:	08008e3c 	.word	0x08008e3c
 80087bc:	08008e3c 	.word	0x08008e3c
 80087c0:	08008e44 	.word	0x08008e44

080087c4 <__retarget_lock_init_recursive>:
 80087c4:	4770      	bx	lr

080087c6 <__retarget_lock_acquire_recursive>:
 80087c6:	4770      	bx	lr

080087c8 <__retarget_lock_release_recursive>:
 80087c8:	4770      	bx	lr

080087ca <memcpy>:
 80087ca:	440a      	add	r2, r1
 80087cc:	4291      	cmp	r1, r2
 80087ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80087d2:	d100      	bne.n	80087d6 <memcpy+0xc>
 80087d4:	4770      	bx	lr
 80087d6:	b510      	push	{r4, lr}
 80087d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087e0:	4291      	cmp	r1, r2
 80087e2:	d1f9      	bne.n	80087d8 <memcpy+0xe>
 80087e4:	bd10      	pop	{r4, pc}
	...

080087e8 <_free_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4605      	mov	r5, r0
 80087ec:	2900      	cmp	r1, #0
 80087ee:	d041      	beq.n	8008874 <_free_r+0x8c>
 80087f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087f4:	1f0c      	subs	r4, r1, #4
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	bfb8      	it	lt
 80087fa:	18e4      	addlt	r4, r4, r3
 80087fc:	f000 f8e0 	bl	80089c0 <__malloc_lock>
 8008800:	4a1d      	ldr	r2, [pc, #116]	@ (8008878 <_free_r+0x90>)
 8008802:	6813      	ldr	r3, [r2, #0]
 8008804:	b933      	cbnz	r3, 8008814 <_free_r+0x2c>
 8008806:	6063      	str	r3, [r4, #4]
 8008808:	6014      	str	r4, [r2, #0]
 800880a:	4628      	mov	r0, r5
 800880c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008810:	f000 b8dc 	b.w	80089cc <__malloc_unlock>
 8008814:	42a3      	cmp	r3, r4
 8008816:	d908      	bls.n	800882a <_free_r+0x42>
 8008818:	6820      	ldr	r0, [r4, #0]
 800881a:	1821      	adds	r1, r4, r0
 800881c:	428b      	cmp	r3, r1
 800881e:	bf01      	itttt	eq
 8008820:	6819      	ldreq	r1, [r3, #0]
 8008822:	685b      	ldreq	r3, [r3, #4]
 8008824:	1809      	addeq	r1, r1, r0
 8008826:	6021      	streq	r1, [r4, #0]
 8008828:	e7ed      	b.n	8008806 <_free_r+0x1e>
 800882a:	461a      	mov	r2, r3
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	b10b      	cbz	r3, 8008834 <_free_r+0x4c>
 8008830:	42a3      	cmp	r3, r4
 8008832:	d9fa      	bls.n	800882a <_free_r+0x42>
 8008834:	6811      	ldr	r1, [r2, #0]
 8008836:	1850      	adds	r0, r2, r1
 8008838:	42a0      	cmp	r0, r4
 800883a:	d10b      	bne.n	8008854 <_free_r+0x6c>
 800883c:	6820      	ldr	r0, [r4, #0]
 800883e:	4401      	add	r1, r0
 8008840:	1850      	adds	r0, r2, r1
 8008842:	4283      	cmp	r3, r0
 8008844:	6011      	str	r1, [r2, #0]
 8008846:	d1e0      	bne.n	800880a <_free_r+0x22>
 8008848:	6818      	ldr	r0, [r3, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	6053      	str	r3, [r2, #4]
 800884e:	4408      	add	r0, r1
 8008850:	6010      	str	r0, [r2, #0]
 8008852:	e7da      	b.n	800880a <_free_r+0x22>
 8008854:	d902      	bls.n	800885c <_free_r+0x74>
 8008856:	230c      	movs	r3, #12
 8008858:	602b      	str	r3, [r5, #0]
 800885a:	e7d6      	b.n	800880a <_free_r+0x22>
 800885c:	6820      	ldr	r0, [r4, #0]
 800885e:	1821      	adds	r1, r4, r0
 8008860:	428b      	cmp	r3, r1
 8008862:	bf04      	itt	eq
 8008864:	6819      	ldreq	r1, [r3, #0]
 8008866:	685b      	ldreq	r3, [r3, #4]
 8008868:	6063      	str	r3, [r4, #4]
 800886a:	bf04      	itt	eq
 800886c:	1809      	addeq	r1, r1, r0
 800886e:	6021      	streq	r1, [r4, #0]
 8008870:	6054      	str	r4, [r2, #4]
 8008872:	e7ca      	b.n	800880a <_free_r+0x22>
 8008874:	bd38      	pop	{r3, r4, r5, pc}
 8008876:	bf00      	nop
 8008878:	200097d8 	.word	0x200097d8

0800887c <sbrk_aligned>:
 800887c:	b570      	push	{r4, r5, r6, lr}
 800887e:	4e0f      	ldr	r6, [pc, #60]	@ (80088bc <sbrk_aligned+0x40>)
 8008880:	460c      	mov	r4, r1
 8008882:	6831      	ldr	r1, [r6, #0]
 8008884:	4605      	mov	r5, r0
 8008886:	b911      	cbnz	r1, 800888e <sbrk_aligned+0x12>
 8008888:	f000 f9d6 	bl	8008c38 <_sbrk_r>
 800888c:	6030      	str	r0, [r6, #0]
 800888e:	4621      	mov	r1, r4
 8008890:	4628      	mov	r0, r5
 8008892:	f000 f9d1 	bl	8008c38 <_sbrk_r>
 8008896:	1c43      	adds	r3, r0, #1
 8008898:	d103      	bne.n	80088a2 <sbrk_aligned+0x26>
 800889a:	f04f 34ff 	mov.w	r4, #4294967295
 800889e:	4620      	mov	r0, r4
 80088a0:	bd70      	pop	{r4, r5, r6, pc}
 80088a2:	1cc4      	adds	r4, r0, #3
 80088a4:	f024 0403 	bic.w	r4, r4, #3
 80088a8:	42a0      	cmp	r0, r4
 80088aa:	d0f8      	beq.n	800889e <sbrk_aligned+0x22>
 80088ac:	1a21      	subs	r1, r4, r0
 80088ae:	4628      	mov	r0, r5
 80088b0:	f000 f9c2 	bl	8008c38 <_sbrk_r>
 80088b4:	3001      	adds	r0, #1
 80088b6:	d1f2      	bne.n	800889e <sbrk_aligned+0x22>
 80088b8:	e7ef      	b.n	800889a <sbrk_aligned+0x1e>
 80088ba:	bf00      	nop
 80088bc:	200097d4 	.word	0x200097d4

080088c0 <_malloc_r>:
 80088c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088c4:	1ccd      	adds	r5, r1, #3
 80088c6:	f025 0503 	bic.w	r5, r5, #3
 80088ca:	3508      	adds	r5, #8
 80088cc:	2d0c      	cmp	r5, #12
 80088ce:	bf38      	it	cc
 80088d0:	250c      	movcc	r5, #12
 80088d2:	2d00      	cmp	r5, #0
 80088d4:	4606      	mov	r6, r0
 80088d6:	db01      	blt.n	80088dc <_malloc_r+0x1c>
 80088d8:	42a9      	cmp	r1, r5
 80088da:	d904      	bls.n	80088e6 <_malloc_r+0x26>
 80088dc:	230c      	movs	r3, #12
 80088de:	6033      	str	r3, [r6, #0]
 80088e0:	2000      	movs	r0, #0
 80088e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089bc <_malloc_r+0xfc>
 80088ea:	f000 f869 	bl	80089c0 <__malloc_lock>
 80088ee:	f8d8 3000 	ldr.w	r3, [r8]
 80088f2:	461c      	mov	r4, r3
 80088f4:	bb44      	cbnz	r4, 8008948 <_malloc_r+0x88>
 80088f6:	4629      	mov	r1, r5
 80088f8:	4630      	mov	r0, r6
 80088fa:	f7ff ffbf 	bl	800887c <sbrk_aligned>
 80088fe:	1c43      	adds	r3, r0, #1
 8008900:	4604      	mov	r4, r0
 8008902:	d158      	bne.n	80089b6 <_malloc_r+0xf6>
 8008904:	f8d8 4000 	ldr.w	r4, [r8]
 8008908:	4627      	mov	r7, r4
 800890a:	2f00      	cmp	r7, #0
 800890c:	d143      	bne.n	8008996 <_malloc_r+0xd6>
 800890e:	2c00      	cmp	r4, #0
 8008910:	d04b      	beq.n	80089aa <_malloc_r+0xea>
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	4639      	mov	r1, r7
 8008916:	4630      	mov	r0, r6
 8008918:	eb04 0903 	add.w	r9, r4, r3
 800891c:	f000 f98c 	bl	8008c38 <_sbrk_r>
 8008920:	4581      	cmp	r9, r0
 8008922:	d142      	bne.n	80089aa <_malloc_r+0xea>
 8008924:	6821      	ldr	r1, [r4, #0]
 8008926:	1a6d      	subs	r5, r5, r1
 8008928:	4629      	mov	r1, r5
 800892a:	4630      	mov	r0, r6
 800892c:	f7ff ffa6 	bl	800887c <sbrk_aligned>
 8008930:	3001      	adds	r0, #1
 8008932:	d03a      	beq.n	80089aa <_malloc_r+0xea>
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	442b      	add	r3, r5
 8008938:	6023      	str	r3, [r4, #0]
 800893a:	f8d8 3000 	ldr.w	r3, [r8]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	bb62      	cbnz	r2, 800899c <_malloc_r+0xdc>
 8008942:	f8c8 7000 	str.w	r7, [r8]
 8008946:	e00f      	b.n	8008968 <_malloc_r+0xa8>
 8008948:	6822      	ldr	r2, [r4, #0]
 800894a:	1b52      	subs	r2, r2, r5
 800894c:	d420      	bmi.n	8008990 <_malloc_r+0xd0>
 800894e:	2a0b      	cmp	r2, #11
 8008950:	d917      	bls.n	8008982 <_malloc_r+0xc2>
 8008952:	1961      	adds	r1, r4, r5
 8008954:	42a3      	cmp	r3, r4
 8008956:	6025      	str	r5, [r4, #0]
 8008958:	bf18      	it	ne
 800895a:	6059      	strne	r1, [r3, #4]
 800895c:	6863      	ldr	r3, [r4, #4]
 800895e:	bf08      	it	eq
 8008960:	f8c8 1000 	streq.w	r1, [r8]
 8008964:	5162      	str	r2, [r4, r5]
 8008966:	604b      	str	r3, [r1, #4]
 8008968:	4630      	mov	r0, r6
 800896a:	f000 f82f 	bl	80089cc <__malloc_unlock>
 800896e:	f104 000b 	add.w	r0, r4, #11
 8008972:	1d23      	adds	r3, r4, #4
 8008974:	f020 0007 	bic.w	r0, r0, #7
 8008978:	1ac2      	subs	r2, r0, r3
 800897a:	bf1c      	itt	ne
 800897c:	1a1b      	subne	r3, r3, r0
 800897e:	50a3      	strne	r3, [r4, r2]
 8008980:	e7af      	b.n	80088e2 <_malloc_r+0x22>
 8008982:	6862      	ldr	r2, [r4, #4]
 8008984:	42a3      	cmp	r3, r4
 8008986:	bf0c      	ite	eq
 8008988:	f8c8 2000 	streq.w	r2, [r8]
 800898c:	605a      	strne	r2, [r3, #4]
 800898e:	e7eb      	b.n	8008968 <_malloc_r+0xa8>
 8008990:	4623      	mov	r3, r4
 8008992:	6864      	ldr	r4, [r4, #4]
 8008994:	e7ae      	b.n	80088f4 <_malloc_r+0x34>
 8008996:	463c      	mov	r4, r7
 8008998:	687f      	ldr	r7, [r7, #4]
 800899a:	e7b6      	b.n	800890a <_malloc_r+0x4a>
 800899c:	461a      	mov	r2, r3
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	42a3      	cmp	r3, r4
 80089a2:	d1fb      	bne.n	800899c <_malloc_r+0xdc>
 80089a4:	2300      	movs	r3, #0
 80089a6:	6053      	str	r3, [r2, #4]
 80089a8:	e7de      	b.n	8008968 <_malloc_r+0xa8>
 80089aa:	230c      	movs	r3, #12
 80089ac:	6033      	str	r3, [r6, #0]
 80089ae:	4630      	mov	r0, r6
 80089b0:	f000 f80c 	bl	80089cc <__malloc_unlock>
 80089b4:	e794      	b.n	80088e0 <_malloc_r+0x20>
 80089b6:	6005      	str	r5, [r0, #0]
 80089b8:	e7d6      	b.n	8008968 <_malloc_r+0xa8>
 80089ba:	bf00      	nop
 80089bc:	200097d8 	.word	0x200097d8

080089c0 <__malloc_lock>:
 80089c0:	4801      	ldr	r0, [pc, #4]	@ (80089c8 <__malloc_lock+0x8>)
 80089c2:	f7ff bf00 	b.w	80087c6 <__retarget_lock_acquire_recursive>
 80089c6:	bf00      	nop
 80089c8:	200097d0 	.word	0x200097d0

080089cc <__malloc_unlock>:
 80089cc:	4801      	ldr	r0, [pc, #4]	@ (80089d4 <__malloc_unlock+0x8>)
 80089ce:	f7ff befb 	b.w	80087c8 <__retarget_lock_release_recursive>
 80089d2:	bf00      	nop
 80089d4:	200097d0 	.word	0x200097d0

080089d8 <__sflush_r>:
 80089d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e0:	0716      	lsls	r6, r2, #28
 80089e2:	4605      	mov	r5, r0
 80089e4:	460c      	mov	r4, r1
 80089e6:	d454      	bmi.n	8008a92 <__sflush_r+0xba>
 80089e8:	684b      	ldr	r3, [r1, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	dc02      	bgt.n	80089f4 <__sflush_r+0x1c>
 80089ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	dd48      	ble.n	8008a86 <__sflush_r+0xae>
 80089f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089f6:	2e00      	cmp	r6, #0
 80089f8:	d045      	beq.n	8008a86 <__sflush_r+0xae>
 80089fa:	2300      	movs	r3, #0
 80089fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a00:	682f      	ldr	r7, [r5, #0]
 8008a02:	6a21      	ldr	r1, [r4, #32]
 8008a04:	602b      	str	r3, [r5, #0]
 8008a06:	d030      	beq.n	8008a6a <__sflush_r+0x92>
 8008a08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a0a:	89a3      	ldrh	r3, [r4, #12]
 8008a0c:	0759      	lsls	r1, r3, #29
 8008a0e:	d505      	bpl.n	8008a1c <__sflush_r+0x44>
 8008a10:	6863      	ldr	r3, [r4, #4]
 8008a12:	1ad2      	subs	r2, r2, r3
 8008a14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a16:	b10b      	cbz	r3, 8008a1c <__sflush_r+0x44>
 8008a18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a1a:	1ad2      	subs	r2, r2, r3
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a20:	6a21      	ldr	r1, [r4, #32]
 8008a22:	4628      	mov	r0, r5
 8008a24:	47b0      	blx	r6
 8008a26:	1c43      	adds	r3, r0, #1
 8008a28:	89a3      	ldrh	r3, [r4, #12]
 8008a2a:	d106      	bne.n	8008a3a <__sflush_r+0x62>
 8008a2c:	6829      	ldr	r1, [r5, #0]
 8008a2e:	291d      	cmp	r1, #29
 8008a30:	d82b      	bhi.n	8008a8a <__sflush_r+0xb2>
 8008a32:	4a2a      	ldr	r2, [pc, #168]	@ (8008adc <__sflush_r+0x104>)
 8008a34:	40ca      	lsrs	r2, r1
 8008a36:	07d6      	lsls	r6, r2, #31
 8008a38:	d527      	bpl.n	8008a8a <__sflush_r+0xb2>
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	6062      	str	r2, [r4, #4]
 8008a3e:	04d9      	lsls	r1, r3, #19
 8008a40:	6922      	ldr	r2, [r4, #16]
 8008a42:	6022      	str	r2, [r4, #0]
 8008a44:	d504      	bpl.n	8008a50 <__sflush_r+0x78>
 8008a46:	1c42      	adds	r2, r0, #1
 8008a48:	d101      	bne.n	8008a4e <__sflush_r+0x76>
 8008a4a:	682b      	ldr	r3, [r5, #0]
 8008a4c:	b903      	cbnz	r3, 8008a50 <__sflush_r+0x78>
 8008a4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a52:	602f      	str	r7, [r5, #0]
 8008a54:	b1b9      	cbz	r1, 8008a86 <__sflush_r+0xae>
 8008a56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a5a:	4299      	cmp	r1, r3
 8008a5c:	d002      	beq.n	8008a64 <__sflush_r+0x8c>
 8008a5e:	4628      	mov	r0, r5
 8008a60:	f7ff fec2 	bl	80087e8 <_free_r>
 8008a64:	2300      	movs	r3, #0
 8008a66:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a68:	e00d      	b.n	8008a86 <__sflush_r+0xae>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	47b0      	blx	r6
 8008a70:	4602      	mov	r2, r0
 8008a72:	1c50      	adds	r0, r2, #1
 8008a74:	d1c9      	bne.n	8008a0a <__sflush_r+0x32>
 8008a76:	682b      	ldr	r3, [r5, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d0c6      	beq.n	8008a0a <__sflush_r+0x32>
 8008a7c:	2b1d      	cmp	r3, #29
 8008a7e:	d001      	beq.n	8008a84 <__sflush_r+0xac>
 8008a80:	2b16      	cmp	r3, #22
 8008a82:	d11e      	bne.n	8008ac2 <__sflush_r+0xea>
 8008a84:	602f      	str	r7, [r5, #0]
 8008a86:	2000      	movs	r0, #0
 8008a88:	e022      	b.n	8008ad0 <__sflush_r+0xf8>
 8008a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a8e:	b21b      	sxth	r3, r3
 8008a90:	e01b      	b.n	8008aca <__sflush_r+0xf2>
 8008a92:	690f      	ldr	r7, [r1, #16]
 8008a94:	2f00      	cmp	r7, #0
 8008a96:	d0f6      	beq.n	8008a86 <__sflush_r+0xae>
 8008a98:	0793      	lsls	r3, r2, #30
 8008a9a:	680e      	ldr	r6, [r1, #0]
 8008a9c:	bf08      	it	eq
 8008a9e:	694b      	ldreq	r3, [r1, #20]
 8008aa0:	600f      	str	r7, [r1, #0]
 8008aa2:	bf18      	it	ne
 8008aa4:	2300      	movne	r3, #0
 8008aa6:	eba6 0807 	sub.w	r8, r6, r7
 8008aaa:	608b      	str	r3, [r1, #8]
 8008aac:	f1b8 0f00 	cmp.w	r8, #0
 8008ab0:	dde9      	ble.n	8008a86 <__sflush_r+0xae>
 8008ab2:	6a21      	ldr	r1, [r4, #32]
 8008ab4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ab6:	4643      	mov	r3, r8
 8008ab8:	463a      	mov	r2, r7
 8008aba:	4628      	mov	r0, r5
 8008abc:	47b0      	blx	r6
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	dc08      	bgt.n	8008ad4 <__sflush_r+0xfc>
 8008ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aca:	81a3      	strh	r3, [r4, #12]
 8008acc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ad4:	4407      	add	r7, r0
 8008ad6:	eba8 0800 	sub.w	r8, r8, r0
 8008ada:	e7e7      	b.n	8008aac <__sflush_r+0xd4>
 8008adc:	20400001 	.word	0x20400001

08008ae0 <_fflush_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	690b      	ldr	r3, [r1, #16]
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	b913      	cbnz	r3, 8008af0 <_fflush_r+0x10>
 8008aea:	2500      	movs	r5, #0
 8008aec:	4628      	mov	r0, r5
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	b118      	cbz	r0, 8008afa <_fflush_r+0x1a>
 8008af2:	6a03      	ldr	r3, [r0, #32]
 8008af4:	b90b      	cbnz	r3, 8008afa <_fflush_r+0x1a>
 8008af6:	f7ff fc23 	bl	8008340 <__sinit>
 8008afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d0f3      	beq.n	8008aea <_fflush_r+0xa>
 8008b02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b04:	07d0      	lsls	r0, r2, #31
 8008b06:	d404      	bmi.n	8008b12 <_fflush_r+0x32>
 8008b08:	0599      	lsls	r1, r3, #22
 8008b0a:	d402      	bmi.n	8008b12 <_fflush_r+0x32>
 8008b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b0e:	f7ff fe5a 	bl	80087c6 <__retarget_lock_acquire_recursive>
 8008b12:	4628      	mov	r0, r5
 8008b14:	4621      	mov	r1, r4
 8008b16:	f7ff ff5f 	bl	80089d8 <__sflush_r>
 8008b1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b1c:	07da      	lsls	r2, r3, #31
 8008b1e:	4605      	mov	r5, r0
 8008b20:	d4e4      	bmi.n	8008aec <_fflush_r+0xc>
 8008b22:	89a3      	ldrh	r3, [r4, #12]
 8008b24:	059b      	lsls	r3, r3, #22
 8008b26:	d4e1      	bmi.n	8008aec <_fflush_r+0xc>
 8008b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b2a:	f7ff fe4d 	bl	80087c8 <__retarget_lock_release_recursive>
 8008b2e:	e7dd      	b.n	8008aec <_fflush_r+0xc>

08008b30 <__swhatbuf_r>:
 8008b30:	b570      	push	{r4, r5, r6, lr}
 8008b32:	460c      	mov	r4, r1
 8008b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b38:	2900      	cmp	r1, #0
 8008b3a:	b096      	sub	sp, #88	@ 0x58
 8008b3c:	4615      	mov	r5, r2
 8008b3e:	461e      	mov	r6, r3
 8008b40:	da0d      	bge.n	8008b5e <__swhatbuf_r+0x2e>
 8008b42:	89a3      	ldrh	r3, [r4, #12]
 8008b44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b48:	f04f 0100 	mov.w	r1, #0
 8008b4c:	bf14      	ite	ne
 8008b4e:	2340      	movne	r3, #64	@ 0x40
 8008b50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b54:	2000      	movs	r0, #0
 8008b56:	6031      	str	r1, [r6, #0]
 8008b58:	602b      	str	r3, [r5, #0]
 8008b5a:	b016      	add	sp, #88	@ 0x58
 8008b5c:	bd70      	pop	{r4, r5, r6, pc}
 8008b5e:	466a      	mov	r2, sp
 8008b60:	f000 f848 	bl	8008bf4 <_fstat_r>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	dbec      	blt.n	8008b42 <__swhatbuf_r+0x12>
 8008b68:	9901      	ldr	r1, [sp, #4]
 8008b6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b72:	4259      	negs	r1, r3
 8008b74:	4159      	adcs	r1, r3
 8008b76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b7a:	e7eb      	b.n	8008b54 <__swhatbuf_r+0x24>

08008b7c <__smakebuf_r>:
 8008b7c:	898b      	ldrh	r3, [r1, #12]
 8008b7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b80:	079d      	lsls	r5, r3, #30
 8008b82:	4606      	mov	r6, r0
 8008b84:	460c      	mov	r4, r1
 8008b86:	d507      	bpl.n	8008b98 <__smakebuf_r+0x1c>
 8008b88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b8c:	6023      	str	r3, [r4, #0]
 8008b8e:	6123      	str	r3, [r4, #16]
 8008b90:	2301      	movs	r3, #1
 8008b92:	6163      	str	r3, [r4, #20]
 8008b94:	b003      	add	sp, #12
 8008b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b98:	ab01      	add	r3, sp, #4
 8008b9a:	466a      	mov	r2, sp
 8008b9c:	f7ff ffc8 	bl	8008b30 <__swhatbuf_r>
 8008ba0:	9f00      	ldr	r7, [sp, #0]
 8008ba2:	4605      	mov	r5, r0
 8008ba4:	4639      	mov	r1, r7
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	f7ff fe8a 	bl	80088c0 <_malloc_r>
 8008bac:	b948      	cbnz	r0, 8008bc2 <__smakebuf_r+0x46>
 8008bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bb2:	059a      	lsls	r2, r3, #22
 8008bb4:	d4ee      	bmi.n	8008b94 <__smakebuf_r+0x18>
 8008bb6:	f023 0303 	bic.w	r3, r3, #3
 8008bba:	f043 0302 	orr.w	r3, r3, #2
 8008bbe:	81a3      	strh	r3, [r4, #12]
 8008bc0:	e7e2      	b.n	8008b88 <__smakebuf_r+0xc>
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	6020      	str	r0, [r4, #0]
 8008bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bca:	81a3      	strh	r3, [r4, #12]
 8008bcc:	9b01      	ldr	r3, [sp, #4]
 8008bce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008bd2:	b15b      	cbz	r3, 8008bec <__smakebuf_r+0x70>
 8008bd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f000 f81d 	bl	8008c18 <_isatty_r>
 8008bde:	b128      	cbz	r0, 8008bec <__smakebuf_r+0x70>
 8008be0:	89a3      	ldrh	r3, [r4, #12]
 8008be2:	f023 0303 	bic.w	r3, r3, #3
 8008be6:	f043 0301 	orr.w	r3, r3, #1
 8008bea:	81a3      	strh	r3, [r4, #12]
 8008bec:	89a3      	ldrh	r3, [r4, #12]
 8008bee:	431d      	orrs	r5, r3
 8008bf0:	81a5      	strh	r5, [r4, #12]
 8008bf2:	e7cf      	b.n	8008b94 <__smakebuf_r+0x18>

08008bf4 <_fstat_r>:
 8008bf4:	b538      	push	{r3, r4, r5, lr}
 8008bf6:	4d07      	ldr	r5, [pc, #28]	@ (8008c14 <_fstat_r+0x20>)
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	4608      	mov	r0, r1
 8008bfe:	4611      	mov	r1, r2
 8008c00:	602b      	str	r3, [r5, #0]
 8008c02:	f7f8 fcb4 	bl	800156e <_fstat>
 8008c06:	1c43      	adds	r3, r0, #1
 8008c08:	d102      	bne.n	8008c10 <_fstat_r+0x1c>
 8008c0a:	682b      	ldr	r3, [r5, #0]
 8008c0c:	b103      	cbz	r3, 8008c10 <_fstat_r+0x1c>
 8008c0e:	6023      	str	r3, [r4, #0]
 8008c10:	bd38      	pop	{r3, r4, r5, pc}
 8008c12:	bf00      	nop
 8008c14:	200097cc 	.word	0x200097cc

08008c18 <_isatty_r>:
 8008c18:	b538      	push	{r3, r4, r5, lr}
 8008c1a:	4d06      	ldr	r5, [pc, #24]	@ (8008c34 <_isatty_r+0x1c>)
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	4604      	mov	r4, r0
 8008c20:	4608      	mov	r0, r1
 8008c22:	602b      	str	r3, [r5, #0]
 8008c24:	f7f8 fcb3 	bl	800158e <_isatty>
 8008c28:	1c43      	adds	r3, r0, #1
 8008c2a:	d102      	bne.n	8008c32 <_isatty_r+0x1a>
 8008c2c:	682b      	ldr	r3, [r5, #0]
 8008c2e:	b103      	cbz	r3, 8008c32 <_isatty_r+0x1a>
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	bd38      	pop	{r3, r4, r5, pc}
 8008c34:	200097cc 	.word	0x200097cc

08008c38 <_sbrk_r>:
 8008c38:	b538      	push	{r3, r4, r5, lr}
 8008c3a:	4d06      	ldr	r5, [pc, #24]	@ (8008c54 <_sbrk_r+0x1c>)
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	4604      	mov	r4, r0
 8008c40:	4608      	mov	r0, r1
 8008c42:	602b      	str	r3, [r5, #0]
 8008c44:	f7f8 fcbc 	bl	80015c0 <_sbrk>
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	d102      	bne.n	8008c52 <_sbrk_r+0x1a>
 8008c4c:	682b      	ldr	r3, [r5, #0]
 8008c4e:	b103      	cbz	r3, 8008c52 <_sbrk_r+0x1a>
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
 8008c54:	200097cc 	.word	0x200097cc

08008c58 <_init>:
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	bf00      	nop
 8008c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5e:	bc08      	pop	{r3}
 8008c60:	469e      	mov	lr, r3
 8008c62:	4770      	bx	lr

08008c64 <_fini>:
 8008c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c66:	bf00      	nop
 8008c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c6a:	bc08      	pop	{r3}
 8008c6c:	469e      	mov	lr, r3
 8008c6e:	4770      	bx	lr
